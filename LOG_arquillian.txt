/ ARQUILLIAN FIRST 2018-2-19

/ run config arquillian-getting_started-clean-test
/ run config arquillian-getting_started-test

/ doe in de regel arquillian-getting_started-clean-test, 
/ clean verwijdert surefire\... TODO , maar als deze er niet is, doe dan alleen test: arquillian-getting_started-test
/ doe ook arquillian-getting_started-test als we wildfly-10.1.0.Final hebben installed in target\	, 
/ we hebben wildfly-10.1.0.Final in target\ en in \Users\eric\bin

/ 1313	.

$ vi pom.xml
  	<profile>
  		<id>weld-ee-embedded</id>
  		<activation>
  			<activeByDefault>true</activeByDefault>
/ right click project, Maven, Update project...

/ geen arquillian.xml

/ in 
arquillian-getting_started-test
/ WEL of GEEN JBOSS_HOME

/ OK


/ 1313	. 

$ vi pom.xml
  	 <profile>
  		<id>wildfly-managed</id>
  		<activation>
  			<activeByDefault>true</activeByDefault>
  		</activation>
/ right click project, Maven, Update project...

/ 131313.
		
$ vi arquillian.xml
	<container qualifier="wildfly-managed" default="true">
		<configuration>
			<property name="jbossHome">target/wildfly-10.1.0.Final</property>
			 <!-- 
			<property name="javaVmArguments">-Xrunjdwp:transport=dt_socket,address=8787,server=y,suspend=y</property>
			-->
		</configuration>
	</container>	
	
/ in 
arquillian-getting_started-test
/ GEEN JBOSS_HOME

/ Dit is OK

/ 131313	. 

/ GEEN arquillian.xml

/ in 
arquillian-getting_started-test
JBOSS_HOME = C:\Users\ervelden\bin\wildfly-10.1.0.Final
/ of,
JBOSS_HOME=target/wildfly-10.1.0.Final

/ OK

/ 1313	. 

$ vi pom.xml
  	  <profile>
  		<id>wildfly-managed-from-repo</id>
  		<activation>
  			<activeByDefault>true</activeByDefault>
  		</activation>
		
$ vi arquillian.xml
	<container qualifier="wildfly-managed" default="true">
		<configuration>
			<property name="jbossHome">target/wildfly-10.1.0.Final</property>
			 <!-- 
			<property name="javaVmArguments">-Xrunjdwp:transport=dt_socket,address=8787,server=y,suspend=y</property>
			-->
		</configuration>
	</container>	
	
/ in 
arquillian-getting_started-test
/ GEEN JBOSS_HOME

/ OK

/ 1313	. 

/ debug,

$ vi pom.xml
  	 <profile>
  		<id>wildfly-managed</id>
  		<activation>
  			<activeByDefault>true</activeByDefault>
  		</activation>
		
$ vi arquillian.xml
	<container qualifier="wildfly-managed" default="true">
		<configuration>
			<property name="jbossHome">/Users/ervelden/bin/wildfly-10.1.0.Final</property>
			<property name="javaVmArguments">-Xrunjdwp:transport=dt_socket,address=8787,server=y,suspend=y</property>
		</configuration>
	</container>

/ run config arquillian-getting_started-clean-test 
/ GEEN JBOSS_HOME

/ debug config GreeterTest-remote
project: arquillian-getting_started
host: localhost
port: 8787

/ run arquillian-getting_started-clean-test
INFO: XNIO NIO Implementation Version 3.5.1.Final
Listening for transport dt_socket at address: 8787

/ debug GreeterTest-remote
/ hij valt in b 

/ we moeten ook h2 start, 
/ want onze wildfly heeft verschillende datasources, en wildfly maakt met allemaal contact,
GreeterTest.shouldCreateGreeting() line: 34	C:\Users\ervelden\bin\wildfly-10.1.0.Final>java -classpath modules\system\layers\base\com\h2database\h2\main\h2-1.3.173.jar org.
h2.tools.Server -tcp
TCP server running at tcp://10.87.0.128:9092 (only local connections)

/ als we aan het debug zijn, draait wildfly dus, en kunnen we connect:

C:\Users\ervelden\bin\wildfly-10.1.0.Final>bin\jboss-cli.bat
You are disconnected at the moment. Type 'connect' to connect to the server or 'help' for the list of supported commands.
[disconnected /] connect
The controller is not available at localhost:9990: java.net.ConnectException: WFLYPRT0053: Could not connect to http-remoting://localhost:9990. The connection failed: WFLYPRT0053: Could not connect to http-remoting://localhost:9990. The connection failed: Connection refused: no further information
/ er draait nu geen wildfly,

/ ga debug, dus
/ run config arquillian-getting_started-clean-test 
/ debug config GreeterTest-remote
/ we vallen in b GreeterTest.shouldCreateGreeting	, 

/ Nu lukt het wel,
[disconnected /] connect
[standalone@localhost:9990 /] /subsystem=datasources:read-resource
{
    "outcome" => "success",
    "result" => {
        "data-source" => {"ExampleDS" => undefined},
        "jdbc-driver" => {
            "h2" => undefined,
            "postgresql" => undefined
        },
        "xa-data-source" => {
            "RemoteExampleDS" => undefined,
            "PostgreSQLDS" => undefined
        }
    }
}

C:\Users\ervelden\bin\wildfly-10.1.0.Final>java -classpath modules\system\layers\base\com\h2database\h2\main\h2-1.3.173.jar org.h2.tools.Shell -url jdbc:h2:tcp://localhost/~/h2/test -user sa -password sa
sql> show tables;
TABLE_NAME | TABLE_SCHEMA
GAME       | PUBLIC
(1 row, 42 ms)
/ we moeten password sa geven, "" werkt niet,
////////////////////////
/ We zien hieronder in de ds dat inderdaad localhost/~/h2/test ook de locatie is van de client die de ds in wildfly is, net als de client die we hierboven hebben start, 


[standalone@localhost:9990 /] /subsystem=datasources:read-resource(recursive=true)
{
    "outcome" => "success",
    "result" => {
        "data-source" => {"ExampleDS" => {
            "allocation-retry" => undefined,
            "allocation-retry-wait-millis" => undefined,
            "allow-multiple-users" => false,
            "background-validation" => undefined,
            "background-validation-millis" => undefined,
            "blocking-timeout-wait-millis" => undefined,
            "capacity-decrementer-class" => undefined,
            "capacity-decrementer-properties" => undefined,
            "capacity-incrementer-class" => undefined,
            "capacity-incrementer-properties" => undefined,
            "check-valid-connection-sql" => undefined,
            "connectable" => false,
            "connection-listener-class" => undefined,
            "connection-listener-property" => undefined,
            "connection-url" => "jdbc:h2:mem:test;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE",
            "datasource-class" => undefined,
            "driver-class" => undefined,
            "driver-name" => "h2",
            "enabled" => true,
            "enlistment-trace" => true,
            "exception-sorter-class-name" => undefined,
            "exception-sorter-properties" => undefined,
            "flush-strategy" => undefined,
            "idle-timeout-minutes" => undefined,
            "initial-pool-size" => undefined,
            "jndi-name" => "java:jboss/datasources/ExampleDS",
            "jta" => true,
            "max-pool-size" => undefined,
            "mcp" => "org.jboss.jca.core.connectionmanager.pool.mcp.SemaphoreConcurrentLinkedDequeManagedConnectionPool",
            "min-pool-size" => undefined,
            "new-connection-sql" => undefined,
            "password" => "sa",
            "pool-fair" => undefined,
            "pool-prefill" => undefined,
            "pool-use-strict-min" => undefined,
            "prepared-statements-cache-size" => undefined,
            "query-timeout" => undefined,
            "reauth-plugin-class-name" => undefined,
            "reauth-plugin-properties" => undefined,
            "security-domain" => undefined,
            "set-tx-query-timeout" => false,
            "share-prepared-statements" => false,
            "spy" => false,
            "stale-connection-checker-class-name" => undefined,
            "stale-connection-checker-properties" => undefined,
            "statistics-enabled" => false,
            "track-statements" => "NOWARN",
            "tracking" => false,
            "transaction-isolation" => undefined,
            "url-delimiter" => undefined,
            "url-selector-strategy-class-name" => undefined,
            "use-ccm" => true,
            "use-fast-fail" => false,
            "use-java-context" => true,
            "use-try-lock" => undefined,
            "user-name" => "sa",
            "valid-connection-checker-class-name" => undefined,
            "valid-connection-checker-properties" => undefined,
            "validate-on-match" => undefined,
            "connection-properties" => undefined,
            "statistics" => undefined
        }},
        "jdbc-driver" => {
            "h2" => {
                "deployment-name" => undefined,
                "driver-class-name" => undefined,
                "driver-datasource-class-name" => undefined,
                "driver-major-version" => undefined,
                "driver-minor-version" => undefined,
                "driver-module-name" => "com.h2database.h2",
                "driver-name" => "h2",
                "driver-xa-datasource-class-name" => "org.h2.jdbcx.JdbcDataSource",
                "jdbc-compliant" => undefined,
                "module-slot" => undefined,
                "profile" => undefined,
                "xa-datasource-class" => undefined
            },
            "postgresql" => {
                "deployment-name" => undefined,
                "driver-class-name" => undefined,
                "driver-datasource-class-name" => undefined,
                "driver-major-version" => undefined,
                "driver-minor-version" => undefined,
                "driver-module-name" => "com.postgresql",
                "driver-name" => "postgresql",
                "driver-xa-datasource-class-name" => "org.postgresql.xa.PGXADataSource",
                "jdbc-compliant" => undefined,
                "module-slot" => undefined,
                "profile" => undefined,
                "xa-datasource-class" => undefined
            }
        },
        "xa-data-source" => {
            "RemoteExampleDS" => {
                "allocation-retry" => undefined,
                "allocation-retry-wait-millis" => undefined,
                "allow-multiple-users" => false,
                "background-validation" => undefined,
                "background-validation-millis" => undefined,
                "blocking-timeout-wait-millis" => undefined,
                "capacity-decrementer-class" => undefined,
                "capacity-decrementer-properties" => undefined,
                "capacity-incrementer-class" => undefined,
                "capacity-incrementer-properties" => undefined,
                "check-valid-connection-sql" => undefined,
                "connectable" => false,
                "connection-listener-class" => undefined,
                "connection-listener-property" => undefined,
                "driver-name" => "h2",
                "enabled" => true,
                "enlistment-trace" => true,
                "exception-sorter-class-name" => undefined,
                "exception-sorter-properties" => undefined,
                "flush-strategy" => undefined,
                "idle-timeout-minutes" => undefined,
                "initial-pool-size" => undefined,
                "interleaving" => false,
                "jndi-name" => "java:jboss/datasources/RemoteExampleDS",
                "max-pool-size" => undefined,
                "mcp" => "org.jboss.jca.core.connectionmanager.pool.mcp.SemaphoreConcurrentLinkedDequeManagedConnectionPool",
                "min-pool-size" => undefined,
                "new-connection-sql" => undefined,
                "no-recovery" => undefined,
                "no-tx-separate-pool" => false,
                "pad-xid" => false,
                "password" => "sa",
                "pool-fair" => undefined,
                "pool-prefill" => undefined,
                "pool-use-strict-min" => undefined,
                "prepared-statements-cache-size" => undefined,
                "query-timeout" => undefined,
                "reauth-plugin-class-name" => undefined,
                "reauth-plugin-properties" => undefined,
                "recovery-password" => undefined,
                "recovery-plugin-class-name" => undefined,
                "recovery-plugin-properties" => undefined,
                "recovery-security-domain" => undefined,
                "recovery-username" => undefined,
                "same-rm-override" => undefined,
                "security-domain" => undefined,
                "set-tx-query-timeout" => false,
                "share-prepared-statements" => false,
                "spy" => false,
                "stale-connection-checker-class-name" => undefined,
                "stale-connection-checker-properties" => undefined,
                "statistics-enabled" => false,
                "track-statements" => "NOWARN",
                "tracking" => false,
                "transaction-isolation" => undefined,
                "url-delimiter" => undefined,
                "url-property" => undefined,
                "url-selector-strategy-class-name" => undefined,
                "use-ccm" => true,
                "use-fast-fail" => false,
                "use-java-context" => true,
                "use-try-lock" => undefined,
                "user-name" => "sa",
                "valid-connection-checker-class-name" => undefined,
                "valid-connection-checker-properties" => undefined,
                "validate-on-match" => undefined,
                "wrap-xa-resource" => true,
                "xa-datasource-class" => undefined,
                "xa-resource-timeout" => undefined,
                "statistics" => undefined,
                "xa-datasource-properties" => {"URL" => {"value" => "jdbc:h2:tcp://localhost/~/h2/test"}}
            },
            "PostgreSQLDS" => {
                "allocation-retry" => undefined,
                "allocation-retry-wait-millis" => undefined,
                "allow-multiple-users" => false,
                "background-validation" => undefined,
                "background-validation-millis" => undefined,
                "blocking-timeout-wait-millis" => undefined,
                "capacity-decrementer-class" => undefined,
                "capacity-decrementer-properties" => undefined,
                "capacity-incrementer-class" => undefined,
                "capacity-incrementer-properties" => undefined,
                "check-valid-connection-sql" => undefined,
                "connectable" => false,
                "connection-listener-class" => undefined,
                "connection-listener-property" => undefined,
                "driver-name" => "postgresql",
                "enabled" => true,
                "enlistment-trace" => true,
                "exception-sorter-class-name" => undefined,
                "exception-sorter-properties" => undefined,
                "flush-strategy" => undefined,
                "idle-timeout-minutes" => undefined,
                "initial-pool-size" => undefined,
                "interleaving" => false,
                "jndi-name" => "java:jboss/datasources/PostgreSQLDS",
                "max-pool-size" => undefined,
                "mcp" => "org.jboss.jca.core.connectionmanager.pool.mcp.SemaphoreConcurrentLinkedDequeManagedConnectionPool",
                "min-pool-size" => undefined,
                "new-connection-sql" => undefined,
                "no-recovery" => undefined,
                "no-tx-separate-pool" => false,
                "pad-xid" => false,
                "password" => undefined,
                "pool-fair" => undefined,
                "pool-prefill" => undefined,
                "pool-use-strict-min" => undefined,
                "prepared-statements-cache-size" => undefined,
                "query-timeout" => undefined,
                "reauth-plugin-class-name" => undefined,
                "reauth-plugin-properties" => undefined,
                "recovery-password" => undefined,
                "recovery-plugin-class-name" => undefined,
                "recovery-plugin-properties" => undefined,
                "recovery-security-domain" => undefined,
                "recovery-username" => undefined,
                "same-rm-override" => undefined,
                "security-domain" => undefined,
                "set-tx-query-timeout" => false,
                "share-prepared-statements" => false,
                "spy" => false,
                "stale-connection-checker-class-name" => undefined,
                "stale-connection-checker-properties" => undefined,
                "statistics-enabled" => false,
                "track-statements" => "NOWARN",
                "tracking" => false,
                "transaction-isolation" => undefined,
                "url-delimiter" => undefined,
                "url-property" => undefined,
                "url-selector-strategy-class-name" => undefined,
                "use-ccm" => true,
                "use-fast-fail" => false,
                "use-java-context" => true,
                "use-try-lock" => undefined,
                "user-name" => undefined,
                "valid-connection-checker-class-name" => undefined,
                "valid-connection-checker-properties" => undefined,
                "validate-on-match" => undefined,
                "wrap-xa-resource" => true,
                "xa-datasource-class" => undefined,
                "xa-resource-timeout" => undefined,
                "statistics" => undefined,
                "xa-datasource-properties" => {
                    "ServerName" => {"value" => "localhost"},
                    "DatabaseName" => {"value" => "test"},
                    "User" => {"value" => "eric"},
                    "Password" => {"value" => "vi_lang17"}
                }
            }
        }
    }
}
[standalone@localhost:9990 /]

/ als we niet h2server start, dan in console in eclipse zien we,

22:09:33,250 ERROR [org.jboss.jca.core.tx.jbossts.XAResourceRecoveryImpl] (Periodic Recovery) IJ000906: Error during crash recovery: java:jboss/datasources/RemoteExampleDS (IJ031084: Unable to create connection): javax.resource.ResourceException: IJ031084: Unable to create connection
	at org.jboss.jca.adapters.jdbc.xa.XAManagedConnectionFactory.getXAManagedConnection(XAManagedConnectionFactory.java:509)
	at org.jboss.jca.adapters.jdbc.xa.XAManagedConnectionFactory$1$1.run(XAManagedConnectionFactory.java:395)
	at org.jboss.jca.adapters.jdbc.xa.XAManagedConnectionFactory$1$1.run(XAManagedConnectionFactory.java:392)
	at java.security.AccessController.doPrivileged(Native Method)
	at javax.security.auth.Subject.doAs(Subject.java:422)
	at org.jboss.jca.adapters.jdbc.xa.XAManagedConnectionFactory$1.run(XAManagedConnectionFactory.java:391)
	at org.jboss.jca.adapters.jdbc.xa.XAManagedConnectionFactory$1.run(XAManagedConnectionFactory.java:388)
	at java.security.AccessController.doPrivileged(Native Method)
	at org.jboss.jca.adapters.jdbc.xa.XAManagedConnectionFactory.createManagedConnection(XAManagedConnectionFactory.java:387)
	at org.jboss.jca.core.tx.jbossts.XAResourceRecoveryImpl.open(XAResourceRecoveryImpl.java:355)
	at org.jboss.jca.core.tx.jbossts.XAResourceRecoveryImpl.getXAResources(XAResourceRecoveryImpl.java:193)
	at com.arjuna.ats.internal.jbossatx.jta.XAResourceRecoveryHelperWrapper.getXAResources(XAResourceRecoveryHelperWrapper.java:51)
	at com.arjuna.ats.internal.jta.recovery.arjunacore.XARecoveryModule.resourceInitiatedRecoveryForRecoveryHelpers(XARecoveryModule.java:515)
	at com.arjuna.ats.internal.jta.recovery.arjunacore.XARecoveryModule.periodicWorkFirstPass(XARecoveryModule.java:181)
	at com.arjuna.ats.internal.arjuna.recovery.PeriodicRecovery.doWorkInternal(PeriodicRecovery.java:747)
	at com.arjuna.ats.internal.arjuna.recovery.PeriodicRecovery.run(PeriodicRecovery.java:375)
Caused by: org.h2.jdbc.JdbcSQLException: Connection is broken: "java.net.ConnectException: Connection refused: connect: localhost" [90067-173]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:331)
	at org.h2.message.DbException.get(DbException.java:160)
	at org.h2.engine.SessionRemote.connectServer(SessionRemote.java:407)
	at org.h2.engine.SessionRemote.connectEmbeddedOrServer(SessionRemote.java:295)
	at org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:105)
	at org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:90)
	at org.h2.Driver.connect(Driver.java:73)
	at org.h2.jdbcx.JdbcDataSource.getJdbcConnection(JdbcDataSource.java:187)
	at org.h2.jdbcx.JdbcDataSource.getXAConnection(JdbcDataSource.java:340)
	at org.jboss.jca.adapters.jdbc.xa.XAManagedConnectionFactory.getXAManagedConnection(XAManagedConnectionFactory.java:492)
	... 15 more
Caused by: java.net.ConnectException: Connection refused: connect
	at java.net.DualStackPlainSocketImpl.waitForConnect(Native Method)
	at java.net.DualStackPlainSocketImpl.socketConnect(DualStackPlainSocketImpl.java:85)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)
	at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:172)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
	at java.net.Socket.connect(Socket.java:589)
	at org.h2.util.NetUtils.createSocket(NetUtils.java:119)
	at org.h2.util.NetUtils.createSocket(NetUtils.java:100)
	at org.h2.engine.SessionRemote.initTransfer(SessionRemote.java:95)
	at org.h2.engine.SessionRemote.connectServer(SessionRemote.java:403)
	... 22 more

22:11:45,289 ERROR [org.jboss.jca.core.tx.jbossts.XAResourceRecoveryImpl] (Periodic Recovery) IJ000906: Error during crash recovery: java:jboss/datasources/RemoteExampleDS (IJ031084: Unable to create connection): javax.resource.ResourceException: IJ031084: Unable to create connection
	at org.jboss.jca.adapters.jdbc.xa.XAManagedConnectionFactory.getXAManagedConnection(XAManagedConnectionFactory.java:509)
	at org.jboss.jca.adapters.jdbc.xa.XAManagedConnectionFactory$1$1.run(XAManagedConnectionFactory.java:395)
	at org.jboss.jca.adapters.jdbc.xa.XAManagedConnectionFactory$1$1.run(XAManagedConnectionFactory.java:392)
	at java.security.AccessController.doPrivileged(Native Method)
	at javax.security.auth.Subject.doAs(Subject.java:422)
	at org.jboss.jca.adapters.jdbc.xa.XAManagedConnectionFactory$1.run(XAManagedConnectionFactory.java:391)
	at org.jboss.
	
/ 13	. 

/ in pom profile wildfly-managed-from-repo

/ als we eerst $ mvn clean doen, wordt target/ leeg gemaakt, 

[arquillian-getting_started]$ build test --profile wildfly-managed-from-repo
...
[INFO] Configured Artifact: org.wildfly:wildfly-dist:10.1.0.Final:zip
[INFO] Unpacking C:\Users\ervelden\.m2\repository\org\wildfly\wildfly-dist\10.1.0.Final\wildfly-dist-10.1.0.Final.zip to C:\Users\ervelden\eclipse\workspace-jbosstools-jee-oxygen\arquillian-getting_started\target with includes "" and excludes ""

/ er is dan, en daarmee doet de test het,
C:\Users\ervelden\eclipse\workspace-jbosstools-jee-oxygen\arquillian-getting_started\target\wildfly-10.1.0.Final

/ de volgende keren $ build test --profile wildfly-managed-from-repo	, we zien,

[INFO] Configured Artifact: org.wildfly:wildfly-dist:10.1.0.Final:zip
[INFO] wildfly-dist-10.1.0.Final.zip already unpacked.

/ er is dan, en daarmee doet de test het,
C:\Users\ervelden\eclipse\workspace-jbosstools-jee-oxygen\arquillian-getting_started\target\wildfly-10.1.0.Final

	
/ 13	. 

/ defaults in pom

/ 1313	. 

/ als in de pom wildfly-managed profile default="false", pakt hij hem toch als we hem expliciet geven,
[arquillian-getting_started]$ build test --profile wildfly-managed

	
/ 1313	. 

/ als er meerdere profiles default="true", dan pakt met $ build test  hij de laatste!
/ dit gaat dus anders als in arquillian.xml.

/ 13	. 

/ defaults in arquillian.xml

/ 1313	.

/ we geven de profile expiliciet op 	, overwrites daarmee welke default="true" is in de pom,
[arquillian-getting_started]$ build test --profile wildfly-managed
/ in arquillian.xml kijkt hij naar welke default="true", qualifier is niet van belang,
/ als er meerdere true zijn , of meerdere false , dan ERR,

$ vi arquillian.xml

	<container qualifier="wildfly-managed-from-repo" default="true">
		<configuration>
			<property name="jbossHome">target/wildfly-10.1.0.Final</property>
		</configuration>
	</container>	
	
	<container qualifier="wildfly-managed" default="false">
		<configuration>
			<property name="jbossHome">/Users/ervelden/bin/wildfly-10.1.0.Final</property>
		</configuration>
	</container>	
	
/ ze kunnen allebei op profile wildfly-managed,

/ 13. 

/ lees,
https://docs.jboss.org/author/display/WFLY10/Admin+Guide
http://localhost:9990/console/App.html#home

/ 13	. 

C:\Users\ervelden\bin\wildfly-10.1.0.Final>type standalone\configuration\application-users.properties
C:\Users\ervelden\bin\wildfly-10.1.0.Final>type standalone\configuration\mgmt-users.properties


/ 13	 .

/ chameleon remote

/ we probeerden	,

  <container default="true" qualifier="arquillian-wildfly-remote">
    <configuration>
      <property name="chameleonTarget">${chameleon.target}</property>
      <property name="managementPort">9990</property>
      <property name="managementAddress">127.0.0.1</property>
      <property name="username">admin</property>
      <property name="password">admin</property>
    </configuration>
  </container>
  java.lang.IllegalStateException: Could not setup chameleon container
        at java.net.URLClassLoader.findClass(URLClassLoader.java:381)
        at java.lang.ClassLoader.loadClass(ClassLoader.java:424)
        at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
        at org.arquillian.container.chameleon.controller.TargetController.<init>(TargetController.java:54)
        at org.arquillian.container.chameleon.ChameleonContainer.init(ChameleonContainer.java:85)
        at org.arquillian.container.chameleon.InitiateContainer.initiateChameleon(InitiateContainer.java:70)
        at org.arquillian.container.chameleon.InitiateContainer.setup(InitiateContainer.java:39)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.lang.reflect.Method.invoke(Method.java:498)
        at org.jboss.arquillian.core.impl.ObserverImpl.invoke(ObserverImpl.java:96)
        at org.jboss.arquillian.core.impl.EventContextImpl.proceed(EventContextImpl.java:92)
        at org.jboss.arquillian.core.impl.ManagerImpl.fire(ManagerImpl.java:143)
        at org.jboss.arquillian.core.impl.ManagerImpl.fire(ManagerImpl.java:114)
  
  <container default="true" qualifier="arquillian-wildfly-remote">
    <configuration>
      <property name="managementPort">9990</property>
      <property name="managementAddress">127.0.0.1</property>
      <property name="username">admin</property>
      <property name="password">admin</property>
    </configuration>
  </container>
 java.lang.RuntimeException: Could not configure Chameleon container arquillian-wildfly-remote
        at org.arquillian.container.chameleon.ChameleonConfiguration.validate(ChameleonConfiguration.java:48)
        at org.arquillian.container.chameleon.InitiateContainer.initiateChameleon(InitiateContainer.java:66)
        at org.arquillian.container.chameleon.InitiateContainer.setup(InitiateContainer.java:39)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.lang.reflect.Method.invoke(Method.java:498)
        at org.jboss.arquillian.core.impl.ObserverImpl.invoke(ObserverImpl.java:96)
        at org.jboss.arquillian.core.impl.EventContextImpl.proceed(EventContextImpl.java:92) 
		

C:\Users\ervelden\java>git clone https://github.com/arquillian/arquillian-container-chameleon.git
C:\Users\ervelden\java\arquillian-container-chameleon>

/ 13

/ SFSB SLSB EJB SPRING JEE

///////////////////////////////////////////
/ Lees, over stateless en stateful beans, 
/ (1)
https://stackoverflow.com/questions/2351220/stateless-and-stateful-enterprise-java-beans?rq=1
/ TODO stateful ejb in servlet of jsf managed bean is ERR	,
->
/ (2)
https://stackoverflow.com/questions/8887140/jsf-request-scoped-bean-keeps-recreating-new-stateful-session-beans-on-every-req

/ in (1) is @WebServlet de controller (en model), hij is @applicationscope , daarom gedrag in (1)
/ in (2) is er een controller,

/ in (2) is de @session scoped de controller en de model, een sfsb is extension van de model, heeft ook dezelfde scope als de @session scoped,

/ de scope van een sfsb is die van de client=jsf controller en die kan request of view of session scope zijn,
/ de scope van een slsb is de method in de controller die hem uses,
/ dus de scope van de sfsb of de scope van de method in een slsb bepaalt de lengte van de db tx !

/ 13	. 

/ Spring in action 4 (412)
/ Lindorff: @WebService is de endpoint, met @WebMethod s. In het boek inject de endpoint een service, maar bij Lindorff is de endpoint de service zelf,
WH omdat ze niet met JTA werken, alles is autocommit, 
/ @WebService is WH een @Controller, maar bij Lindorff is het ook de service (session bean)
/ Maar lees,
https://docs.oracle.com/javaee/6/tutorial/doc/bnayn.html
/ daar is de @WebServlet de controller, die de endpoint method calls?
/ TODO
/ Spring in Action 4 (431) @RestController is inderdaad de controller: een controllers writes de model, het model zien we hier niet, maar wat spittles() returns komt in het model,
/ Lindorff: onze @WebMethod s return results, die worden returns als XML SOAP messages, dus onze @WebMethod s zijn de controllers,
/ maar een @WebServlet is ook een controller
/ TODO 
/ maak zelf een @WebService en een @WebServlet, en kijk waar de @SessionScoped op kan,



/ 13	 

/ (2)
https://stackoverflow.com/questions/8887140/jsf-request-scoped-bean-keeps-recreating-new-stateful-session-beans-on-every-req
->
	https://stackoverflow.com/questions/18369356/when-is-it-necessary-or-convenient-to-use-spring-or-ejb3-or-all-of-them-together/18379228#18379228
Spring DI @Component = CDI @Named TODO
->
		https://stackoverflow.com/questions/30639785/jsf-controller-service-and-dao/
->
			https://github.com/javaeekickoff/java-ee-kickoff-app
->
		https://stackoverflow.com/questions/7295096/what-exactly-is-java-ee
"Spring" (standalone) competes EJB/JTA, Spring MVC competes JSF/JAX-RS, Spring DI/IoC/AOP competes CDI, Spring Security competes JAAS/JASPIC, etc.
/ 13	 .

http://arquillian.org/guides/getting_started_rinse_and_repeat/
@SessionScoped public class Basket

https://stackoverflow.com/questions/2351220/stateless-and-stateful-enterprise-java-beans?rq=1
@WebServlet(name = "ServletClient", urlPatterns = { "/ServletClient" }) public class ServletClient

/ google,
@webservlet scope
/ lees,
https://stackoverflow.com/questions/33247364/servlets-and-scopes-of-cdi-beans
/ injects 'n @SessionScoped bean in @WebServlet,
https://stackoverflow.com/questions/15520424/what-is-a-cdi-bean

/ 'n @WebServlet is ipv. JSF	, 
/ met JSF heb je een create.xhtml, en WH doet JSF zelf @WebServlet,
/ de controller is een @SessionScoped of @RequestScoped,



/ 13	 .

/ google
difference cdi ejb
/ lees,
https://stackoverflow.com/questions/4684112/how-do-cdi-and-ejb-compare-interact

/ google,
difference ejb jpa
/ lees,
https://stackoverflow.com/questions/5894530/what-is-difference-between-jpa-project-and-ejb-project-in-eclipse
/ bij Lindorff: JSF + JPA, er waren geen EJBs (transacties, JTA), alles was autocommit,

/ ejb=session beans,
/ jpa= entity beans,
/ jsf= managed beans = controllers

/ is ebj=jta?
/ TODO

/ google
arquillian soap ui
/ lees,
http://developers-club.com/posts/267301/

/ Einde SFSB SLSB EJB SPRING JEE

/ Einde ARQUILLIAN FIRST 2018-2-19

/ ARQUILLIAN SECOND 2018-2-22


/ 13	. 

/ arquillian-rinse_and_repeat

/ start wildfly, 

/ we hebben de profile wildfly-remote als default false, maar in forge zeggen we de profile explicit	, 
/ in arquillian heb je op een container ook default="true/false"	, maar misschien is dat alleen als hij geen qualifier heeft, 

$ vi pom.xml

 	<profile>
  		<id>wildfly-remote</id>
  		<activation>
  			<activeByDefault>false</activeByDefault>
  		</activation>
  		<dependencyManagement>
  			<dependencies>
  				<dependency>
  					<groupId>org.wildfly.arquillian</groupId>
  					<artifactId>wildfly-arquillian-container-remote</artifactId>
  					<version>2.1.0.Final</version>
  					<scope>test</scope>
  				</dependency>
  				<dependency>
  					<groupId>org.jboss.arquillian.protocol</groupId>
  					<artifactId>arquillian-protocol-servlet</artifactId>
  					<version>1.1.13.Final</version>  
  					<scope>test</scope>
  				</dependency>
  			</dependencies>
  		</dependencyManagement>
  		<dependencies>
			<dependency>
				<groupId>org.wildfly.arquillian</groupId>
				<artifactId>wildfly-arquillian-container-remote</artifactId>
			</dependency>
			<dependency>
				<groupId>org.jboss.arquillian.protocol</groupId>
				<artifactId>arquillian-protocol-servlet</artifactId>
			</dependency>
		</dependencies>
  	</profile>

[arquillian-rinse_and_repeat]$ build test --profile wildfly-remote

/ we zien in wildfly,

13:12:17,538 INFO  [org.jboss.as.repository] (management-handler-thread - 2) WFLYDR0001: Content added at location C:\Users\ervelden\bin\wildfly-10.1.0.Final\standalone\data\content\91\fa1098098b931028481e436f02dabb1d86cf0e\content
13:12:17,542 INFO  [org.jboss.as.server.deployment] (MSC service thread 1-1) WFLYSRV0027: Starting deployment of "test.war" (runtime-name: "test.war")
13:12:17,720 INFO  [org.jboss.weld.deployer] (MSC service thread 1-7) WFLYWELD0003: Processing weld deployment test.war
13:12:17,732 INFO  [org.jboss.as.ejb3.deployment] (MSC service thread 1-7) WFLYEJB0473: JNDI bindings for session bean named 'OrderServiceImpl' in deployment unit 'deployment "test.war"' are as follows:

        java:global/test/OrderServiceImpl!my.OrderService
        java:app/test/OrderServiceImpl!my.OrderService
        java:module/OrderServiceImpl!my.OrderService
        java:global/test/OrderServiceImpl
        java:app/test/OrderServiceImpl
        java:module/OrderServiceImpl

13:12:17,961 INFO  [org.wildfly.extension.undertow] (ServerService Thread Pool -- 74) WFLYUT0021: Registered web context: /test
13:12:18,007 INFO  [org.jboss.as.server] (management-handler-thread - 2) WFLYSRV0010: Deployed "test.war" (runtime-name : "test.war")
13:12:18,401 INFO  [org.wildfly.extension.undertow] (ServerService Thread Pool -- 74) WFLYUT0022: Unregistered web context: /test
13:12:18,469 INFO  [org.jboss.as.server.deployment] (MSC service thread 1-7) WFLYSRV0028: Stopped deployment test.war (runtime-name: test.war) in 73ms
13:12:18,506 WARN  [org.jboss.as.controller] (management-handler-thread - 3) WFLYCTL0357: Notification of type deployment-undeployed is not described for the resource at the address []
13:12:18,512 INFO  [org.jboss.as.repository] (management-handler-thread - 3) WFLYDR0002: Content removed from location C:\Users\ervelden\bin\wildfly-10.1.0.Final\standalone\data\content\91\fa1098098b931028481e436f02dabb1d86cf0e\content
13:12:18,513 INFO  [org.jboss.as.server] (management-handler-thread - 3) WFLYSRV0009: Undeployed "test.war" (runtime-name: "test.war")



/ Einde ARQUILLIAN SECOND 2018-2-22

/ ARQUILLIAN THIRD 2018-2-21

/ 13	. 

C:\Users\ervelden\eclipse\workspace-jbosstools-jee-oxygen>forge

[workspace-jbosstools-jee-oxygen]$ addon-install-from-git --url https://github.com/forge/wildfly-swarm-addon.git
/ al,
/ niet nodig, want we gaan niet wildfly-swarm use, alleen wildfly-managed, en wildfly-remote,

[workspace-jbosstools-jee-oxygen]$ project-new  --named arquillian-forge3 --type jar --stack JAVA_EE_7
/ in de pom alleen javax:javaee-api:7.0:provided

$ vi pom.xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>org.arquillian.forge3</groupId>
  <artifactId>arquillian-forge3</artifactId>
  <version>1.0.0-SNAPSHOT</version>
  <build>
    <finalName>arquillian-forge3</finalName>
  </build>
  <dependencies>
    <dependency>
      <groupId>javax</groupId>
      <artifactId>javaee-api</artifactId>
      <scope>provided</scope>
    </dependency>
  </dependencies>
  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>javax</groupId>
        <artifactId>javaee-api</artifactId>
        <version>7.0</version>
        <scope>provided</scope>
      </dependency>
    </dependencies>
  </dependencyManagement>
  <properties>
    <maven.compiler.source>1.8</maven.compiler.source>
    <maven.compiler.target>1.8</maven.compiler.target>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
  </properties>
</project>

/ 13	. 

[arquillian-forge3]$ cdi-new-bean --named MyService --target-package services --scoped SESSION

/ 13	. 

[MyService.java]$ cd ~~
[arquillian-forge3]$ arquillian-setup --
--arquillian-version  --standalone  --test-framework
[arquillian-forge3]$ arquillian-setup --test-framework junit --
--arquillian-version  --container-adapter  --standalone  --test-framework-version
/ we zien dat er een optie is bijgekomen	,

[arquillian-forge3]$ arquillian-setup --test-framework junit --container-adapter
droidium-container-depchain  jboss-eap-domain-managed-7   openshift-express            tomcat-remote                wildfly-domain-managed
glassfish-embedded           jboss-eap-domain-remote-7    openwebbeans-embedded-1      tomee-embedded               wildfly-domain-remote
glassfish-managed            jboss-eap-embedded-7         payara-embedded              tomee-remote                 wildfly-embedded
glassfish-remote             jboss-eap-managed-7          payara-managed               was-embedded-8               wildfly-managed
jboss-as-domain-managed-7    jboss-eap-remote-7           payara-remote                was-remote-7                 wildfly-remote
jboss-as-domain-remote-7     jetty-embedded-6.1           tomcat-embedded-6            was-remote-8                 wls-remote-10.3
jboss-as-embedded-7          jetty-embedded-7             tomcat-embedded-7            weld-ee-embedded-1.1
jboss-as-managed-7           openejb-embedded-3.1         tomcat-managed               weld-se-embedded-1
jboss-as-remote-7            openejb-embedded-4           tomcat-managed-5.5           weld-se-embedded-1.1
[arquillian-forge3]$ arquillian-setup --test-framework junit --container-adapter wildfly-managed

/ nu komt org.arquillian:arquillian.universe:1.1.13.0:pom:import erbij	, 
/ en is er een arquillian.xml	, 
/ met deze arquillian kunnen we al tests exec, 
/ in de pom zien we 1 profiles, 

$ vi pom.xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>org.arquillian.forge3</groupId>
  <artifactId>arquillian-forge3</artifactId>
  <version>1.0.0-SNAPSHOT</version>
  <build>
    <finalName>arquillian-forge3</finalName>
  </build>
  <dependencies>
    <dependency>
      <groupId>javax</groupId>
      <artifactId>javaee-api</artifactId>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>org.arquillian.universe</groupId>
      <artifactId>arquillian-junit</artifactId>
      <type>pom</type>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>${version.junit}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.arquillian.universe</groupId>
      <artifactId>arquillian-chameleon</artifactId>
      <type>pom</type>
      <scope>test</scope>
    </dependency>
  </dependencies>
  <profiles>
    <profile>
      <id>arquillian-wildfly-managed</id>
      <activation>
        <activeByDefault>true</activeByDefault>
      </activation>
      <build>
        <plugins>
          <plugin>
            <artifactId>maven-surefire-plugin</artifactId>
            <version>2.14.1</version>
            <configuration>
              <systemPropertyVariables>
                <arquillian.launch>arquillian-wildfly-managed</arquillian.launch>
                <chameleon.target>wildfly:10.1.0.Final:MANAGED</chameleon.target>
              </systemPropertyVariables>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>
  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>javax</groupId>
        <artifactId>javaee-api</artifactId>
        <version>7.0</version>
        <scope>provided</scope>
      </dependency>
      <dependency>
        <groupId>org.arquillian</groupId>
        <artifactId>arquillian-universe</artifactId>
        <version>${version.arquillian_universe}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
    </dependencies>
  </dependencyManagement>
  <properties>
    <maven.compiler.source>1.8</maven.compiler.source>
    <maven.compiler.target>1.8</maven.compiler.target>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <version.arquillian_universe>1.1.13.0</version.arquillian_universe>
    <version.junit>4.12</version.junit>
  </properties>
</project>

$ vi arquillian.xml

<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<arquillian xmlns="http://jboss.org/schema/arquillian" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://jboss.org/schema/arquillian http://jboss.org/schema/arquillian/arquillian_1_0.xsd">
  <container default="true" qualifier="arquillian-wildfly-managed">
    <configuration>
      <property name="chameleonTarget">${chameleon.target}</property>
    </configuration>
  </container>
</arquillian>

/ 13	. 

[arquillian-forge3]$ arquillian-create-test --targets services.MyService
/ je kunt tab achter --targets, hij vindt services.MyService

/ 13	. 

[MyServiceTest.java]$ build test
...
Arquillian Chameleon: downloading distribution org.wildfly:wildfly-dist:zip:10.1.0.Final
......
feb 21, 2018 9:59:52 PM org.jboss.as.arquillian.container.managed.ManagedDeployableContainer startInternal
WARNING: Bundles path is deprecated and no longer used.
feb 21, 2018 9:59:52 PM org.jboss.as.arquillian.container.managed.ManagedDeployableContainer startInternal
INFO: Starting container with: ["C:\Program Files\Java\jdk1.8.0_144\bin\java", -D[Standalone], -Xms64m, -Xmx512m, -Djava.net.preferIPv4Stack=true, -Djava.awt.headless=true, -Djboss.modules.system.pkgs=org.jboss.byteman, -ea, -Djboss.home.dir=C:\Users\ervelden\eclipse\workspace-jbosstools-jee-oxygen\arquillian-forge3\target\server\wildfly-dist_10.1.0.Final\wildfly-10.1.0.Final, -Dorg.jboss.boot.log.file=C:\Users\ervelden\eclipse\workspace-jbosstools-jee-oxygen\arquillian-forge3\target\server\wildfly-dist_10.1.0.Final\wildfly-10.1.0.Final\standalone\log\server.log, -Dlogging.configuration=file:C:\Users\ervelden\eclipse\workspace-jbosstools-jee-oxygen\arquillian-forge3\target\server\wildfly-dist_10.1.0.Final\wildfly-10.1.0.Final\standalone\configuration\logging.properties, -jar, C:\Users\ervelden\eclipse\workspace-jbosstools-jee-oxygen\arquillian-forge3\target\server\wildfly-dist_10.1.0.Final\wildfly-10.1.0.Final\jboss-modules.jar, -mp, C:\Users\ervelden\eclipse\workspace-jbosstools-jee-oxygen\arquillian-forge3\target\server\wildfly-dist_10.1.0.Final\wildfly-10.1.0.Final\modules, org.jboss.as.standalone, -Djboss.home.dir=C:\Users\ervelden\eclipse\workspace-jbosstools-jee-oxygen\arquillian-forge3\target\server\wildfly-dist_10.1.0.Final\wildfly-10.1.0.Final, -Djboss.server.base.dir=C:\Users\ervelden\eclipse\workspace-jbosstools-jee-oxygen\arquillian-forge3\target\server\wildfly-dist_10.1.0.Final\wildfly-10.1.0.Final\standalone, -Djboss.server.log.dir=C:\Users\ervelden\eclipse\workspace-jbosstools-jee-oxygen\arquillian-forge3\target\server\wildfly-dist_10.1.0.Final\wildfly-10.1.0.Final\standalone\log, -Djboss.server.config.dir=C:\Users\ervelden\eclipse\workspace-jbosstools-jee-oxygen\arquillian-forge3\target\server\wildfly-dist_10.1.0.Final\wildfly-10.1.0.Final\standalone\configuration]
...
/ OK

/ Hoe gaat dat zo snel? Vindt hij wildfly zip in D:\Users\ervelden\Downloads?
/ TODO

/ 13	. 

[arquillian-forge3]$ arquillian-container-configuration --container arquillian-wildfly-managed --container-option jbossHome --container-value C:\Users\ervelden\bin\wildfly-10.1.0.Final

$ vi arquillian.xml

<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<arquillian xmlns="http://jboss.org/schema/arquillian" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://jboss.org/schema/arquillian http://jboss.org/schema/arquillian/arquillian_1_0.xsd">
  <container default="true" qualifier="arquillian-wildfly-managed">
    <configuration>
      <property name="chameleonTarget">${chameleon.target}</property>
      <property name="jbossHome">C:\Users\ervelden\bin\wildfly-10.1.0.Final</property>
    </configuration>
  </container>
</arquillian>


$ build test
/ start C:\Users\ervelden\bin\wildfly-10.1.0.Final
/ OK

/ 7	. 

[arquillian-forge3]$ arquillian-container-setup --container-adapter  wildfly-remote --container-adapter-version 10.1.0.Final
/ See ARQUILLIAN CHAMELEON REMOTE SAMENVATTING

/ in de pom zien we 2 profiles, 

$ vi pom.xml

<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>org.arquillian.forge3</groupId>
  <artifactId>arquillian-forge3</artifactId>
  <version>1.0.0-SNAPSHOT</version>
  <build>
    <finalName>arquillian-forge3</finalName>
  </build>
  <dependencies>
    <dependency>
      <groupId>javax</groupId>
      <artifactId>javaee-api</artifactId>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>org.arquillian.universe</groupId>
      <artifactId>arquillian-junit</artifactId>
      <type>pom</type>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>${version.junit}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.arquillian.universe</groupId>
      <artifactId>arquillian-chameleon</artifactId>
      <type>pom</type>
      <scope>test</scope>
    </dependency>
  </dependencies>
  <profiles>
    <profile>
      <id>arquillian-wildfly-managed</id>
      <activation>
        <activeByDefault>true</activeByDefault>
      </activation>
      <build>
        <plugins>
          <plugin>
            <artifactId>maven-surefire-plugin</artifactId>
            <version>2.14.1</version>
            <configuration>
              <systemPropertyVariables>
                <arquillian.launch>arquillian-wildfly-managed</arquillian.launch>
                <chameleon.target>wildfly:10.1.0.Final:MANAGED</chameleon.target>
              </systemPropertyVariables>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>
    <profile>
      <id>arquillian-wildfly-remote</id>
      <build>
        <plugins>
          <plugin>
            <artifactId>maven-surefire-plugin</artifactId>
            <version>2.14.1</version>
            <configuration>
              <systemPropertyVariables>
                <arquillian.launch>arquillian-wildfly-remote</arquillian.launch>
                <chameleon.target>wildfly:10.1.0.Final:REMOTE</chameleon.target>
              </systemPropertyVariables>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>
  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>javax</groupId>
        <artifactId>javaee-api</artifactId>
        <version>7.0</version>
        <scope>provided</scope>
      </dependency>
      <dependency>
        <groupId>org.arquillian</groupId>
        <artifactId>arquillian-universe</artifactId>
        <version>${version.arquillian_universe}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
    </dependencies>
  </dependencyManagement>
  <properties>
    <maven.compiler.source>1.8</maven.compiler.source>
    <maven.compiler.target>1.8</maven.compiler.target>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <version.arquillian_universe>1.1.13.0</version.arquillian_universe>
    <version.junit>4.12</version.junit>
  </properties>
</project>

/ we maken de default profile default,

  <profiles>
    <profile>
      <id>arquillian-wildfly-managed</id>
      <activation>
        <activeByDefault>false</activeByDefault>
      </activation>
      <build>
        <plugins>
          <plugin>
            <artifactId>maven-surefire-plugin</artifactId>
            <version>2.14.1</version>
            <configuration>
              <systemPropertyVariables>
                <arquillian.launch>arquillian-wildfly-managed</arquillian.launch>
                <chameleon.target>wildfly:10.1.0.Final:MANAGED</chameleon.target>
              </systemPropertyVariables>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>
    <profile>
      <id>arquillian-wildfly-remote</id>
      <activation>
        <activeByDefault>true</activeByDefault>
      </activation>
      <build>
        <plugins>
          <plugin>
            <artifactId>maven-surefire-plugin</artifactId>
            <version>2.14.1</version>
            <configuration>
              <systemPropertyVariables>
                <arquillian.launch>arquillian-wildfly-remote</arquillian.launch>
                <chameleon.target>wildfly:10.1.0.Final:REMOTE</chameleon.target>
              </systemPropertyVariables>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>
  
$ vi arquillian.xml

<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<arquillian xmlns="http://jboss.org/schema/arquillian" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://jboss.org/schema/arquillian http://jboss.org/schema/arquillian/arquillian_1_0.xsd">
  <container default="true" qualifier="arquillian-wildfly-managed">
    <configuration>
      <property name="chameleonTarget">${chameleon.target}</property>
      <property name="jbossHome">C:\Users\ervelden\bin\wildfly-10.1.0.Final</property>
    </configuration>
  </container>
  <container qualifier="arquillian-wildfly-remote">
    <configuration>
      <property name="chameleonTarget">${chameleon.target}</property>
    </configuration>
  </container>
</arquillian>
  
/ we maken de remote default ,

<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<arquillian xmlns="http://jboss.org/schema/arquillian" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://jboss.org/schema/arquillian http://jboss.org/schema/arquillian/arquillian_1_0.xsd">
  <container default="false" qualifier="arquillian-wildfly-managed">
    <configuration>
      <property name="chameleonTarget">${chameleon.target}</property>
      <property name="jbossHome">C:\Users\ervelden\bin\wildfly-10.1.0.Final</property>
    </configuration>
  </container>
  <container qualifier="arquillian-wildfly-remote" default="true">
    <configuration>
      <property name="chameleonTarget">${chameleon.target}</property>
    </configuration>
  </container>
</arquillian>

    

/ 7	. 

/ google,
arquillian chameleon target
/ lees,
https://github.com/arquillian/arquillian-container-chameleon
https://serviceorientedarchitect.com/how-to-test-jboss-eap-7-with-arquillian/

$ vi arquillian.xml

  <container default="false" qualifier="arquillian-wildfly-managed">
    <configuration>
      <property name="chameleonTarget">wildfly:10.1.0.Final:managed</property>
      <property name="jbossHome">C:\Users\ervelden\bin\wildfly-10.1.0.Final</property>
    </configuration>
  </container>
/ OK

/ 7	.

[arquillian-forge3]$ jpa-setup --jpa-provider Hibernate 4.x
/ we zien 
$ vi src/main/resources/persistence.xml

<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<persistence xmlns="http://xmlns.jcp.org/xml/ns/persistence" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="2.1" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd">

  <persistence-unit name="arquillian-forge3-persistence-unit" transaction-type="JTA">
    <description>Forge Persistence Unit</description>
    <provider>org.hibernate.ejb.HibernatePersistence</provider>
    <jta-data-source>java:jboss/datasources/ExampleDS</jta-data-source>
    <exclude-unlisted-classes>false</exclude-unlisted-classes>
    <properties>
      <property name="hibernate.hbm2ddl.auto" value="create-drop"/>
      <property name="hibernate.show_sql" value="true"/>
      <property name="hibernate.format_sql" value="true"/>
      <property name="hibernate.transaction.flush_before_completion" value="true"/>
      <property name="hibernate.dialect" value="org.hibernate.dialect.H2Dialect"/>
    </properties>
  </persistence-unit>
</persistence>

/ Hibernate 4.x of Hibernate geeft geen verschil,

[arquillian-forge3]$ jpa-setup --jpa-provider Hibernate
$ vi src/main/resources/persistence.xml

<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<persistence xmlns="http://xmlns.jcp.org/xml/ns/persistence" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="2.1" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd">
<persistence-unit name="arquillian-forge3-persistence-unit" transaction-type="JTA">
  <description>Forge Persistence Unit</description>
    <provider>org.hibernate.ejb.HibernatePersistence</provider>
    <jta-data-source>java:jboss/datasources/ExampleDS</jta-data-source>
    <exclude-unlisted-classes>false</exclude-unlisted-classes>
    <properties>
    <property name="hibernate.hbm2ddl.auto" value="create-drop"/>
      <property name="hibernate.show_sql" value="true"/>
      <property name="hibernate.format_sql" value="true"/>
      <property name="hibernate.transaction.flush_before_completion" value="true"/>
      <property name="hibernate.dialect" value="org.hibernate.dialect.H2Dialect"/>
    </properties>
  </persistence-unit>
  <persistence-unit name="arquillian-forge3-persistence-unit-1" transaction-type="JTA">
    <description>Forge Persistence Unit</description>
    <provider>org.hibernate.ejb.HibernatePersistence</provider>
    <jta-data-source>java:jboss/datasources/ExampleDS</jta-data-source>
    <exclude-unlisted-classes>false</exclude-unlisted-classes>
    <properties>
      <property name="hibernate.hbm2ddl.auto" value="create-drop"/>
      <property name="hibernate.show_sql" value="true"/>
      <property name="hibernate.format_sql" value="true"/>
      <property name="hibernate.transaction.flush_before_completion" value="true"/>
      <property name="hibernate.dialect" value="org.hibernate.dialect.H2Dialect"/>
    </properties>
  </persistence-unit>
</persistence>

[arquillian-forge3]$ jpa-setup --jpa-provider Java\ EE
$ vi src/main/resources/persistence.xml

<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<persistence xmlns="http://xmlns.jcp.org/xml/ns/persistence" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="2.1" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd">
<persistence-unit name="arquillian-forge3-persistence-unit" transaction-type="JTA">
  <description>Forge Persistence Unit</description>
    <provider>org.hibernate.ejb.HibernatePersistence</provider>
    <jta-data-source>java:jboss/datasources/ExampleDS</jta-data-source>
    <exclude-unlisted-classes>false</exclude-unlisted-classes>
    <properties>
    <property name="hibernate.hbm2ddl.auto" value="create-drop"/>
      <property name="hibernate.show_sql" value="true"/>
      <property name="hibernate.format_sql" value="true"/>
      <property name="hibernate.transaction.flush_before_completion" value="true"/>
      <property name="hibernate.dialect" value="org.hibernate.dialect.H2Dialect"/>
    </properties>
  </persistence-unit>
  <persistence-unit name="arquillian-forge3-persistence-unit-1" transaction-type="JTA">
  <description>Forge Persistence Unit</description>
    <provider>org.hibernate.ejb.HibernatePersistence</provider>
    <jta-data-source>java:jboss/datasources/ExampleDS</jta-data-source>
    <exclude-unlisted-classes>false</exclude-unlisted-classes>
    <properties>
    <property name="hibernate.hbm2ddl.auto" value="create-drop"/>
      <property name="hibernate.show_sql" value="true"/>
      <property name="hibernate.format_sql" value="true"/>
      <property name="hibernate.transaction.flush_before_completion" value="true"/>
      <property name="hibernate.dialect" value="org.hibernate.dialect.H2Dialect"/>
    </properties>
  </persistence-unit>
  <persistence-unit name="arquillian-forge3-persistence-unit-2" transaction-type="JTA">
    <description>Forge Persistence Unit</description>
    <jta-data-source>java:jboss/datasources/ExampleDS</jta-data-source>
    <exclude-unlisted-classes>false</exclude-unlisted-classes>
    <properties>
      <property name="javax.persistence.schema-generation.database.action" value="drop-and-create"/>
      <property name="javax.persistence.schema-generation.scripts.action" value="drop-and-create"/>
      <property name="javax.persistence.schema-generation.scripts.create-target" value="arquillian-forge3Create.ddl"/>
      <property name="javax.persistence.schema-generation.scripts.drop-target" value="arquillian-forge3Drop.ddl"/>
    </properties>
  </persistence-unit>
</persistence>
/ TODO
/ we rm 
arquillian-forge3-persistence-unit-1
arquillian-forge3-persistence-unit-2

[LanguageDao.java]$ jpa-setup --jpa-provider Hibernate --data-source-name RemoteExampleDS
/ maar we moeten de jndi name geven,
[LanguageDao.java]$ jpa-setup --jpa-provider Hibernate --data-source-name java:jboss/datasources/RemoteExampleDS --persistence-unit-name arquillian-forge3-persistence-unit-3 --overwrite-persistence-unit
[LanguageDao.java]$ jpa-setup --jpa-provider Hibernate --data-source-name java:jboss/datasources/PostgreSQLDS

[persistence.xml]$ jpa-new-entity --named Language --target-package domain

$ vi domain/Language.java

package domain;

import javax.persistence.Entity;
import java.io.Serializable;
import javax.persistence.Id;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Column;
import javax.persistence.Version;

@Entity
public class Language implements Serializable {

	private static final long serialVersionUID = 1L;
	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	@Column(name = "id", updatable = false, nullable = false)
	private Long id;
	@Version
	@Column(name = "version")
	private int version;

	public Long getId() {
		return this.id;
	}

	public void setId(final Long id) {
		this.id = id;
	}

	public int getVersion() {
		return this.version;
	}

	public void setVersion(final int version) {
		this.version = version;
	}

	@Override
	public String toString() {
		String result = getClass().getSimpleName() + " ";
		if (id != null)
			result += "id: " + id;
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}
		if (!(obj instanceof Language)) {
			return false;
		}
		Language other = (Language) obj;
		if (id != null) {
			if (!id.equals(other.id)) {
				return false;
			}
		}
		return true;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((id == null) ? 0 : id.hashCode());
		return result;
	}
}

[Language.java]$ jpa-new-field --named name		// default --type String
***SUCCESS*** Field name created

[Language.java]$ jpa-new-field --named name --type
String           byte             domain.Language  float            java.util.Date   short
boolean          char             double           int              long
/ primitive types
/ TODO


/ erbij in Language.java

package domain;

import javax.persistence.Entity;
import java.io.Serializable;
import javax.persistence.Id;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Column;
import javax.persistence.Version;

@Entity
public class Language implements Serializable {

	private static final long serialVersionUID = 1L;
	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	@Column(name = "id", updatable = false, nullable = false)
	private Long id;
	@Version
	@Column(name = "version")
	private int version;

	@Column
	private String name;				// 	<-

	public Long getId() {
		return this.id;
	}

	public void setId(final Long id) {
		this.id = id;
	}

	public int getVersion() {
		return this.version;
	}

	public void setVersion(final int version) {
		this.version = version;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}
		if (!(obj instanceof Language)) {
			return false;
		}
		Language other = (Language) obj;
		if (id != null) {
			if (!id.equals(other.id)) {
				return false;
			}
		}
		return true;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((id == null) ? 0 : id.hashCode());
		return result;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@Override
	public String toString() {													// <-
		String result = getClass().getSimpleName() + " ";
		if (name != null && !name.trim().isEmpty())
			result += "name: " + name;
		return result;
	}
}

/ 13	. 

/ google
jpa native query
/ lees,
https://www.thoughts-on-java.org/jpa-native-queries/
https://www.thoughts-on-java.org/thanks/
https://docs.jboss.org/hibernate/orm/5.1/userguide/html_single/chapters/query-native/Native.html
/ lees,
http://hibernate.org/orm/documentation/5.2/
->
http://docs.jboss.org/hibernate/orm/5.2/userguide/html_single/Hibernate_User_Guide.html
/ we zien in menu links 'Native queries'

/ 13	. 

[LanguageDao.java]$ jpa-generate-daos-from-entities --targets domain.Language --persistence-unit arquillian-forge3-persistence-unit --package-name repository --generator JPA_ENTITY
/ is --generator JPA_ENTITY  nodig?
/ TODO

$ vi LanguageDao.java

package repository;

import java.util.List;

import javax.ejb.Stateless;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.TypedQuery;
import domain.Language;

/**
 * DAO for Language
 */
@Stateless
public class LanguageDao {
	@PersistenceContext(unitName = "arquillian-forge3-persistence-unit")
	private EntityManager em;

	public void create(Language entity) {
		em.persist(entity);
	}

	public void deleteById(Long id) {
		Language entity = em.find(Language.class, id);
		if (entity != null) {
			em.remove(entity);
		}
	}

	public Language findById(Long id) {
		return em.find(Language.class, id);
	}

	public Language update(Language entity) {
		return em.merge(entity);
	}

	public List<Language> listAll(Integer startPosition, Integer maxResult) {
		TypedQuery<Language> findAllQuery = em.createQuery(
				"SELECT DISTINCT l FROM Language l ORDER BY l.id",
				Language.class);
		if (startPosition != null) {
			findAllQuery.setFirstResult(startPosition);
		}
		if (maxResult != null) {
			findAllQuery.setMaxResults(maxResult);
		}
		return findAllQuery.getResultList();
	}
}

/ we passen aan,

@Singleton
@Startup
public class LanguageDao {
	
	@PersistenceContext(unitName = "arquillian-forge3-persistence-unit-3")
	private EntityManager em;
	
	@PostConstruct
	private void insertTestData() {
		Language language=new Language();
		language.setName("Java");
		em.persist(language);
		language=new Language();
		language.setName("C");
		em.persist(language);
		language=new Language();
		language.setName("Go");
		em.persist(language);
	}
	
	public void listLanguages() {
		em.createQuery(
			"select l"
			+ "from language l"
			
				
				).getResultList();
		
	}
}

/ 13	. 

C:\Users\ervelden\java\arquillian-container-chameleon>type arquillian-chameleon-container-model\src\main\resources\chameleon\def
ault\containers.yaml

C:\Users\ervelden\.m2\repository\org\wildfly\arquillian\wildfly-arquillian-container-remote\2.1.0.Final\wildfly-arquillian-container-remote-2.1.0.Final.pom

/ 13	. 








/ Einde ARQUILLIAN THIRD 2018-2-21

/ ARQUILLIAN CHAMELEON DEBUG

/ 13	. 

/ project arquillian-forge3
/ profile arquillian-wildfly-remote is ERR,

$ vi arquillian.xml
<arquillian xmlns="http://jboss.org/schema/arquillian" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://jboss.org/schema/arquillian http://jboss.org/schema/arquillian/arquillian_1_0.xsd">
  
  <container default="false" qualifier="arquillian-wildfly-remote">
    <configuration>
      <property name="chameleonTarget">${chameleon.target}</property>
    </configuration>
  </container>
  <defaultProtocol type="Servlet 3.0"/>
</arquillian>


[arquillian-forge3]$ build test --profile arquillian-wildlfy-remote
...
Tests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 0.374 sec <<< FAILURE!
services.MyServiceTest  Time elapsed: 0.374 sec  <<< ERROR!
java.lang.IllegalStateException: Could not setup chameleon container
        at java.net.URLClassLoader.findClass(URLClassLoader.java:381)
        at java.lang.ClassLoader.loadClass(ClassLoader.java:424)
        at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
        at org.arquillian.container.chameleon.controller.TargetController.<init>(TargetController.java:54)
        at org.arquillian.container.chameleon.ChameleonContainer.init(ChameleonContainer.java:85)
        at org.arquillian.container.chameleon.InitiateContainer.initiateChameleon(InitiateContainer.java:70)
        at org.arquillian.container.chameleon.InitiateContainer.setup(InitiateContainer.java:39)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.lang.reflect.Method.invoke(Method.java:498)
        at org.jboss.arquillian.core.impl.ObserverImpl.invoke(ObserverImpl.java:96)
        at org.jboss.arquillian.core.impl.EventContextImpl.proceed(EventContextImpl.java:92)
        at org.jboss.arquillian.core.impl.ManagerImpl.fire(ManagerImpl.java:143)
        at org.jboss.arquillian.core.impl.ManagerImpl.fire(ManagerImpl.java:114)
        at org.jboss.arquillian.core.impl.EventImpl.fire(EventImpl.java:67)
        at org.jboss.arquillian.container.impl.client.container.ContainerLifecycleController$1.perform(ContainerLifecycleController.java:62)
        at org.jboss.arquillian.container.impl.client.container.ContainerLifecycleController$1.perform(ContainerLifecycleController.java:55)
        at org.jboss.arquillian.container.impl.client.container.ContainerLifecycleController.forEachContainer(ContainerLifecycleController.java:209)
        at org.jboss.arquillian.container.impl.client.container.ContainerLifecycleController.setupContainers(ContainerLifecycleController.java:54)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.lang.reflect.Method.invoke(Method.java:498)
        at org.jboss.arquillian.core.impl.ObserverImpl.invoke(ObserverImpl.java:96)
        at org.jboss.arquillian.core.impl.EventContextImpl.invokeObservers(EventContextImpl.java:103)
        at org.jboss.arquillian.core.impl.EventContextImpl.proceed(EventContextImpl.java:85)
        at org.jboss.arquillian.core.impl.ManagerImpl.fire(ManagerImpl.java:143)
        at org.jboss.arquillian.core.impl.ManagerImpl.fire(ManagerImpl.java:114)
        at org.jboss.arquillian.core.impl.EventImpl.fire(EventImpl.java:67)
        at org.jboss.arquillian.container.test.impl.client.ContainerEventController.execute(ContainerEventController.java:85)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.lang.reflect.Method.invoke(Method.java:498)
        at org.jboss.arquillian.core.impl.ObserverImpl.invoke(ObserverImpl.java:96)
        at org.jboss.arquillian.core.impl.EventContextImpl.invokeObservers(EventContextImpl.java:103)
        at org.jboss.arquillian.core.impl.EventContextImpl.proceed(EventContextImpl.java:85)
        at org.jboss.arquillian.test.impl.TestContextHandler.createSuiteContext(TestContextHandler.java:73)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.lang.reflect.Method.invoke(Method.java:498)
        at org.jboss.arquillian.core.impl.ObserverImpl.invoke(ObserverImpl.java:96)
        at org.jboss.arquillian.core.impl.EventContextImpl.proceed(EventContextImpl.java:92)
        at org.jboss.arquillian.core.impl.ManagerImpl.fire(ManagerImpl.java:143)
        at org.jboss.arquillian.core.impl.ManagerImpl.fire(ManagerImpl.java:114)
        at org.jboss.arquillian.test.impl.EventTestRunnerAdaptor.beforeSuite(EventTestRunnerAdaptor.java:75)
        at org.jboss.arquillian.junit.Arquillian.run(Arquillian.java:116)
        at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264)
        at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153)
        at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.lang.reflect.Method.invoke(Method.java:498)
        at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray2(ReflectionUtils.java:208)
        at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:159)
        at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:87)
        at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153)
        at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:95)

/ 13	. 

/ we gaan debug arquillian-wildfly-managed, die gaat OK	,

/ we hebben run config arquillian-forge3-clean-test
/ we hebben debug config MyServiceTest-remote

/ de run config arquillian-forge3-clean-test heeft verder geen config, alleen targets: clean test
/ alle config zit in de arquillian.xml

<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<arquillian xmlns="http://jboss.org/schema/arquillian" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://jboss.org/schema/arquillian http://jboss.org/schema/arquillian/arquillian_1_0.xsd">
  <container default="true" qualifier="arquillian-wildfly-managed">
    <configuration>
      <property name="chameleonTarget">${chameleon.target}</property>
      <property name="jbossHome">C:\Users\ervelden\bin\wildfly-10.1.0.Final</property>
      <property name="javaVmArguments">-Xrunjdwp:transport=dt_socket,address=8787,server=y,suspend=y</property>
    </configuration>
  </container>
  <defaultProtocol type="Servlet 3.0"/>
</arquillian>

/ 1313	. 

/ run config arquillian-forge3-clean-test
/ we zien, 
Listening for transport dt_socket at address: 8787
/ debug config MyServiceTest-remote	,

/ we set b's in 
InitiateContainer [line: 37] - setup(EventContext<SetupContainer>)	
InitiateContainer [line: 49] - initiateChameleon(SetupContainer)	
ChameleonConfiguration [line: 47] - validate()	
ChameleonConfiguration [line: 70] - setChameleonTarget(String)	
ChameleonContainer [line: 76] - init(ChameleonConfiguration, ContainerDef)	
ChameleonContainer [line: 107] - setup(ContainerConfiguration)	
/ maar deze b's zijn niet voor 8787	, 
/ dat is wel,
MyServiceTest [line: 33] - should_be_deployed()	

/ als we doen,
[arquillian-forge3]$ arquillian-container-configuration --container arquillian-wildfly-remote --container-option managementPort --container-value 9990
/ loopt door,	 zegt NIET:
Listening for transport dt_socket at address: 8787
/ TODO


/ 1313	. 

/ we kunnen ook ipv run config arquillian-forge3-clean-test, in forge:
[arquillian-forge3]$ build test --profile arquillian-wildfly-managed
/ we zien dat hij hangt, 
/ dit komt door de regel in arquillian.xml:  <property name="javaVmArguments">-Xrunjdwp:transport=dt_socket,address=8787,server=y,suspend=y</property>
/ doe dan debug config MyServiceTest-remote	, dan loopt hij weer door,  en valt hij in MyServiceTest [line: 33] - should_be_deployed()	

/ 1313	. 

/ Lees,
https://forge.jboss.org/1.x/docs/using/debugging-forge.html

/ 1313	. 

/ we zagen in de src van ChameleonConfiguration over containers.yaml	,
/ in eclipse kunnen we hem niet vinden	,
/ TODO
/ maar in file systeem wel
C:\Users\ervelden\java\arquillian-container-chameleon>type arquillian-chameleon-container-model\src\main\resources\chameleon\def
ault\containers.yaml

- name: WildFly
  versionExpression: [10.*|11.*]
  adapters:
    - type: remote
      coordinates: org.wildfly.arquillian:wildfly-arquillian-container-remote:2.1.0.Final
      adapterClass: org.jboss.as.arquillian.container.remote.RemoteDeployableContainer
    - type: managed
      coordinates: org.wildfly.arquillian:wildfly-arquillian-container-managed:2.1.0.Final
      adapterClass: org.jboss.as.arquillian.container.managed.ManagedDeployableContainer
      configuration: *WF_CONFIG
    - type: embedded
      coordinates: org.wildfly.arquillian:wildfly-arquillian-container-embedded:2.1.0.Final
      adapterClass: org.jboss.as.arquillian.container.embedded.EmbeddedDeployableContainer
      configuration: *WF_EMBEDD_CONFIG
  defaultType: managed
  dist: *WF_DIST
  exclude: &WF10_EXCLUDE
    - org.jboss.arquillian.test:*
    - org.jboss.arquillian.testenricher:*
    - org.jboss.arquillian.container:*
    - org.jboss.arquillian.core:*
    - org.jboss.arquillian.config:*
    - org.jboss.arquillian.protocol:*
    - org.jboss.shrinkwrap.api:*
    - org.jboss.shrinkwrap:*
    - org.jboss.shrinkwrap.descriptors:*
    - org.jboss.shrinkwrap.resolver:*
    - "*:wildfly-arquillian-testenricher-msc"

/ als we in eclipse zoeken naar RemoteDeployableContainer dan vinden we hem NIET,
/ als we in eclipse zoeken naar ManagedDeployableContainer dan vinden we hem WEL,
/ we zien de tree in de Java view in eclipse dat ManagedDeployableContainer zit in wildfly-arquillian-container-managed-2.1.0.Final.jar

/ 13	. 

/ wat wel lukt is dit:
/ run config arquillian-forge3-clean-test-debug
Goals: -Dmaven.surefire.debug clean test
/ verder niets,
/  debug config aquillian-forge3-remote
Port :5005

/ Kun je iets in forge doen dat run config arquillian-forge3-clean-test-debug vervangt , bijv $ forge -Dmaven.surefire.debug  ?
/ TODO

/s,
org.arquillian.container.chameleon.InitiateContainer.setup(org.jboss.arquillian.core.spi.EventContext<org.jboss.arquillian.container.spi.event.SetupContainer>) line: 37	
        SetupContainer event = setup.getEvent();
event	SetupContainer  (id=88)	
	container	ContainerImpl  (id=107)	
		containerConfiguration	ContainerDefImpl  (id=111)	
		containerProducer	InstanceImpl<T>  (id=120)	
		deployableContainer	ChameleonContainer  (id=124)	
		event	EventImpl<T>  (id=126)	
		failureCause	null	
		name	"arquillian-wildfly-managed" (id=128)	
		serviceLoader	InstanceImpl<T>  (id=132)	
		state	Container$State  (id=133)	
		
        if (isChameleonContainer(event)) {
/s,
    private boolean isChameleonContainer(SetupContainer event) {
        return event.getContainer().getDeployableContainer() instanceof ChameleonContainer;
/j,
/t,
            initiateChameleon(event);
/s,
org.arquillian.container.chameleon.InitiateContainer.initiateChameleon(org.jboss.arquillian.container.spi.event.SetupContainer) line: 49	
        ChameleonContainer container = (ChameleonContainer) setup.getContainer().getDeployableContainer();
        ContainerDefImpl containerDef = (ContainerDefImpl) setup.getContainer().getContainerConfiguration();
setup	SetupContainer  (id=88)	
	container	ContainerImpl  (id=107)	
		containerConfiguration	ContainerDefImpl  (id=111)
Listing of Node starting at: container
+ container({default=true, qualifier=arquillian-wildfly-managed}) 
-+ configuration({}) 
--+ property({name=chameleonTarget}) wildfly:10.1.0.Final:MANAGED
--+ property({name=jbossHome}) C:\Users\ervelden\bin\wildfly-10.1.0.Final
--+ property({name=javaVmArguments}) -Xrunjdwp:transport=dt_socket,address=8787,server=y,suspend=y
		deployableContainer	ChameleonContainer  (id=124)	
	
        Field containerNodeField = ContainerDefImpl.class.getDeclaredField("container");
        Node node = (Node) containerNodeField.get(containerDef);
node	Node  (id=232)	
	attributes	HashMap<K,V>  (id=244)	
	children	ArrayList<E>  (id=248)	
		[0]	Node  (id=256)	
			attributes	HashMap<K,V>  (id=258)	
			children	ArrayList<E>  (id=259)	
				[0]	Node  (id=291)	
					attributes	HashMap<K,V>  (id=295)	
					children	ArrayList<E>  (id=296)	
					comment	false	
					name	"property" (id=297)	
					parent	Node  (id=256)	
					text	"wildfly:10.1.0.Final:MANAGED" (id=298)	
				[1]	Node  (id=292)	
					attributes	HashMap<K,V>  (id=300)	
					children	ArrayList<E>  (id=301)	
					comment	false	
					name	"property" (id=297)	
					parent	Node  (id=256)	
					text	"C:\\Users\\ervelden\\bin\\wildfly-10.1.0.Final" (id=302)	
				[2]	Node  (id=293)	
					attributes	HashMap<K,V>  (id=304)	
					children	ArrayList<E>  (id=305)	
					comment	false	
					name	"property" (id=297)	
					parent	Node  (id=256)	
					text	"-Xrunjdwp:transport=dt_socket,address=8787,server=y,suspend=y" (id=307)	
			comment	false	
			name	"configuration" (id=260)	
			parent	Node  (id=232)	
			text	"\n    " (id=262)	
	comment	false	
	name	"container" (id=228)	
	parent	Node  (id=234)	
	text	"\n  " (id=251)
	
        Map<String, String> properties = removeAndMerge(container, node, containerDef);
/s,
org.arquillian.container.chameleon.InitiateContainer.removeAndMerge(org.arquillian.container.chameleon.ChameleonContainer, org.jboss.shrinkwrap.descriptor.spi.node.Node, org.jboss.arquillian.config.descriptor.api.ContainerDef) line: 75	
        Map<String, String> current = containerDef.getContainerProperties();
{javaVmArguments=-Xrunjdwp:transport=dt_socket,address=8787,server=y,suspend=y, jbossHome=C:\Users\ervelden\bin\wildfly-10.1.0.Final, chameleonTarget=wildfly:10.1.0.Final:MANAGED}

        if (!container.isInitiated()
/n, 
/ want container.configuration==null

		|| !current.containsKey("chameleonTarget")) {
            return current;
        }	
/t,
org.arquillian.container.chameleon.InitiateContainer.initiateChameleon(org.jboss.arquillian.container.spi.event.SetupContainer) line: 58	
        Map<String, String> properties = removeAndMerge(container, node, containerDef);
/d,
        if (container.isInitiated() && !properties.containsKey("chameleonTarget")) {
/n,
            return;
/n,
        ChameleonConfiguration configuration = new ChameleonConfiguration();
configuration	ChameleonConfiguration  (id=367)	
	DEFAULT_CONTAINER_MAPPING	"chameleon/default/containers.yaml" (id=369)	
	GRADLE_OUTPUT_DIRECTORY	"bin" (id=370)	
	MAVEN_OUTPUT_DIRECTORY	"target" (id=371)	
	TMP_FOLDER_EXPRESSION	"TMP" (id=372)	
	chameleonContainerConfigurationFile	null	
	chameleonDistributionDownloadFolder	null	
	chameleonResolveCacheFolder	null	
	chameleonTarget	null	
            // Remove the Chameleon container properties from configuration
            setAndRemoveProperties(node, properties, configuration);
/s,
org.arquillian.container.chameleon.InitiateContainer.setAndRemoveProperties(org.jboss.shrinkwrap.descriptor.spi.node.Node, java.util.Map<java.lang.String,java.lang.String>, org.arquillian.container.chameleon.ChameleonConfiguration) line: 93
/=
    private void setAndRemoveProperties(Node node, Map<String, String> properties, ChameleonConfiguration configuration) throws Exception {
	
{javaVmArguments=-Xrunjdwp:transport=dt_socket,address=8787,server=y,suspend=y, jbossHome=C:\Users\ervelden\bin\wildfly-10.1.0.Final, chameleonTarget=wildfly:10.1.0.Final:MANAGED}
/ node is de container


        for (Method setter : configuration.getClass().getMethods()) {
public void org.arquillian.container.chameleon.ChameleonConfiguration.validate() throws org.jboss.arquillian.container.spi.ConfigurationException
            if ( // isSetter
                    setter.getName().startsWith("set") &&
                            setter.getReturnType().equals(Void.TYPE) &&
                            setter.getParameterTypes().length == 1
                    ) {
/n,
/ volgende,
public void org.arquillian.container.chameleon.ChameleonConfiguration.setChameleonTarget(java.lang.String)
           if ( // isSetter
			...
/j,
                if (properties.containsKey(propertyName)) {
/j,
                    setter.invoke(configuration, properties.get(propertyName));
configuration	ChameleonConfiguration  (id=367)	
	DEFAULT_CONTAINER_MAPPING	"chameleon/default/containers.yaml" (id=369)	
	GRADLE_OUTPUT_DIRECTORY	"bin" (id=370)	
	MAVEN_OUTPUT_DIRECTORY	"target" (id=371)	
	TMP_FOLDER_EXPRESSION	"TMP" (id=372)	
	chameleonContainerConfigurationFile	null	
	chameleonDistributionDownloadFolder	null	
	chameleonResolveCacheFolder	null	
	chameleonTarget	"wildfly:10.1.0.Final:MANAGED" (id=298)	
                   node.getSingle("configuration").removeChild("property@name=" + propertyName);
/s,
org.jboss.shrinkwrap.descriptor.spi.node.Patterns.from(java.lang.String) line: 78	
            Pattern pattern = new Pattern(name);
            pattern.text(text);
            for (String attr : attributes) {
/n ,
Pattern [attributes={}, name=configuration, text=null]
            patterns.add(pattern);
        }
        return patterns.toArray(ARRAY_CAST);
/t,
/s,
org.jboss.shrinkwrap.descriptor.spi.node.Node.getSingle(org.jboss.shrinkwrap.descriptor.spi.node.Pattern...) line: 318	
        return AbsoluteGetSingleQuery.INSTANCE.execute(this, includeRootPatternFirst(patterns));
/s,
org.jboss.shrinkwrap.descriptor.spi.node.Node.includeRootPatternFirst(org.jboss.shrinkwrap.descriptor.spi.node.Pattern...) line: 633	
        return validateAndMergePatternInput(new Pattern(name), patterns);
name="container"
[Pattern [attributes={}, name=configuration, text=null]]
/t,
/s,
org.jboss.shrinkwrap.descriptor.spi.node.Node.removeChild(java.lang.String) line: 400
/=
    public Node removeChild(final String name) {
name=property@name=chameleonTarget
        final Node node = getSingle(name);
/s,
org.jboss.shrinkwrap.descriptor.spi.node.Node.getSingle(java.lang.String) line: 314	
        return getSingle(Patterns.from(name));
/s,
org.jboss.shrinkwrap.descriptor.spi.node.Patterns.from(java.lang.String) line: 57	
        for (final String path : paths) {
path=property@name=chameleonTarget
            String nameSegment = path.indexOf(ATTR_PATH_SEPERATOR) != -1 ? path.substring(0,	/ ATTR_PATH_SEPERATOR= @
                path.indexOf(ATTR_PATH_SEPERATOR)) : path;
property

            String name = nameSegment.indexOf(ATTR_VALUE_SEPERATOR) != -1 ? nameSegment.substring(0, ./ ATTR_VALUE_SEPERATOR= =
                nameSegment.indexOf(ATTR_VALUE_SEPERATOR)) : nameSegment;
property
            String text = nameSegment.indexOf(ATTR_VALUE_SEPERATOR) != -1 ? nameSegment.substring(
                nameSegment.indexOf(ATTR_VALUE_SEPERATOR) + 1).replaceAll("\\\\", "") : null;
null
            String attribute = path.indexOf(ATTR_PATH_SEPERATOR) != -1 ? path.substring(
                path.indexOf(ATTR_PATH_SEPERATOR) + ATTR_PATH_SEPERATOR.length(), path.length()) : null;
name=chameleonTarget
            String[] attributes = attribute == null ? new String[0] : attribute.split(ATTR_SEPERATOR); / ATTR_SEPERATOR= &
[name=chameleonTarget]
            Pattern pattern = new Pattern(name);
Pattern [attributes={}, name=property, text=null]
            pattern.text(text);
            for (String attr : attributes) {
                String[] nameValue = attr.split(ATTR_VALUE_SEPERATOR); / [name, chameleonTarget]
				pattern.attribute(nameValue[0], nameValue[1]);
            patterns.add(pattern);
patterns=[Pattern [attributes={name=chameleonTarget}, name=property, text=null]]
        }
        return patterns.toArray(ARRAY_CAST);
/t,
    public Node getSingle(String name) {
        return getSingle(Patterns.from(name));
/pd,
/s,
    public Node getSingle(final Pattern... patterns) {
        return AbsoluteGetSingleQuery.INSTANCE.execute(this, includeRootPatternFirst(patterns));
/s,
org.jboss.shrinkwrap.descriptor.spi.node.Node.includeRootPatternFirst(org.jboss.shrinkwrap.descriptor.spi.node.Pattern...) line: 633	
        return validateAndMergePatternInput(new Pattern(name), patterns);
name="configuration"
patterns=[Pattern [attributes={name=chameleonTarget}, name=property, text=null]]
/t,
    public Node getSingle(final Pattern... patterns) {
        return AbsoluteGetSingleQuery.INSTANCE.execute(this, includeRootPatternFirst(patterns));
/pd,
/s,
org.jboss.shrinkwrap.descriptor.spi.node.AbsoluteGetSingleQuery.execute(org.jboss.shrinkwrap.descriptor.spi.node.Node, org.jboss.shrinkwrap.descriptor.spi.node.Pattern...) line: 41

node=Node[configuration] children[3] attributes[{}] text[
    ] 	
patterns=[Pattern [attributes={}, name=configuration, text=null], Pattern [attributes={name=chameleonTarget}, name=property, text=null]]

        final List<Node> nodes = AbsoluteGetQuery.INSTANCE.execute(node, patterns);
/s,
org.jboss.shrinkwrap.descriptor.spi.node.AbsoluteGetQuery.execute(org.jboss.shrinkwrap.descriptor.spi.node.Node, org.jboss.shrinkwrap.descriptor.spi.node.Pattern...) line: 49	

        // Delegate to recursive handler, starting at the top
        return findMatch(node, Arrays.asList(patterns));
		
node=Node[configuration] children[3] attributes[{}] text[
    ]         
patterns=[Pattern [attributes={}, name=configuration, text=null], Pattern [attributes={name=chameleonTarget}, name=property, text=null]]
/ de 1ste pattern moet match met de node, en de 2de pattern geeft de children die match aan deze pattern,

/s,
    protected List<Node> findMatch(Node start, List<Pattern> patterns) {

start = Node[configuration] children[3] attributes[{}] text[
    ] 
patterns=[Pattern [attributes={}, name=configuration, text=null], Pattern [attributes={name=chameleonTarget}, name=property, text=null]]

        // Get the next pattern in sequence
        final Pattern pattern = patterns.get(0);

        if (!pattern.matches(start)) {
/n,

        for (final Node child : start.getChildren()) {
child=Node[property] children[0] attributes[{name=chameleonTarget}] text[wildfly:10.1.0.Final:MANAGED] 
            // Only use patterns that haven't already matched
            final List<Pattern> remainingPatterns = patterns.subList(1, patterns.size());
            // Recursion point
            matchedNodes.addAll(findMatch(child, remainingPatterns));
/s,
org.jboss.shrinkwrap.descriptor.spi.node.AbsoluteGetQuery.findMatch(org.jboss.shrinkwrap.descriptor.spi.node.Node, java.util.List<org.jboss.shrinkwrap.descriptor.spi.node.Pattern>) line: 54	

start=Node[property] children[0] attributes[{name=chameleonTarget}] text[wildfly:10.1.0.Final:MANAGED] 
patterns=[Pattern [attributes={name=chameleonTarget}, name=property, text=null]]

        // Get the next pattern in sequence
        final Pattern pattern = patterns.get(0);

        if (!pattern.matches(start)) {
/n,
        if (patterns.size() == 1) {
            matchedNodes.add(start);
matchedNodes=[Node[property] children[0] attributes[{name=chameleonTarget}] text[wildfly:10.1.0.Final:MANAGED] ]
            return matchedNodes;
        }
/t,
org.jboss.shrinkwrap.descriptor.spi.node.AbsoluteGetQuery.findMatch(org.jboss.shrinkwrap.descriptor.spi.node.Node, java.util.List<org.jboss.shrinkwrap.descriptor.spi.node.Pattern>) line: 70	

        for (final Node child : start.getChildren()) {
            // Only use patterns that haven't already matched
            final List<Pattern> remainingPatterns = patterns.subList(1, patterns.size());

            // Recursion point
            matchedNodes.addAll(findMatch(child, remainingPatterns));
/d,
/ volgende,
        }
        for (final Node child : start.getChildren()) {
child=Node[property] children[0] attributes[{name=jbossHome}] text[C:\Users\ervelden\bin\wildfly-10.1.0.Final] 
            // Only use patterns that haven't already matched
            final List<Pattern> remainingPatterns = patterns.subList(1, patterns.size());
remainingPatterns=[Pattern [attributes={name=chameleonTarget}, name=property, text=null]]

matchedNodes=[Node[property] children[0] attributes[{name=chameleonTarget}] text[wildfly:10.1.0.Final:MANAGED] ]

            // Recursion point
            matchedNodes.addAll(findMatch(child, remainingPatterns));
/s,
org.jboss.shrinkwrap.descriptor.spi.node.AbsoluteGetQuery.findMatch(org.jboss.shrinkwrap.descriptor.spi.node.Node, java.util.List<org.jboss.shrinkwrap.descriptor.spi.node.Pattern>) line: 57	

        // Get the next pattern in sequence
        final Pattern pattern = patterns.get(0);

        if (!pattern.matches(start)) {
/j,
            return Collections.emptyList();
        }	
start=Node[property] children[0] attributes[{name=jbossHome}] text[C:\Users\ervelden\bin\wildfly-10.1.0.Final] 
pattern=Pattern [attributes={name=chameleonTarget}, name=property, text=null]

/t,
org.jboss.shrinkwrap.descriptor.spi.node.AbsoluteGetQuery.findMatch(org.jboss.shrinkwrap.descriptor.spi.node.Node, java.util.List<org.jboss.shrinkwrap.descriptor.spi.node.Pattern>) line: 70	

        for (final Node child : start.getChildren()) {
            // Only use patterns that haven't already matched
            final List<Pattern> remainingPatterns = patterns.subList(1, patterns.size());

            // Recursion point
            matchedNodes.addAll(findMatch(child, remainingPatterns));
        }
/d,
matchedNodes=[Node[property] children[0] attributes[{name=chameleonTarget}] text[wildfly:10.1.0.Final:MANAGED] ]

/ volgende,        
		for (final Node child : start.getChildren()) {
child=Node[property] children[0] attributes[{name=javaVmArguments}] text[-Xrunjdwp:transport=dt_socket,address=8787,server=y,suspend=y] 
            // Only use patterns that haven't already matched
            final List<Pattern> remainingPatterns = patterns.subList(1, patterns.size());

            // Recursion point
            matchedNodes.addAll(findMatch(child, remainingPatterns));
        }
        return matchedNodes;
/t,
org.jboss.shrinkwrap.descriptor.spi.node.AbsoluteGetQuery.execute(org.jboss.shrinkwrap.descriptor.spi.node.Node, org.jboss.shrinkwrap.descriptor.spi.node.Pattern...) line: 49	

        // Delegate to recursive handler, starting at the top
        return findMatch(node, Arrays.asList(patterns));

node=Node[configuration] children[3] attributes[{}] text[
    ]         
patterns=[Pattern [attributes={}, name=configuration, text=null], Pattern [attributes={name=chameleonTarget}, name=property, text=null]]
/ de 1ste pattern moet match met de node, en de 2de pattern geeft de children die match aan deze pattern,

/t,
org.jboss.shrinkwrap.descriptor.spi.node.AbsoluteGetSingleQuery.execute(org.jboss.shrinkwrap.descriptor.spi.node.Node, org.jboss.shrinkwrap.descriptor.spi.node.Pattern...) line: 45	

       final List<Node> nodes = AbsoluteGetQuery.INSTANCE.execute(node, patterns);
/d,
node=Node[configuration] children[3] attributes[{}] text[
    ]         
patterns=[Pattern [attributes={}, name=configuration, text=null], Pattern [attributes={name=chameleonTarget}, name=property, text=null]]
nodes=[Node[property] children[0] attributes[{name=chameleonTarget}] text[wildfly:10.1.0.Final:MANAGED] ]
        return nodes.get(0);
/t,
org.jboss.shrinkwrap.descriptor.spi.node.Node.getSingle(org.jboss.shrinkwrap.descriptor.spi.node.Pattern...) line: 318	
        return AbsoluteGetSingleQuery.INSTANCE.execute(this, includeRootPatternFirst(patterns));
/d,
/t,
org.jboss.shrinkwrap.descriptor.spi.node.Node.getSingle(java.lang.String) line: 314	
        return getSingle(Patterns.from(name));
/d,
org.jboss.shrinkwrap.descriptor.spi.node.Node.removeChild(java.lang.String) line: 401	
        final Node node = getSingle(name);
/d,
node=Node[property] children[0] attributes[{name=chameleonTarget}] text[wildfly:10.1.0.Final:MANAGED] 
        if (node != null) {
            removeChild(node);
        return node;
/t,
org.arquillian.container.chameleon.InitiateContainer.setAndRemoveProperties(org.jboss.shrinkwrap.descriptor.spi.node.Node, java.util.Map<java.lang.String,java.lang.String>, org.arquillian.container.chameleon.ChameleonConfiguration) line: 102	
        for (Method setter : configuration.getClass().getMethods()) {
public void org.arquillian.container.chameleon.ChameleonConfiguration.setChameleonTarget(java.lang.String)
            if ( // isSetter
                    setter.getName().startsWith("set") &&
                            setter.getReturnType().equals(Void.TYPE) &&
                            setter.getParameterTypes().length == 1
                    ) {
                String propertyName = toCamelCase(setter);
                if (properties.containsKey(propertyName)) {
                    setter.invoke(configuration, properties.get(propertyName));
                    node.getSingle("configuration").removeChild("property@name=" + propertyName);
/d,
/ volgende,
        for (Method setter : configuration.getClass().getMethods()) {
public void org.arquillian.container.chameleon.ChameleonConfiguration.setChameleonResolveCacheFolder(java.lang.String)
            if ( // isSetter
                    setter.getName().startsWith("set") &&
                            setter.getReturnType().equals(Void.TYPE) &&
                            setter.getParameterTypes().length == 1
                    ) {
                String propertyName = toCamelCase(setter);
chameleonResolveCacheFolder
                if (properties.containsKey(propertyName)) {
properties={javaVmArguments=-Xrunjdwp:transport=dt_socket,address=8787,server=y,suspend=y, jbossHome=C:\Users\ervelden\bin\wildfly-10.1.0.Final, chameleonTarget=wildfly:10.1.0.Final:MANAGED}
/n,
/ volgende,
        for (Method setter : configuration.getClass().getMethods()) {
public void org.arquillian.container.chameleon.ChameleonConfiguration.setChameleonContainerConfigurationFile(java.lang.String)
            if ( // isSetter
                    setter.getName().startsWith("set") &&
                            setter.getReturnType().equals(Void.TYPE) &&
                            setter.getParameterTypes().length == 1
                    ) {
                String propertyName = toCamelCase(setter);
                if (properties.containsKey(propertyName)) {
/n,
/ volgende,
        for (Method setter : configuration.getClass().getMethods()) {
public void org.arquillian.container.chameleon.ChameleonConfiguration.setChameleonDistributionDownloadFolder(java.lang.String)
            if ( // isSetter
                    setter.getName().startsWith("set") &&
                            setter.getReturnType().equals(Void.TYPE) &&
                            setter.getParameterTypes().length == 1
                    ) {
                String propertyName = toCamelCase(setter);
                if (properties.containsKey(propertyName)) {
/n,
/t,
org.arquillian.container.chameleon.InitiateContainer.initiateChameleon(org.jboss.arquillian.container.spi.event.SetupContainer) line: 66	
            // Remove the Chameleon container properties from configuration
            setAndRemoveProperties(node, properties, configuration);
/d,
node=container, heeft 1 child=configuration, heeft 2 children=property=C:\\Users\\ervelden\\bin\\wildfly-10.1.0.Final, property=-Xrunjdwp...
/ de 3de child zit nu in configuration,
properties={javaVmArguments=-Xrunjdwp:transport=dt_socket,address=8787,server=y,suspend=y, jbossHome=C:\Users\ervelden\bin\wildfly-10.1.0.Final, chameleonTarget=wildfly:10.1.0.Final:MANAGED}
configuration	ChameleonConfiguration  (id=367)	
	DEFAULT_CONTAINER_MAPPING	"chameleon/default/containers.yaml" (id=369)	
	GRADLE_OUTPUT_DIRECTORY	"bin" (id=370)	
	MAVEN_OUTPUT_DIRECTORY	"target" (id=371)	
	TMP_FOLDER_EXPRESSION	"TMP" (id=372)	
	chameleonContainerConfigurationFile	null	/ alt voor DEFAULT_CONTAINER_MAPPING
	chameleonDistributionDownloadFolder	null	
	chameleonResolveCacheFolder	null	
	chameleonTarget	"wildfly:10.1.0.Final:MANAGED" (id=298)	

	            configuration.validate();
/s,
org.arquillian.container.chameleon.ChameleonConfiguration.validate() line: 52	
        if (chameleonTarget == null) {
/n,

        // Trigger possible Exception case during File/Resource load
        getChameleonContainerConfigurationFileStream();
/s,
org.arquillian.container.chameleon.ChameleonConfiguration.getChameleonContainerConfigurationFileStream() line: 82	
        boolean isDefault = false;
        String resource = getChameleonContainerConfigurationFile();
null
        if (resource == null) {
            resource = DEFAULT_CONTAINER_MAPPING;
            isDefault = true;
        }
        return FileUtils.loadConfiguration(resource, isDefault); 

/ we vinden, 
C:\Users\ervelden\java\arquillian-container-chameleon\arquillian-chameleon-container-model\src\main\resources\chameleon\default\containers.yaml
/ maar in welke jar zit hij?
		

/s,
org.arquillian.container.chameleon.FileUtils.loadConfiguration(java.lang.String, boolean) line: 36	
        InputStream stream = loadResource(resourceName);
/s,
org.arquillian.container.chameleon.FileUtils.loadResource(java.lang.String) line: 53	
        InputStream stream = loadClassPathResource(resourceName);
/s,
org.arquillian.container.chameleon.FileUtils.loadClassPathResource(java.lang.String) line: 75	
        ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
        return classLoader.getResourceAsStream(resourceName);
/t,
org.arquillian.container.chameleon.FileUtils.loadResource(java.lang.String) line: 54	
        InputStream stream = loadClassPathResource(resourceName);
/d,
stream	JarURLConnection$JarURLInputStream  (id=823)	
	this$0	JarURLConnection  (id=831)	
		jarFileURL	URL  (id=853)
jar:file:/C:/Users/ervelden/.m2/repository/org/arquillian/container/arquillian-chameleon-container-model/1.0.0.Beta1/arquillian-chameleon-container-model-1.0.0.Beta1.jar!/chameleon/default/containers.yaml

        return stream;
/t,
org.arquillian.container.chameleon.FileUtils.loadConfiguration(java.lang.String, boolean) line: 49	
        InputStream stream = loadResource(resourceName);
/d,
        return stream;
/d,
org.arquillian.container.chameleon.ChameleonConfiguration.getChameleonContainerConfigurationFileStream() line: 84	
        return FileUtils.loadConfiguration(resource, isDefault);
/d,
org.arquillian.container.chameleon.ChameleonConfiguration.validate() line: 54
        // Trigger possible Exception case during File/Resource load	
        getChameleonContainerConfigurationFileStream();
/d,
        File resolveCache = getChameleonResolveCacheFolder();
target\server\cache
        if (!resolveCache.exists()) {
            if (!resolveCache.mkdirs()) {
/n,
        // Try to parse to 'trigger' ConfigurationException
        getParsedTarget();
/s,
org.arquillian.container.chameleon.ChameleonConfiguration.getParsedTarget() line: 130	
        return Target.from(getChameleonTarget()); / chameleonTarget="wildfly:10.1.0.Final:MANAGED"
/s,
org.arquillian.container.chameleon.spi.model.Target.from(java.lang.String) line: 57	
        Target target = new Target();
        String[] sections = source.split(":");
[wildfly, 10.1.0.Final, MANAGED]

/ Intermezzo

public class Target {

    public static enum Type {
        Remote, Managed, Embedded, Default;

        public static Type from(String name) {
            for (Type type : Type.values()) {
                if (type.name().equalsIgnoreCase(name)) {
                    return type;
                }
            }
            return null;
        }
    }

    private String server;
    private String version;
    private Type type;


/ Einde Intermezzo

        if (sections.length > 2) {
            for (Type type : Type.values()) {
                if (sections[2].toLowerCase().contains(type.name().toLowerCase())) {
                    target.type = type;
                    break;
                }
            }
target	Target  (id=898)	
	server	"wildfly" (id=899)	
	type	Target$Type  (id=926)	
		$VALUES	Target$Type[4]  (id=929)	
		Default	Target$Type  (id=931)	
		Embedded	Target$Type  (id=932)	
		Managed	Target$Type  (id=926)	
		Remote	Target$Type  (id=922)	
		name	"Managed" (id=927)	
		ordinal	1	
	version	"10.1.0.Final" (id=900)	
        return target;
/t,
org.arquillian.container.chameleon.ChameleonConfiguration.getParsedTarget() line: 130	
        return Target.from(getChameleonTarget());
/d,
/t,
org.arquillian.container.chameleon.ChameleonConfiguration.validate() line: 62	
        // Try to parse to 'trigger' ConfigurationException
        getParsedTarget();
/d,
/ blijft nergens, lijkt alleen 'n check	,
/ TODO
/t,
org.arquillian.container.chameleon.InitiateContainer.initiateChameleon(org.jboss.arquillian.container.spi.event.SetupContainer) line: 69	
            configuration.validate();
/d,
        container.init(configuration, containerDef);
		
containerDef	ContainerDefImpl  (id=111)	
	container	Node  (id=232)					/ 
		name	"container" (id=228)
		attributes	HashMap<K,V>  (id=976)	{default=true, qualifier=arquillian-wildfly-managed}
		children	ArrayList<E>  (id=248)	
			[0]	Node  (id=256)	
				children	ArrayList<E>  (id=259)	
					[0]	Node  (id=292)	
						attributes	HashMap<K,V>  (id=300)	{name=jbossHome}
						name	"property" (id=297)	
						text	"C:\\Users\\ervelden\\bin\\wildfly-10.1.0.Final" (id=302)	
					[1]	Node  (id=293)	
						attributes	HashMap<K,V>  (id=304)	{name=javaVmArguments}
						name	"property" (id=297)	
						text	"-Xrunjdwp:transport=dt_socket,address=8787,server=y,suspend=y" (id=307)	
				name	"configuration" (id=260)	
				text	"\n    " (id=262)	
		
	model	Node  (id=234)
		name	"arquillian" (id=951)
		attributes {xmlns=http://jboss.org/schema/arquillian, xsi:schemaLocation=http://jboss.org/schema/arquillian http://jboss.org/schema/arquillian/arquillian_1_0.xsd, xmlns:xsi=http://www.w3.org/2001/XMLSchema-instance}
		children	ArrayList<E>  (id=950)	
			[0]	Node  (id=232)	/ see hierboven, = 1ste container (managed) in arquillian.xml (wat er nog van over is, want 1 child is nu in configuration),
									/ wat overblijft hier is target configuration, configuration= chameleon configuration,
			[1]	Node  (id=955)	
				name	"container" (id=228)	/ 2de container in arquillian.xml (remote)
				attributes {default=false, qualifier=arquillian-wildfly-remote}
				children	ArrayList<E>  (id=969)	
					[0]	Node  (id=974)	
						name	"configuration" (id=260)	
						attributes	HashMap<K,V>  (id=976)	{}
						children	ArrayList<E>  (id=977)	
							[0]	Node  (id=987)	
								attributes	HashMap<K,V>  (id=997)	{name=chameleonTarget}
								name	"property" (id=297)	
								text	"wildfly:10.1.0.Final:MANAGED" (id=999)	
								$assertionsDisabled	false	
							[1] Node 
								attributes	HashMap<K,V>  (id=1001)	{name=managementPort}
								name	"property" (id=297)	
								text	"9990" (id=1003)	
						name	"configuration" (id=260)	
						text	"\n    " (id=979)	
				
			[2]	Node  (id=956)	
				attributes	HashMap<K,V>  (id=981)	{type=Servlet 3.0}
				name	"defaultProtocol" (id=984)	
				text	"" (id=990)			
		text	"\n" (id=952)	

configuration	ChameleonConfiguration  (id=367)	
	DEFAULT_CONTAINER_MAPPING	"chameleon/default/containers.yaml" (id=369)	
	GRADLE_OUTPUT_DIRECTORY	"bin" (id=370)	
	MAVEN_OUTPUT_DIRECTORY	"target" (id=371)	
	TMP_FOLDER_EXPRESSION	"TMP" (id=372)	
	chameleonContainerConfigurationFile	null	
	chameleonDistributionDownloadFolder	null	
	chameleonResolveCacheFolder	null	
	chameleonTarget	"wildfly:10.1.0.Final:MANAGED" (id=298)	

	
	
/ Intermezzo

<arquillian xmlns="http://jboss.org/schema/arquillian" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://jboss.org/schema/arquillian http://jboss.org/schema/arquillian/arquillian_1_0.xsd">
  <container default="true" qualifier="arquillian-wildfly-managed">
    <configuration>
      <property name="chameleonTarget">${chameleon.target}</property>
      <property name="jbossHome">C:\Users\ervelden\bin\wildfly-10.1.0.Final</property>
      <property name="javaVmArguments">-Xrunjdwp:transport=dt_socket,address=8787,server=y,suspend=y</property>
    </configuration>
  </container>
  <container default="false" qualifier="arquillian-wildfly-remote">
    <configuration>
      <property name="chameleonTarget">${chameleon.target}</property>
      <property name="managementPort">9990</property>
    </configuration>
  </container>
  <defaultProtocol type="Servlet 3.0"/>
</arquillian>

/ Einde Intermezzo

/s,
org.arquillian.container.chameleon.ChameleonContainer.init(org.arquillian.container.chameleon.ChameleonConfiguration, org.jboss.arquillian.config.descriptor.api.ContainerDef) line: 76	
/=
    public void init(ChameleonConfiguration configuration, ContainerDef targetConfiguration) {
        this.configuration = configuration;
        if (this.originalContainerConfiguration == null) {
            this.originalContainerConfiguration = new HashMap<String, String>(targetConfiguration.getContainerProperties());
/s,
org.jboss.arquillian.config.descriptor.impl.ContainerDefImpl.getContainerProperties() line: 166	

      Node props = container.getSingle("configuration");
/ zie boven Node (232) = container, heeft target container configuratie, de chameleon configuratie is er uit,

      if(props != null)
      {
         for(Node prop: props.get("property"))
         {
            properties.put(prop.getAttribute("name"), prop.getText());
         }
      }
      return properties;
{javaVmArguments=-Xrunjdwp:transport=dt_socket,address=8787,server=y,suspend=y, jbossHome=C:\Users\ervelden\bin\wildfly-10.1.0.Final}
/t,
org.arquillian.container.chameleon.ChameleonContainer.init(org.arquillian.container.chameleon.ChameleonConfiguration, org.jboss.arquillian.config.descriptor.api.ContainerDef) line: 81	
            this.originalContainerConfiguration = new HashMap<String, String>(targetConfiguration.getContainerProperties());
/d,
			ContainerAdapter adapter = configuration.getConfiguredAdapter();
/s,
org.arquillian.container.chameleon.ChameleonConfiguration.getConfiguredAdapter() line: 117	
        Target target = getParsedTarget();
wildfly:10.1.0.Final:Managed
        Container[] containers = new ContainerLoader().load(getChameleonContainerConfigurationFileStream(), getChameleonResolveCacheFolder());
/s,
org.arquillian.container.chameleon.ChameleonConfiguration.getChameleonContainerConfigurationFileStream() line: 84	
        String resource = getChameleonContainerConfigurationFile();
        if (resource == null) {
            resource = DEFAULT_CONTAINER_MAPPING; / chameleon/default/containers.yaml
            isDefault = true;
        }
        return FileUtils.loadConfiguration(resource, isDefault);
/t,
/s,
org.arquillian.container.chameleon.ContainerLoader.load(java.io.InputStream, java.io.File) line: 33	
        MavenDependency[] mavenDependencies = Utils.toMavenDependencies(
                new String[]{"org.yaml:snakeyaml:1.17"},
                new String[]{});
/s,

org.arquillian.container.chameleon.Utils.toMavenDependencies(java.lang.String[], java.lang.String[]) line: 58	
        MavenDependency[] mavenDependencies = new MavenDependency[dependencies.length];
        for (int i = 0; i < dependencies.length; i++) {
            mavenDependencies[i] = MavenDependencies.createDependency(
                    dependencies[i],
                    ScopeType.COMPILE,
                    false,
                    mavenExclusions);
        }
/s,
org.jboss.shrinkwrap.resolver.api.maven.coordinate.MavenDependencies.createDependency(java.lang.String, org.jboss.shrinkwrap.resolver.api.maven.ScopeType, boolean, org.jboss.shrinkwrap.resolver.api.maven.coordinate.MavenDependencyExclusion...) line: 73	
        final MavenCoordinate delegate = MavenCoordinates.createCoordinate(canonicalForm);
/s,
org.jboss.shrinkwrap.resolver.api.maven.coordinate.MavenCoordinates.createCoordinate(java.lang.String) line: 55	
        final MavenCoordinateParser parser = MavenCoordinateParser.parse(canonicalForm);
parser	MavenCoordinates$MavenCoordinateParser  (id=1928)	
	$assertionsDisabled	false	
	DEPENDENCY_PATTERN	Pattern  (id=1929)	
	EMPTY_STRING	"" (id=990)	
	ID_POS_2	2	
	ID_POS_3	4	
	ID_POS_4	6	
	ID_POS_5	8	
	IS_POS_1	1	
	artifactId	"snakeyaml" (id=1931)	
	classifier	"" (id=990)	
	groupId	"org.yaml" (id=1932)	
	type	PackagingType  (id=1933)	
	version	"1.17" (id=1935)	

        return createCoordinate(parser.getGroupId(), parser.getArtifactId(), parser.getVersion(),
            parser.getPackaging(), parser.getClassifier());
/s,
org.jboss.shrinkwrap.resolver.api.maven.coordinate.MavenCoordinates.createCoordinate(java.lang.String, java.lang.String, java.lang.String, org.jboss.shrinkwrap.resolver.api.maven.PackagingType, java.lang.String) line: 74	
        final MavenCoordinateImpl coordinate = new MavenCoordinateImpl(groupId, artifactId, version, packaging,
            classifier);
/s,
org.jboss.shrinkwrap.resolver.api.maven.coordinate.MavenCoordinateImpl(org.jboss.shrinkwrap.resolver.api.maven.coordinate.MavenGABaseImpl).<init>(java.lang.String, java.lang.String) line: 40	
        // Precondition checks
        assert groupId != null && groupId.length() > 0 : "groupId is required";
        assert artifactId != null && artifactId.length() > 0 : "artifactId is required";

        // Set properties
        this.groupId = groupId;
        this.artifactId = artifactId;
    }
/t,
org.jboss.shrinkwrap.resolver.api.maven.coordinate.MavenCoordinateImpl.<init>(java.lang.String, java.lang.String, java.lang.String, org.jboss.shrinkwrap.resolver.api.maven.PackagingType, java.lang.String) line: 52	
        // Precondition checks covered by superclass
        super(groupId, artifactId);
/d,
        // Set properties
        this.version = version;

        this.packaging = packaging == null ? PackagingType.JAR : packaging;	/ "jar"
        // Adjust this for compatibility with Aether parser
        this.classifier = classifier == null ? packaging.getClassifier() : classifier; / ""
/t,
org.jboss.shrinkwrap.resolver.api.maven.coordinate.MavenCoordinates.createCoordinate(java.lang.String, java.lang.String, java.lang.String, org.jboss.shrinkwrap.resolver.api.maven.PackagingType, java.lang.String) line: 82	

        final MavenCoordinateImpl coordinate = new MavenCoordinateImpl(groupId, artifactId, version, packaging,
            classifier);
/d,
coordinate	MavenCoordinateImpl  (id=1965)	
	$assertionsDisabled	false	
	EMPTY_STRING	"" (id=990)	
	SEPARATOR_COORDINATE	:	
	artifactId	"snakeyaml" (id=1931)	
	classifier	"" (id=990)	
	groupId	"org.yaml" (id=1932)	
	packaging	PackagingType  (id=1933)	
	version	"1.17" (id=1935)	

        return coordinate;		
/t,
org.jboss.shrinkwrap.resolver.api.maven.coordinate.MavenCoordinates.createCoordinate(java.lang.String) line: 56	
        return createCoordinate(parser.getGroupId(), parser.getArtifactId(), parser.getVersion(),
            parser.getPackaging(), parser.getClassifier());
/d,
org.jboss.shrinkwrap.resolver.api.maven.coordinate.MavenDependencies.createDependency(java.lang.String, org.jboss.shrinkwrap.resolver.api.maven.ScopeType, boolean, org.jboss.shrinkwrap.resolver.api.maven.coordinate.MavenDependencyExclusion...) line: 77	
        final MavenCoordinate delegate = MavenCoordinates.createCoordinate(canonicalForm);
/d,
delegate	MavenCoordinateImpl  (id=1965)	
	$assertionsDisabled	false	
	EMPTY_STRING	"" (id=990)	
	SEPARATOR_COORDINATE	:	
	artifactId	"snakeyaml" (id=1931)	
	classifier	"" (id=990)	
	groupId	"org.yaml" (id=1932)	
	packaging	PackagingType  (id=1933)	
	version	"1.17" (id=1935)
	
        return createDependency(delegate, scope, optional, exclusions); / scope=compile, optional =false, exclusions=MavenDependencyExclusion[]
/s,
org.jboss.shrinkwrap.resolver.api.maven.coordinate.MavenDependencies.createDependency(org.jboss.shrinkwrap.resolver.api.maven.coordinate.MavenCoordinate, org.jboss.shrinkwrap.resolver.api.maven.ScopeType, boolean, org.jboss.shrinkwrap.resolver.api.maven.coordinate.MavenDependencyExclusion...) line: 101	
			
        final MavenDependency dep = newInstance(coordinate, scope, optional, exclusions);
dep	MavenDependencyImpl  (id=1989)	
	$assertionsDisabled	false	
	delegate	MavenCoordinateImpl  (id=1965)	
		$assertionsDisabled	false	
		EMPTY_STRING	"" (id=990)	
		SEPARATOR_COORDINATE	:	
		artifactId	"snakeyaml" (id=1931)	
		classifier	"" (id=990)	
		groupId	"org.yaml" (id=1932)	
		packaging	PackagingType  (id=1933)	
		version	"1.17" (id=1935)	
	exclusions	Collections$UnmodifiableSet<E>  (id=1992)	
	optional	false	
	scope	ScopeType  (id=1980)	
	undeclaredScope	false	
	
	        return dep;
/t,
org.jboss.shrinkwrap.resolver.api.maven.coordinate.MavenDependencies.createDependency(java.lang.String, org.jboss.shrinkwrap.resolver.api.maven.ScopeType, boolean, org.jboss.shrinkwrap.resolver.api.maven.coordinate.MavenDependencyExclusion...) line: 77	

        final MavenCoordinate delegate = MavenCoordinates.createCoordinate(canonicalForm);
        return createDependency(delegate, scope, optional, exclusions);
/d,
org.arquillian.container.chameleon.Utils.toMavenDependencies(java.lang.String[], java.lang.String[]) line: 67	
        for (int i = 0; i < dependencies.length; i++) {
            mavenDependencies[i] = MavenDependencies.createDependency(
                    dependencies[i],
                    ScopeType.COMPILE,
                    false,
                    mavenExclusions);
        }
/d,
        return mavenDependencies;
/t,
org.arquillian.container.chameleon.ContainerLoader.load(java.io.InputStream, java.io.File) line: 37	
        MavenDependency[] mavenDependencies = Utils.toMavenDependencies(
                new String[]{"org.yaml:snakeyaml:1.17"},
                new String[]{});
/d,
        File[] archives = Resolver.resolve(cacheFolder, mavenDependencies);/ target\server\cache, [MavenDependency [org.yaml:snakeyaml:jar:1.17:compile]]
/s,
org.arquillian.container.chameleon.controller.Resolver.resolve(java.io.File, org.jboss.shrinkwrap.resolver.api.maven.coordinate.MavenDependency[]) line: 40	
        String hash = hash(dependencies);
e8baa3b1e14f5c565f89fa773cb3c450fac2dbab4dcec019f6f458c4a2600ff2		
        File[] files;

        File cacheFile = getCacheFile(cacheFolder, hash);
target\server\cache\e8baa3b1e14f5c565f89fa773cb3c450fac2dbab4dcec019f6f458c4a2600ff2.cache
        if (cacheFile.exists()) {
/n,
        } else {
            files = Maven.configureResolver()
                    .addDependencies(dependencies)
                    .resolve()
                    .withTransitivity()
                    .asFile();
/s,
org.jboss.shrinkwrap.resolver.api.maven.Maven.configureResolver() line: 47	
        return Resolvers.configure(ConfigurableMavenResolverSystem.class);

/s,
org.jboss.shrinkwrap.resolver.api.Resolvers.configure(java.lang.Class<CONFIGURABLERESOLVERSYSTEMTYPE>) line: 42	
        return ResolverSystemFactory.createFromUserView(clazz);
clazz=interface org.jboss.shrinkwrap.resolver.api.maven.ConfigurableMavenResolverSystem
/s,
org.jboss.shrinkwrap.resolver.api.ResolverSystemFactory.createFromUserView(java.lang.Class<RESOLVERSYSTEMTYPE>) line: 54	
        return createFromUserView(userViewClass, SecurityActions.getThreadContextClassLoader());
/s,
org.jboss.shrinkwrap.resolver.api.ResolverSystemFactory.createFromUserView(java.lang.Class<RESOLVERSYSTEMTYPE>, java.lang.ClassLoader) line: 76	

        // get SPI service loader
        final Object spiServiceLoader = new Invokable(cl, CLASS_NAME_SPISERVICELOADER)
                .invokeConstructor(new Class[] { ClassLoader.class }, new Object[] { cl });
/s,
org.jboss.shrinkwrap.resolver.api.Invokable.<init>(java.lang.ClassLoader, java.lang.String) line: 42	
        this.classType = loadClass(cl, className);
class org.jboss.shrinkwrap.resolver.spi.loader.SpiServiceLoader
/t,
/s,
org.jboss.shrinkwrap.resolver.api.Invokable.invokeConstructor(java.lang.Class<?>[], java.lang.Object[]) line: 130	
            Constructor<?> con = classType.getConstructor(parameterTypes);
public org.jboss.shrinkwrap.resolver.spi.loader.SpiServiceLoader(java.lang.ClassLoader)
            return con.newInstance(parameters);
/t,
org.jboss.shrinkwrap.resolver.api.ResolverSystemFactory.createFromUserView(java.lang.Class<RESOLVERSYSTEMTYPE>, java.lang.ClassLoader) line: 80	
        // get SPI service loader
        final Object spiServiceLoader = new Invokable(cl, CLASS_NAME_SPISERVICELOADER)
                .invokeConstructor(new Class[] { ClassLoader.class }, new Object[] { cl });
/d,
org.jboss.shrinkwrap.resolver.spi.loader.SpiServiceLoader@4659191b
        // return service loader implementation
        final Object serviceLoader = new Invokable(cl, CLASS_NAME_SPISERVICELOADER).invokeMethod(METHOD_NAME_ONLY_ONE,
                new Class[] { Class.class, Class.class }, spiServiceLoader,
                new Object[] { Invokable.loadClass(cl, CLASS_NAME_SPISERVICELOADER), spiServiceLoader.getClass() });
/s,
org.jboss.shrinkwrap.resolver.api.Invokable.invokeMethod(java.lang.String, java.lang.Class<?>[], java.lang.Object, java.lang.Object[]) line: 100	
            return findMethod(name, parameterTypes).invoke(instance, parameters);
/s,
/ een tijdje door 'step in',
org.jboss.shrinkwrap.resolver.spi.loader.SpiServiceLoader.onlyOne(java.lang.Class<T>, java.lang.Class<? extends T>) line: 100	
/=
    public <T> T onlyOne(Class<T> serviceClass, Class<? extends T> defaultImplementationClass) {
	
serviceClass	Class<T> (org.jboss.shrinkwrap.resolver.spi.loader.SpiServiceLoader) (id=2113)	
defaultImplementationClass	Class<T> (org.jboss.shrinkwrap.resolver.spi.loader.SpiServiceLoader) (id=2113)	

        Collection<T> services = all(serviceClass);
/s,
org.jboss.shrinkwrap.resolver.spi.loader.SpiServiceLoader.all(java.lang.Class<T>) line: 79	
        return createInstances(serviceClass, load(serviceClass));
/s,
org.jboss.shrinkwrap.resolver.spi.loader.SpiServiceLoader.load(java.lang.Class<T>) line: 138	
        String serviceFile = SERVICES + "/" + serviceClass.getName();
META-INF/services/org.jboss.shrinkwrap.resolver.spi.loader.SpiServiceLoader
        try {
            Enumeration<URL> enumeration = classLoader.getResources(serviceFile);
            while (enumeration.hasMoreElements()) {
/n,
        return providers;
[]
/t,
org.jboss.shrinkwrap.resolver.spi.loader.SpiServiceLoader.all(java.lang.Class<T>) line: 79	
        return createInstances(serviceClass, load(serviceClass));
/pd,
/s,
org.jboss.shrinkwrap.resolver.spi.loader.SpiServiceLoader.createInstances(java.lang.Class<T>, java.util.Set<java.lang.Class<? extends T>>) line: 198	
        Set<T> providerImpls = new LinkedHashSet<T>();
        for (Class<? extends T> serviceClass : providers) {
/n,
        return providerImpls;
/t,
org.jboss.shrinkwrap.resolver.spi.loader.SpiServiceLoader.all(java.lang.Class<T>) line: 79	
        return createInstances(serviceClass, load(serviceClass));
/d,
/t,
org.jboss.shrinkwrap.resolver.spi.loader.SpiServiceLoader.onlyOne(java.lang.Class<T>, java.lang.Class<? extends T>) line: 106	
       Collection<T> services = all(serviceClass);
/d,
[]
        if (services.size() == 0) {
            return createInstance(defaultImplementationClass);
/s,
org.jboss.shrinkwrap.resolver.spi.loader.SpiServiceLoader.createInstance(java.lang.Class<T>) line: 239	
                ctor = SecurityActions.getConstructor(implClass, new Class<?>[] {});
public org.jboss.shrinkwrap.resolver.spi.loader.SpiServiceLoader()
                instance = ctor.newInstance();
            // Return
            return implClass.cast(instance);
/t,
org.jboss.shrinkwrap.resolver.spi.loader.SpiServiceLoader.onlyOne(java.lang.Class<T>, java.lang.Class<? extends T>) line: 107	
            return createInstance(defaultImplementationClass);
/d,
/t,
org.jboss.shrinkwrap.resolver.api.Invokable.invokeMethod(java.lang.String, java.lang.Class<?>[], java.lang.Object, java.lang.Object[]) line: 100	
            return findMethod(name, parameterTypes).invoke(instance, parameters);
/d,
/t,
org.jboss.shrinkwrap.resolver.api.ResolverSystemFactory.createFromUserView(java.lang.Class<RESOLVERSYSTEMTYPE>, java.lang.ClassLoader) line: 85	
        // return service loader implementation
        final Object serviceLoader = new Invokable(cl, CLASS_NAME_SPISERVICELOADER).invokeMethod(METHOD_NAME_ONLY_ONE,
                new Class[] { Class.class, Class.class }, spiServiceLoader,
                new Object[] { Invokable.loadClass(cl, CLASS_NAME_SPISERVICELOADER), spiServiceLoader.getClass() });
/d,
        // get registry
        final Object serviceRegistry = new Invokable(cl, CLASS_NAME_SERVICEREGISTRY).invokeConstructor(
                new Class<?>[] { Invokable.loadClass(cl, CLASS_NAME_SERVICELOADER) },
                new Object[] { serviceLoader });
/s,
org.jboss.shrinkwrap.resolver.api.Invokable.invokeConstructor(java.lang.Class<?>[], java.lang.Object[]) line: 131	
            Constructor<?> con = classType.getConstructor(parameterTypes);
public org.jboss.shrinkwrap.resolver.spi.loader.ServiceRegistry(org.jboss.shrinkwrap.resolver.spi.loader.ServiceLoader)
            return con.newInstance(parameters);
/t,
org.jboss.shrinkwrap.resolver.api.ResolverSystemFactory.createFromUserView(java.lang.Class<RESOLVERSYSTEMTYPE>, java.lang.ClassLoader) line: 90	
        // get registry
        final Object serviceRegistry = new Invokable(cl, CLASS_NAME_SERVICEREGISTRY).invokeConstructor(
                new Class<?>[] { Invokable.loadClass(cl, CLASS_NAME_SERVICELOADER) },
                new Object[] { serviceLoader });
/d,

        // register itself
        new Invokable(cl, serviceRegistry.getClass()).invokeMethod(METHOD_NAME_REGISTER,
                new Class<?>[] { serviceRegistry.getClass() }, null, new Object[] { serviceRegistry });
/s,
org.jboss.shrinkwrap.resolver.spi.loader.ServiceRegistry.register(org.jboss.shrinkwrap.resolver.spi.loader.ServiceRegistry) line: 68	
        instance = registry;
/t,
org.jboss.shrinkwrap.resolver.api.ResolverSystemFactory.createFromUserView(java.lang.Class<RESOLVERSYSTEMTYPE>, java.lang.ClassLoader) line: 93	
        // register itself
        new Invokable(cl, serviceRegistry.getClass()).invokeMethod(METHOD_NAME_REGISTER,
                new Class<?>[] { serviceRegistry.getClass() }, null, new Object[] { serviceRegistry });
/d,
        Object userViewObject = new Invokable(cl, serviceRegistry.getClass()).invokeMethod(METHOD_NAME_ONLY_ONE,
                new Class<?>[] { Class.class }, serviceRegistry, new Object[] { userViewClass });
userViewClass=interface org.jboss.shrinkwrap.resolver.api.maven.ConfigurableMavenResolverSystem
/s,
org.jboss.shrinkwrap.resolver.spi.loader.ServiceRegistry.onlyOne(java.lang.Class<T>) line: 94	

        synchronized (cachedServiceInstances) {
{}
            if (cachedServiceInstances.containsKey(serviceClass)) {
/n,
            T service = serviceLoader.onlyOne(serviceClass);
/s,
org.jboss.shrinkwrap.resolver.spi.loader.SpiServiceLoader.onlyOne(java.lang.Class<T>) line: 85	

        Collection<T> services = all(serviceClass);
this	SpiServiceLoader  (id=2207)	
serviceClass	Class<T> (org.jboss.shrinkwrap.resolver.api.maven.ConfigurableMavenResolverSystem) (id=2079)	
/s,
org.jboss.shrinkwrap.resolver.spi.loader.SpiServiceLoader.all(java.lang.Class<T>) line: 79	
        return createInstances(serviceClass, load(serviceClass));
serviceClass=interface org.jboss.shrinkwrap.resolver.api.maven.ConfigurableMavenResolverSystem
/s,
org.jboss.shrinkwrap.resolver.spi.loader.SpiServiceLoader.load(java.lang.Class<T>) line: 145	
        String serviceFile = SERVICES + "/" + serviceClass.getName();
META-INF/services/org.jboss.shrinkwrap.resolver.api.maven.ConfigurableMavenResolverSystem

        LinkedHashSet<Class<? extends T>> providers = new LinkedHashSet<Class<? extends T>>();

        try {
            Enumeration<URL> enumeration = classLoader.getResources(serviceFile);
            while (enumeration.hasMoreElements()) {
                final URL url = enumeration.nextElement();
jar:file:/C:/Users/ervelden/.m2/repository/org/jboss/shrinkwrap/resolver/shrinkwrap-resolver-impl-maven/3.0.0-alpha-4/shrinkwrap-resolver-impl-maven-3.0.0-alpha-4.jar!/META-INF/services/org.jboss.shrinkwrap.resolver.api.maven.ConfigurableMavenResolverSystem
                final InputStream is = url.openStream();
                BufferedReader reader = null;

                try {
                    reader = new BufferedReader(new InputStreamReader(is, "UTF-8"));
                    String line = reader.readLine();
org.jboss.shrinkwrap.resolver.impl.maven.ConfigurableMavenResolverSystemImpl
                    while (null != line) {
                        line = skipCommentAndTrim(line);

                        if (line.length() > 0) {
                            try {
                                Class<? extends T> provider = classLoader.loadClass(line).asSubclass(serviceClass);
                                providers.add(provider);
                        line = reader.readLine();
null
        return providers;
/t,
org.jboss.shrinkwrap.resolver.spi.loader.SpiServiceLoader.all(java.lang.Class<T>) line: 79	
        return createInstances(serviceClass, load(serviceClass));
/pd,
/s,
org.jboss.shrinkwrap.resolver.spi.loader.SpiServiceLoader.createInstances(java.lang.Class<T>, java.util.Set<java.lang.Class<? extends T>>) line: 211	
        Set<T> providerImpls = new LinkedHashSet<T>();
        for (Class<? extends T> serviceClass : providers) {
            if (serviceClass.isEnum()) {
            } else {
                // add classes as service providers
                providerImpls.add(createInstance(serviceClass));
/s,
org.jboss.shrinkwrap.resolver.spi.loader.SpiServiceLoader.createInstance(java.lang.Class<T>) line: 247	
                ctor = SecurityActions.getConstructor(implClass, new Class<?>[] {});
public org.jboss.shrinkwrap.resolver.impl.maven.ConfigurableMavenResolverSystemImpl() throws java.lang.IllegalArgumentException        
                instance = ctor.newInstance();
org.jboss.shrinkwrap.resolver.impl.maven.ConfigurableMavenResolverSystemImpl@13b3d178
            // Return
            return implClass.cast(instance);
/t,
org.jboss.shrinkwrap.resolver.spi.loader.SpiServiceLoader.createInstances(java.lang.Class<T>, java.util.Set<java.lang.Class<? extends T>>) line: 212	
                providerImpls.add(createInstance(serviceClass));
/d,
        return providerImpls;
/t,
org.jboss.shrinkwrap.resolver.spi.loader.SpiServiceLoader.all(java.lang.Class<T>) line: 79	
        return createInstances(serviceClass, load(serviceClass));
/d,
/t,
org.jboss.shrinkwrap.resolver.spi.loader.SpiServiceLoader.onlyOne(java.lang.Class<T>) line: 87	
       Collection<T> services = all(serviceClass);
/d,
[org.jboss.shrinkwrap.resolver.impl.maven.ConfigurableMavenResolverSystemImpl@13b3d178]
        return services.iterator().next();
/t,
org.jboss.shrinkwrap.resolver.spi.loader.ServiceRegistry.onlyOne(java.lang.Class<T>) line: 103	
            T service = serviceLoader.onlyOne(serviceClass);
/d,
org.jboss.shrinkwrap.resolver.impl.maven.ConfigurableMavenResolverSystemImpl@13b3d178
            cachedServiceInstances.put(serviceClass, Collections.singleton(service));
{interface org.jboss.shrinkwrap.resolver.api.maven.ConfigurableMavenResolverSystem=[org.jboss.shrinkwrap.resolver.impl.maven.ConfigurableMavenResolverSystemImpl@13b3d178]}
            return service;
	   
			
			
            cachedServiceInstances.put(serviceClass, Collections.singleton(service));
            return service;
        }
    }
/t,
org.jboss.shrinkwrap.resolver.api.ResolverSystemFactory.createFromUserView(java.lang.Class<RESOLVERSYSTEMTYPE>, java.lang.ClassLoader) line: 96	
        Object userViewObject = new Invokable(cl, serviceRegistry.getClass()).invokeMethod(METHOD_NAME_ONLY_ONE,
                new Class<?>[] { Class.class }, serviceRegistry, new Object[] { userViewClass });
/d,
org.jboss.shrinkwrap.resolver.impl.maven.ConfigurableMavenResolverSystemImpl@13b3d178

        return userViewClass.cast(userViewObject);
/t,
org.jboss.shrinkwrap.resolver.api.ResolverSystemFactory.createFromUserView(java.lang.Class<RESOLVERSYSTEMTYPE>) line: 54	
        return createFromUserView(userViewClass, SecurityActions.getThreadContextClassLoader());
/d,
/t,
org.jboss.shrinkwrap.resolver.api.Resolvers.configure(java.lang.Class<CONFIGURABLERESOLVERSYSTEMTYPE>) line: 42	
        return ResolverSystemFactory.createFromUserView(clazz);
/d,
/t,
org.jboss.shrinkwrap.resolver.api.maven.Maven.configureResolver() line: 47	
        return Resolvers.configure(ConfigurableMavenResolverSystem.class);
/d,
/t,
org.arquillian.container.chameleon.controller.Resolver.resolve(java.io.File, org.jboss.shrinkwrap.resolver.api.maven.coordinate.MavenDependency[]) line: 43	
            files = Maven.configureResolver()
/d,
                    .addDependencies(dependencies)
                    .resolve()
                    .withTransitivity()
                    .asFile();
/s,
org.jboss.shrinkwrap.resolver.impl.maven.ConfigurableMavenResolverSystemImpl(org.jboss.shrinkwrap.resolver.impl.maven.MavenResolverSystemBaseImpl<UNCONFIGURABLERESOLVERSYSTEMTYPE,CONFIGURABLERESOLVERSYSTEMTYPE,EQUIPPEDRESOLVESTAGETYPE,UNEQUIPPEDRESOLVESTAGETYPE,STRATEGYSTAGETYPE,FORMATSTAGETYPE>).addDependencies(org.jboss.shrinkwrap.resolver.api.maven.coordinate.MavenDependency...) line: 195	
this	ConfigurableMavenResolverSystemImpl  (id=2332)	
	log	Logger  (id=2331)	
	delegate	PomlessResolveStageImpl  (id=2583)	
	sessionContainer	PomlessResolveStageImpl  (id=2583)

        return delegate.addDependencies(coordinates);	
/s,
org.jboss.shrinkwrap.resolver.impl.maven.PomlessResolveStageImpl(org.jboss.shrinkwrap.resolver.impl.maven.ResolveStageBaseImpl<RESOLVESTAGETYPE,STRATEGYSTAGETYPE,FORMATSTAGETYPE>).addDependencies(org.jboss.shrinkwrap.resolver.api.maven.coordinate.MavenDependency...) line: 117
	
            final MavenDependency resolved = this.resolveDependency(dependency);
/s,
org.jboss.shrinkwrap.resolver.impl.maven.PomlessResolveStageImpl(org.jboss.shrinkwrap.resolver.impl.maven.ResolveStageBaseImpl<RESOLVESTAGETYPE,STRATEGYSTAGETYPE,FORMATSTAGETYPE>).resolveDependency(org.jboss.shrinkwrap.resolver.api.maven.coordinate.MavenDependency) line: 189	

        final String resolvedVersion = this.resolveVersion(declared);
1.17
        final MavenCoordinate newCoordinate = MavenCoordinates.createCoordinate(declared.getGroupId(),
            declared.getArtifactId(), resolvedVersion, declared.getPackaging(), declared.getClassifier());
MavenCoordinate [org.yaml:snakeyaml:jar:1.17]
        final MavenDependency dependency = MavenDependencies.createDependency(newCoordinate, declared.getScope(),
            declared.isOptional(), declared.getExclusions().toArray(TYPESAFE_EXCLUSIONS_ARRAY));
MavenDependency [org.yaml:snakeyaml:jar:1.17:compile]
        return dependency;
/t,
org.jboss.shrinkwrap.resolver.impl.maven.PomlessResolveStageImpl(org.jboss.shrinkwrap.resolver.impl.maven.ResolveStageBaseImpl<RESOLVESTAGETYPE,STRATEGYSTAGETYPE,FORMATSTAGETYPE>).addDependencies(org.jboss.shrinkwrap.resolver.api.maven.coordinate.MavenDependency...) line: 125	

            final MavenDependency resolved = this.resolveDependency(dependency);
/d,
            this.session.getDependenciesForResolution().add(resolved);
this	PomlessResolveStageImpl  (id=2583)	
	session	MavenWorkingSessionImpl  (id=2609)	
		dependencies	ArrayList<E>  (id=2622)	
[MavenDependency [org.yaml:snakeyaml:jar:1.17:compile]]

        return this.covarientReturn();
/s,
org.jboss.shrinkwrap.resolver.impl.maven.PomlessResolveStageImpl(org.jboss.shrinkwrap.resolver.impl.maven.ResolveStageBaseImpl<RESOLVESTAGETYPE,STRATEGYSTAGETYPE,FORMATSTAGETYPE>).covarientReturn() line: 220	

        return this.getActualClass().cast(this);
this	PomlessResolveStageImpl  (id=2583)	
/t,
org.jboss.shrinkwrap.resolver.impl.maven.ConfigurableMavenResolverSystemImpl(org.jboss.shrinkwrap.resolver.impl.maven.MavenResolverSystemBaseImpl<UNCONFIGURABLERESOLVERSYSTEMTYPE,CONFIGURABLERESOLVERSYSTEMTYPE,EQUIPPEDRESOLVESTAGETYPE,UNEQUIPPEDRESOLVESTAGETYPE,STRATEGYSTAGETYPE,FORMATSTAGETYPE>).addDependencies(org.jboss.shrinkwrap.resolver.api.maven.coordinate.MavenDependency...) line: 195	

        return delegate.addDependencies(coordinates);
/d,
this	ConfigurableMavenResolverSystemImpl  (id=2332)	
	delegate	PomlessResolveStageImpl  (id=2583)	
		session	MavenWorkingSessionImpl  (id=2609)	
			dependencies	ArrayList<E>  (id=2622)	
[MavenDependency [org.yaml:snakeyaml:jar:1.17:compile]]
/t,
org.arquillian.container.chameleon.controller.Resolver.resolve(java.io.File, org.jboss.shrinkwrap.resolver.api.maven.coordinate.MavenDependency[]) line: 44	
            files = Maven.configureResolver()
                    .addDependencies(dependencies)
/d,
                    .resolve()
                    .withTransitivity()
                    .asFile();
/s,
org.jboss.shrinkwrap.resolver.impl.maven.PomlessResolveStageImpl(org.jboss.shrinkwrap.resolver.impl.maven.ResolveStageBaseImpl<RESOLVESTAGETYPE,STRATEGYSTAGETYPE,FORMATSTAGETYPE>).resolve() line: 68	
        return this.createStrategyStage();
/s,
org.jboss.shrinkwrap.resolver.impl.maven.PomlessResolveStageImpl.createStrategyStage() line: 61	
        return new MavenStrategyStageImpl(getMavenWorkingSession());
/t,
org.arquillian.container.chameleon.controller.Resolver.resolve(java.io.File, org.jboss.shrinkwrap.resolver.api.maven.coordinate.MavenDependency[]) line: 46	
           files = Maven.configureResolver()
                    .addDependencies(dependencies)
                    .resolve()
/d,
                    .withTransitivity()
                    .asFile();
/s,
org.jboss.shrinkwrap.resolver.impl.maven.MavenStrategyStageImpl(org.jboss.shrinkwrap.resolver.impl.maven.MavenStrategyStageBaseImpl<STRATEGYSTAGETYPE,FORMATSTAGETYPE>).withTransitivity() line: 52	
        return using(TransitiveStrategy.INSTANCE);
/s,
org.jboss.shrinkwrap.resolver.impl.maven.MavenStrategyStageImpl(org.jboss.shrinkwrap.resolver.impl.maven.MavenStrategyStageBaseImpl<STRATEGYSTAGETYPE,FORMATSTAGETYPE>).using(org.jboss.shrinkwrap.resolver.api.maven.strategy.MavenResolutionStrategy) line: 68	

        final Collection<MavenResolvedArtifact> resolvedArtifacts = session.resolveDependencies(strategy);
/s,
org.jboss.shrinkwrap.resolver.impl.maven.MavenWorkingSessionImpl.resolveDependencies(org.jboss.shrinkwrap.resolver.api.maven.strategy.MavenResolutionStrategy) line: 206	
/ TODO
/t,
org.jboss.shrinkwrap.resolver.impl.maven.MavenStrategyStageImpl(org.jboss.shrinkwrap.resolver.impl.maven.MavenStrategyStageBaseImpl<STRATEGYSTAGETYPE,FORMATSTAGETYPE>).using(org.jboss.shrinkwrap.resolver.api.maven.strategy.MavenResolutionStrategy) line: 68	

        final Collection<MavenResolvedArtifact> resolvedArtifacts = session.resolveDependencies(strategy);
/d,
[MavenResolvedArtifactImpl [mavenCoordinate=MavenCoordinate [org.yaml:snakeyaml:jar:1.17], resolvedVersion=1.17, snapshotVersion=false, extension=jar, dependencies=[]]]
        // Proceed to format stage
        return this.createFormatStage(resolvedArtifacts);
/s,
org.jboss.shrinkwrap.resolver.impl.maven.MavenStrategyStageImpl.createFormatStage(java.util.Collection<org.jboss.shrinkwrap.resolver.api.maven.MavenResolvedArtifact>) line: 57	
        return new MavenFormatStageImpl(filteredArtifacts);
/t,
org.arquillian.container.chameleon.controller.Resolver.resolve(java.io.File, org.jboss.shrinkwrap.resolver.api.maven.coordinate.MavenDependency[]) line: 47	
            files = Maven.configureResolver()
                    .addDependencies(dependencies)
                    .resolve()
                    .withTransitivity()
/d,
                    .asFile();
/s,
org.jboss.shrinkwrap.resolver.impl.maven.MavenFormatStageImpl.asFile() line: 51	
        return as(File.class);
/s,
org.jboss.shrinkwrap.resolver.impl.maven.MavenFormatStageImpl.as(java.lang.Class<RETURNTYPE>) line: 84	
        final FormatProcessor<? super MavenResolvedArtifact, RETURNTYPE> processor = FormatProcessors.find(
                MavenResolvedArtifact.class, returnTypeClass);
returnTypeClass=java.io.File
/s,
org.jboss.shrinkwrap.resolver.spi.format.FormatProcessors.find(java.lang.Class<RESOLVEDTYPE>, java.lang.Class<RETURNTYPE>) line: 43	

        ServiceRegistry registry = ServiceRegistry.getInstance();
        Collection<FormatProcessor> processors = registry.all(FormatProcessor.class);
processors	LinkedHashSet<E>  (id=3053)	
	[0]	FileFormatProcessor  (id=3056)	
	[1]	URLFormatProcessor  (id=3057)	
	[2]	InputStreamFormatProcessor  (id=3058)	
	[3]	MavenResolvedArtifactProcessor  (id=3059)	
	[4]	MavenCoordinateProcessor  (id=3060)	
	[5]	ArchiveFormatProcessor<ARCHIVETYPE>  (id=3076)	

        for (FormatProcessor processor : processors) {
            if (processor.handles(resolvedTypeClass) && processor.returns(returnTypeClass)) {
/j, processor=FileFormatProcessor
                return processor;
/t,
org.jboss.shrinkwrap.resolver.impl.maven.MavenFormatStageImpl.as(java.lang.Class<RETURNTYPE>) line: 88	
        final FormatProcessor<? super MavenResolvedArtifact, RETURNTYPE> processor = FormatProcessors.find(
                MavenResolvedArtifact.class, returnTypeClass);
/d,
FileFormatProcessor
        @SuppressWarnings("unchecked")
        final RETURNTYPE[] array = (RETURNTYPE[]) Array.newInstance(returnTypeClass, artifacts.size());
returnTypeClass=class java.io.File

        int i = 0;
        for (final MavenResolvedArtifact artifact : artifacts) {
MavenResolvedArtifactImpl [mavenCoordinate=MavenCoordinate [org.yaml:snakeyaml:jar:1.17], resolvedVersion=1.17, snapshotVersion=false, extension=jar, dependencies=[]]
            array[i++] = processor.process(artifact, returnTypeClass);
/s,
org.jboss.shrinkwrap.resolver.spi.format.FileFormatProcessor.process(org.jboss.shrinkwrap.resolver.api.ResolvedArtifact, java.lang.Class) line: 39	

        File file = artifact.asFile();
artifact	MavenResolvedArtifactImpl  (id=3016)	
	dependencies	MavenArtifactInfo[0]  (id=3108)	[]
	file	File  (id=3109)	C:\Users\ervelden\.m2\repository\org\yaml\snakeyaml\1.17\snakeyaml-1.17.jar
	mavenCoordinate	MavenCoordinateImpl  (id=3123)	/ groupID, artifactId, ...
	resolvedVersion	"1.17" (id=1935)	
	scopeType	ScopeType  (id=1980)	compile
        return file;
/t,
org.jboss.shrinkwrap.resolver.impl.maven.MavenFormatStageImpl.as(java.lang.Class<RETURNTYPE>) line: 94	
        for (final MavenResolvedArtifact artifact : artifacts) {
            array[i++] = processor.process(artifact, returnTypeClass);
/d,
        return array;
/t,
org.arquillian.container.chameleon.controller.Resolver.resolve(java.io.File, org.jboss.shrinkwrap.resolver.api.maven.coordinate.MavenDependency[]) line: 47	
            files = Maven.configureResolver()
                    .addDependencies(dependencies)
                    .resolve()
                    .withTransitivity()
                    .asFile();
/d,
            writeCache(getCacheFile(cacheFolder, hash), files);
/s,
org.arquillian.container.chameleon.controller.Resolver.writeCache(java.io.File, java.io.File[]) line: 55	
/=
    private static void writeCache(File cacheFile, File[] files) {
cacheFile=target\server\cache\e8baa3b1e14f5c565f89fa773cb3c450fac2dbab4dcec019f6f458c4a2600ff2.cache
files=[C:\Users\ervelden\.m2\repository\org\yaml\snakeyaml\1.17\snakeyaml-1.17.jar]

            bw = new BufferedWriter(new FileWriter(cacheFile));
            for (File file : files) {
                bw.write(file.getAbsolutePath());
                bw.newLine();
            }
/t,
org.arquillian.container.chameleon.controller.Resolver.resolve(java.io.File, org.jboss.shrinkwrap.resolver.api.maven.coordinate.MavenDependency[]) line: 51	
            writeCache(getCacheFile(cacheFolder, hash), files);
/d,
        }
        return files;			
/t,
org.arquillian.container.chameleon.ContainerLoader.load(java.io.InputStream, java.io.File) line: 39	
        File[] archives = Resolver.resolve(cacheFolder, mavenDependencies);
/d,
[C:\Users\ervelden\.m2\repository\org\yaml\snakeyaml\1.17\snakeyaml-1.17.jar]

        ClassLoader classloader = new URLClassLoader(Utils.toURLs(archives), null);
        return loadContainers(classloader, containers);
/s,
org.arquillian.container.chameleon.ContainerLoader(org.arquillian.container.chameleon.Loader).loadContainers(java.lang.ClassLoader, java.io.InputStream) line: 37	
        Class<?> constructorClass = classloader.loadClass("org.yaml.snakeyaml.constructor.Constructor");
        Class<?> baseConstructorClass = classloader.loadClass("org.yaml.snakeyaml.constructor.BaseConstructor");

        Class<?> typeDescriptionClass = classloader.loadClass("org.yaml.snakeyaml.TypeDescription");
        Class<?> yamlClass = classloader.loadClass("org.yaml.snakeyaml.Yaml");
        Class<?> beanAccessClass = classloader.loadClass("org.yaml.snakeyaml.introspector.BeanAccess");
        Constructor<?> typeDescriptionConst = typeDescriptionClass.getConstructor(new Class[]{Class.class, String.class});

        Method addTypeDescription = constructorClass.getMethod("addTypeDescription", new Class<?>[]{typeDescriptionClass});

        Method setBeanAccess = yamlClass.getDeclaredMethod("setBeanAccess", new Class<?>[]{beanAccessClass});
        Method loadAs = yamlClass.getDeclaredMethod("loadAs", new Class<?>[]{InputStream.class, Class.class});

        Object constructor = constructorClass.newInstance();

        // Pre register type to avoid Yaml trying Class.forName on it's own classloader with our class.
        addTypeDescription.invoke(constructor, typeDescriptionConst.newInstance(Container[].class, "tag:yaml.org,2002:" + Container[].class.getName()));

/ we doen,
C:\Users\ervelden\eclipse\workspace-jbosstools-jee-oxygen\arquillian-forge3>move d:\Users\ervelden\Downloads\snakeyaml-1.17-sour
ces.jar c:\Users\ervelden\.m2\repository\org\yaml\snakeyaml\1.17
        1 file(s) moved.
/ eclipse pakt hem niet vanzelf op,
/ TODO
/ add de jar zelf aan de remote debug config 'arquillian-forge3-remote'
/ OK,
/s,
org.yaml.snakeyaml.TypeDescription.<init>(java.lang.Class<? extends java.lang.Object>, java.lang.String) line: 43	
        this(clazz, new Tag(tag));
/clazz	Class<T> (org.arquillian.container.chameleon.spi.model.Container[]) (id=3239)	
tag	"tag:yaml.org,2002:[Lorg.arquillian.container.chameleon.spi.model.Container;" (id=3241)	
/s,
org.yaml.snakeyaml.nodes.Tag.<init>(java.lang.String) line: 72	
        this.value = UriEncoder.encode(tag);
        this.secondary = !tag.startsWith(PREFIX); PREFIX=tag:yaml.org,2002:
/t,
/s,
org.yaml.snakeyaml.TypeDescription.<init>(java.lang.Class<? extends java.lang.Object>, org.yaml.snakeyaml.nodes.Tag) line: 39	
        this.type = clazz;
        this.tag = tag;
clazz	Class<T> (org.arquillian.container.chameleon.spi.model.Container[]) (id=3239)	
tag	"tag:yaml.org,2002:[Lorg.arquillian.container.chameleon.spi.model.Container;" (id=3241)	

        listProperties = new HashMap<String, Class<? extends Object>>();
        keyProperties = new HashMap<String, Class<? extends Object>>();
        valueProperties = new HashMap<String, Class<? extends Object>>();
/t,
org.arquillian.container.chameleon.ContainerLoader(org.arquillian.container.chameleon.Loader).loadContainers(java.lang.ClassLoader, java.io.InputStream) line: 37	
        // Pre register type to avoid Yaml trying Class.forName on it's own classloader with our class.
        addTypeDescription.invoke(constructor, typeDescriptionConst.newInstance(Container[].class, "tag:yaml.org,2002:" + Container[].class.getName()));
/pd,
/s,
org.yaml.snakeyaml.constructor.Constructor.addTypeDescription(org.yaml.snakeyaml.TypeDescription) line: 128	

        Tag tag = definition.getTag();
tag:yaml.org,2002:[Lorg.arquillian.container.chameleon.spi.model.Container;	
	
        typeTags.put(tag, definition.getType());
{null=class java.lang.Object, tag:yaml.org,2002:[Lorg.arquillian.container.chameleon.spi.model.Container;=class [Lorg.arquillian.container.chameleon.spi.model.Container;}

        return typeDefinitions.put(definition.getType(), definition);
/t,
org.arquillian.container.chameleon.ContainerLoader(org.arquillian.container.chameleon.Loader).loadContainers(java.lang.ClassLoader, java.io.InputStream) line: 39	
        // Pre register type to avoid Yaml trying Class.forName on it's own classloader with our class.
        addTypeDescription.invoke(constructor, typeDescriptionConst.newInstance(Container[].class, "tag:yaml.org,2002:" + Container[].class.getName()));
/d,
        Object yaml = yamlClass.getConstructor(new Class[]{baseConstructorClass}).newInstance(new Object[]{constructor});
Yaml:1624351535

        Object fieldBeanAccess = null;
        for (Object beanAccess : beanAccessClass.getEnumConstants()) { [ DEFAULT ,FIELD , PROPERTY]
            if ("FIELD".equals(beanAccess.toString())) {
                fieldBeanAccess = beanAccess;
                break;
            }
        setBeanAccess.invoke(yaml, fieldBeanAccess);

/ Intermezzo

C:\Users\ervelden\java\arquillian-container-chameleon\arquillian-chameleon-container-model\src\main\resources\chameleon\def
ault\containers.yaml
/ we vonden NIET in eclipse TODO (configure package explorer), maar wel in file system, en WH zit in een jar TODO
...
- name: WildFly
  versionExpression: [10.*|11.*]
  adapters:
    - type: remote
      coordinates: org.wildfly.arquillian:wildfly-arquillian-container-remote:2.1.0.F
      adapterClass: org.jboss.as.arquillian.container.remote.RemoteDeployableContaine
    - type: managed
      coordinates: org.wildfly.arquillian:wildfly-arquillian-container-managed:2.1.0.
      adapterClass: org.jboss.as.arquillian.container.managed.ManagedDeployableContai
      configuration: *WF_CONFIG
    - type: embedded
      coordinates: org.wildfly.arquillian:wildfly-arquillian-container-embedded:2.1.0
      adapterClass: org.jboss.as.arquillian.container.embedded.EmbeddedDeployableCont
      configuration: *WF_EMBEDD_CONFIG
  defaultType: managed
  dist: *WF_DIST
  exclude: &WF10_EXCLUDE
    - org.jboss.arquillian.test:*
    - org.jboss.arquillian.testenricher:*
    - org.jboss.arquillian.container:*
    - org.jboss.arquillian.core:*
    - org.jboss.arquillian.config:*
    - org.jboss.arquillian.protocol:*
    - org.jboss.shrinkwrap.api:*
    - org.jboss.shrinkwrap:*
    - org.jboss.shrinkwrap.descriptors:*
    - org.jboss.shrinkwrap.resolver:*
    - "*:wildfly-arquillian-testenricher-msc"


/ Einde Intermezzo

        return (Container[]) loadAs.invoke(yaml, new Object[]{containers, Container[].class});
containers=sun.net.www.protocol.jar.JarURLConnection$JarURLInputStream@60dce7ea
/s,
org.yaml.snakeyaml.Yaml.loadAs(java.io.InputStream, java.lang.Class<T>) line: 444	
        return (T) loadFromReader(new StreamReader(new UnicodeReader(input)), type);
/s,
org.yaml.snakeyaml.reader.UnicodeReader.<init>(java.io.InputStream) line: 68	
        internalIn = new PushbackInputStream(in, BOM_SIZE);
/t,
/s,
org.yaml.snakeyaml.reader.StreamReader.<init>(java.io.Reader) line: 37	
        this.name = "'reader'";
        this.buffer = "";
        this.stream = reader;
        this.eof = false;
        this.data = new char[1024];
        this.update();
/s,
org.yaml.snakeyaml.reader.StreamReader.update() line: 201	
        if (!this.eof) {
            this.buffer = buffer.substring(this.pointer);
            this.pointer = 0;
            try {
                int converted = this.stream.read(data);	 stream -> data
                if (converted > 0) {
                    /*
                     * Let's create StringBuilder manually. Anyway str1 + str2
                     * generates new StringBuilder(str1).append(str2).toSting()
                     * Giving correct capacity to the constructor prevents
                     * unnecessary operations in appends.
                     */
                    checkPrintable(data, 0, converted);
                    this.buffer = new StringBuilder(buffer.length() + converted).append(buffer)
                            .append(data, 0, converted).toString();
this.buffer=
- name: JBoss EAP
  versionExpression: 7.*
  adapters:
    - type: remote
      coordinates: org.wildfly.arquillian:wildfly-arquillian-container-remote:2.0.1.Final
      adapterClass: org.jboss.as.arquillian.container.remote.RemoteDeployableContainer
    - type: managed
      coordinates: org.wildfly.arquillian:wildfly-arquillian-container-managed:2.0.1.Final
      adapterClass: org.jboss.as.arquillian.container.managed.ManagedDeployableContainer
      configuration: &EAP7_CONFIG
        jbossHome: ${dist}
    - type: embedded
      coordinates: org.wildfly.arquillian:wildfly-arquillian-container-embedded:2.0.1.Final
      adapterClass: org.jboss.as.arquillian.container.embedded.EmbeddedDeployableContainer
      configuration: *EAP7_CONFIG
  defaultType: managed
  dist: &EAP7_DIST
    coordinates: org.jboss.as:jboss-as-dist:zip:${version}
  exclude: &EAP7_EXCLUDE
    - org.jboss.arquillian.test:*
    - org.jboss.arquillian.testenricher:*
    - org.jboss.arquillian.container:*
    - org.jboss.arquillian.core:*
/t,
org.yaml.snakeyaml.Yaml.loadFromReader(org.yaml.snakeyaml.reader.StreamReader, java.lang.Class<?>) line: 448	
        return (T) loadFromReader(new StreamReader(new UnicodeReader(input)), type);
/ pd,
/s,
    private Object loadFromReader(StreamReader sreader, Class<?> type) {
        Composer composer = new Composer(new ParserImpl(sreader), resolver);
/s,
org.yaml.snakeyaml.parser.ParserImpl.<init>(org.yaml.snakeyaml.reader.StreamReader) line: 131	
        this(new ScannerImpl(reader));
/s,
org.yaml.snakeyaml.scanner.ScannerImpl.<init>(org.yaml.snakeyaml.reader.StreamReader) line: 218	
        this.reader = reader;
        this.tokens = new ArrayList<Token>(100);
        this.indents = new ArrayStack<Integer>(10);
        // The order in possibleSimpleKeys is kept for nextPossibleSimpleKey()
        this.possibleSimpleKeys = new LinkedHashMap<Integer, SimpleKey>();
        fetchStreamStart();// Add the STREAM-START token.
/s,
    /**
     * We always add STREAM-START as the first token and STREAM-END as the last
     * token.
     */
    private void fetchStreamStart() {
        // Read the token.
        Mark mark = reader.getMark();

        // Add STREAM-START.
        Token token = new StreamStartToken(mark, mark);
        this.tokens.add(token);
/t,
/s,
org.yaml.snakeyaml.parser.ParserImpl.<init>(org.yaml.snakeyaml.scanner.Scanner) line: 138	
        this.scanner = scanner;
        currentEvent = null;
        directives = new VersionTagsTuple(null, new HashMap<String, String>(DEFAULT_TAGS));
        states = new ArrayStack<Production>(100);
        marks = new ArrayStack<Mark>(10);
        state = new ParseStreamStart();
/t,
org.yaml.snakeyaml.Yaml.loadFromReader(org.yaml.snakeyaml.reader.StreamReader, java.lang.Class<?>) line: 449	
        Composer composer = new Composer(new ParserImpl(sreader), resolver);
/d,
        constructor.setComposer(composer);
        return constructor.getSingleData(type);
/ TODO
/t,
org.yaml.snakeyaml.Yaml.loadAs(java.io.InputStream, java.lang.Class<T>) line: 444	
        return (T) loadFromReader(new StreamReader(new UnicodeReader(input)), type);
/b, we hebben op deze een b set,
/d,
/t,
org.arquillian.container.chameleon.ContainerLoader(org.arquillian.container.chameleon.Loader).loadContainers(java.lang.ClassLoader, java.io.InputStream) line: 51	
        return (Container[]) loadAs.invoke(yaml, new Object[]{containers, Container[].class});
/d,
/t,
org.arquillian.container.chameleon.ContainerLoader.load(java.io.InputStream, java.io.File) line: 40	
        return loadContainers(classloader, containers);
/d,
/t,
org.arquillian.container.chameleon.ChameleonConfiguration.getConfiguredAdapter() line: 119	
       Container[] containers = new ContainerLoader().load(getChameleonContainerConfigurationFileStream(), getChameleonResolveCacheFolder());
containers	Container[20]  (id=3534)	
	[0]	Container  (id=3592)	
	[1]	Container  (id=3632)	
	[2]	Container  (id=3689)	
	[3]	Container  (id=3735)	
	[4]	Container  (id=3771)	
	[5]	Container  (id=3799)	
	[6]	Container  (id=3856)	
	[7]	Container  (id=3902)	
	[8]	Container  (id=3968)	
	[9]	Container  (id=4014)	
	[10]	Container  (id=4063)	
	[11]	Container  (id=4101)	
	[12]	Container  (id=4147)	
		adapters	Adapter[3]  (id=4107)	
			[0]	Adapter  (id=4114)	
				adapterClass	"org.jboss.as.arquillian.container.remote.RemoteDeployableContainer" (id=4113)	
				configuration	null	
				coordinates	"org.wildfly.arquillian:wildfly-arquillian-container-remote:2.0.1.Final" (id=4111)	
				dependencies	null	
				requireDist	true	
				type	"remote" (id=4109)	
			[1]	Adapter  (id=4122)	
				adapterClass	"org.jboss.as.arquillian.container.managed.ManagedDeployableContainer" (id=4120)	
				configuration	LinkedHashMap<K,V>  (id=3923)	
				coordinates	"org.wildfly.arquillian:wildfly-arquillian-container-managed:2.0.1.Final" (id=4118)	
				dependencies	null	
				requireDist	true	
				type	"managed" (id=4116)	
			[2]	Adapter  (id=4130)	
				adapterClass	"org.jboss.as.arquillian.container.embedded.EmbeddedDeployableContainer" (id=4128)	
				configuration	LinkedHashMap<K,V>  (id=3934)	
				coordinates	"org.wildfly.arquillian:wildfly-arquillian-container-embedded:2.0.1.Final" (id=4126)	
				dependencies	null	
				requireDist	true	
				type	"embedded" (id=4124)	
		defaultProtocol	null	
		defaultType	"managed" (id=4132)	
		dist	Dist  (id=3995)	
		exclude	String[11]  (id=4135)	
		name	"WildFly" (id=4103)	
		versionExpression	"10.*" (id=4105)	
	[13]	Container  (id=4185)	
		adapters	Adapter[2]  (id=4153)	
			[0]	Adapter  (id=4161)	
				adapterClass	"org.jboss.as.arquillian.container.domain.managed.ManagedDomainDeployableContainer" (id=4159)	
				configuration	LinkedHashMap<K,V>  (id=3923)	
				coordinates	"org.wildfly.arquillian:wildfly-arquillian-container-domain-managed:2.0.1.Final" (id=4157)	
				dependencies	null	
				requireDist	true	
				type	"managed" (id=4155)	
			[1]	Adapter  (id=4168)	
				adapterClass	"org.jboss.as.arquillian.container.domain.remote.RemoteDomainDeployableContainer" (id=4167)	
				configuration	null	
				coordinates	"org.wildfly.arquillian:wildfly-arquillian-container-domain-remote:2.0.1.Final" (id=4165)	
				dependencies	null	
				requireDist	true	
				type	"remote" (id=4163)	
		defaultProtocol	null	
		defaultType	"managed" (id=4170)	
		dist	Dist  (id=3995)	
		exclude	String[11]  (id=4173)	
		name	"WildFly Domain" (id=4149)	
		versionExpression	"10.*" (id=4151)	
	[14]	Container  (id=4231)	
	[15]	Container  (id=4241)	
	[16]	Container  (id=4266)	
	[17]	Container  (id=4299)	
	[18]	Container  (id=4327)	
	[19]	Container  (id=4352)	

	        for (Container container : containers) {
            ContainerAdapter adapter = container.matches(target); / target="wildfly:10.1.0.Final:Managed"
/s,
org.arquillian.container.chameleon.spi.model.Container.matches(org.arquillian.container.chameleon.spi.model.Target) line: 35	
target=wildfly:10.1.0.Final:Managed
        if (target.getServer().equalsIgnoreCase(name)) {
/n,
this	Container  (id=3592)	
	name	"JBoss EAP" (id=3540)	
        return null;
/t,
        for (Container container : containers) {
            ContainerAdapter adapter = container.matches(target);
            if (adapter != null) {
/n,
/ volgende,
...
/s,
org.arquillian.container.chameleon.spi.model.Container.matches(org.arquillian.container.chameleon.spi.model.Target) line: 35
this	Container  (id=4147)	
	adapters	Adapter[3]  (id=4107)	
		[0]	Adapter  (id=4114)	
			adapterClass	"org.jboss.as.arquillian.container.remote.RemoteDeployableContainer" (id=4113)	
			configuration	null	
			coordinates	"org.wildfly.arquillian:wildfly-arquillian-container-remote:2.0.1.Final" (id=4111)	
			dependencies	null	
			requireDist	true	
			type	"remote" (id=4109)	
		[1]	Adapter  (id=4122)	
			adapterClass	"org.jboss.as.arquillian.container.managed.ManagedDeployableContainer" (id=4120)	
			configuration	LinkedHashMap<K,V>  (id=3923)	
			coordinates	"org.wildfly.arquillian:wildfly-arquillian-container-managed:2.0.1.Final" (id=4118)	
			dependencies	null	
			requireDist	true	
			type	"managed" (id=4116)	
		[2]	Adapter  (id=4130)	
			adapterClass	"org.jboss.as.arquillian.container.embedded.EmbeddedDeployableContainer" (id=4128)	
			configuration	LinkedHashMap<K,V>  (id=3934)	
			coordinates	"org.wildfly.arquillian:wildfly-arquillian-container-embedded:2.0.1.Final" (id=4126)	
			dependencies	null	
			requireDist	true	
			type	"embedded" (id=4124)		
	defaultProtocol	null	
	defaultType	"managed" (id=4132)	
	dist	Dist  (id=3995)	
	exclude	String[11]  (id=4135)	
	name	"WildFly" (id=4103)	
	versionExpression	"10.*" (id=4105)	
target	Target  (id=1840)	
	server	"wildfly" (id=1842)	
	type	Target$Type  (id=926)	
		$VALUES	Target$Type[4]  (id=929)	
		Default	Target$Type  (id=931)	
		Embedded	Target$Type  (id=932)	
		Managed	Target$Type  (id=926)	
		Remote	Target$Type  (id=922)	
		name	"Managed" (id=927)	
		ordinal	1	

        if (target.getServer().equalsIgnoreCase(name)) {
            if (target.getVersion().matches(versionExpression)) {
                Target.Type definedType = target.getType();
                if (target.getType() == Target.Type.Default) {
/n,
managed != default,
                for (Adapter adapter : adapters) {
                    if (adapter.isType(definedType)) {
/j,
adapter	Adapter  (id=4122)	
	adapterClass	"org.jboss.as.arquillian.container.managed.ManagedDeployableContainer" (id=4120)	
	configuration	LinkedHashMap<K,V>  (id=3923)	
	coordinates	"org.wildfly.arquillian:wildfly-arquillian-container-managed:2.0.1.Final" (id=4118)	
	dependencies	null	
	requireDist	true	
	type	"managed" (id=4116)	

                        return new ContainerAdapter(
                                target.getVersion(),
                                definedType,
                                adapter,
                                dist,			/ this.dist
                                exclude,		/ this.exclude
                                defaultProtocol);	/ this.defaultProtocol
                    }
                }
this	Container  (id=4147)	
	defaultProtocol	null	
	dist	Dist  (id=3995)	
		coordinates	"org.wildfly:wildfly-dist:zip:${version}" (id=3994)	
	exclude	String[11]  (id=4135)[org.jboss.arquillian.test:*, org.jboss.arquillian.testenricher:*, org.jboss.arquillian.container:*, org.jboss.arquillian.core:*, org.jboss.arquillian.config:*, org.jboss.arquillian.protocol:*, org.jboss.shrinkwrap.api:*, org.jboss.shrinkwrap:*, org.jboss.shrinkwrap.descriptors:*, org.jboss.shrinkwrap.resolver:*, *:wildfly-arquillian-testenricher-msc]
/s,
org.arquillian.container.chameleon.spi.model.ContainerAdapter.<init>(java.lang.String, org.arquillian.container.chameleon.spi.model.Target$Type, org.arquillian.container.chameleon.spi.model.Adapter, org.arquillian.container.chameleon.spi.model.Dist, java.lang.String[], java.lang.String) line: 35	
        this.version = version;
        this.targetType = targetType;
        this.adapter = adapter;
        this.dist = dist;
        this.gavExcludeExpression = gavExcludeExpression;
        this.defaultProtocol = defaultProtocol;
/t,
org.arquillian.container.chameleon.ChameleonConfiguration.getConfiguredAdapter() line: 122	
        for (Container container : containers) {
            ContainerAdapter adapter = container.matches(target);
/d,
            if (adapter != null) {
                return adapter;
/t,
org.arquillian.container.chameleon.ChameleonContainer.init(org.arquillian.container.chameleon.ChameleonConfiguration, org.jboss.arquillian.config.descriptor.api.ContainerDef) line: 82	
            ContainerAdapter adapter = configuration.getConfiguredAdapter();
/d,
            this.target = new TargetController(
                    adapter,
                    injectorInst.get(),
                    configuration.getChameleonResolveCacheFolder());
/s,
org.jboss.arquillian.core.impl.InstanceImpl<T>.get() line: 61	
      return manager.resolve(type);

this	InstanceImpl<T>  (id=137)
	type=interface org.jboss.arquillian.core.api.Injector
	manager	ManagerImpl  (id=45)	
		contexts	ArrayList<E>  (id=6560)	
			[0]	ApplicationContextImpl  (id=6570)	
			[1]	ContainerContextImpl  (id=6571)	
			[2]	DeploymentContextImpl  (id=6572)	
			[3]	ClassContextImpl  (id=6573)	
			[4]	TestContextImpl  (id=6574)	
			[5]	SuiteContextImpl  (id=6575)	
		extensions	ArrayList<E>  (id=6561)	
			[0]	ExtensionImpl  (id=6594)	
				eventPoints	ArrayList<E>  (id=6836)	
				injectionPoints	ArrayList<E>  (id=6837)	
				observers	ArrayList<E>  (id=6838)	
				target	LoadableExtensionLoader  (id=39)	
			[1]	ExtensionImpl  (id=6595)	
				eventPoints	ArrayList<E>  (id=6830)	
				injectionPoints	ArrayList<E>  (id=6831)	
				observers	ArrayList<E>  (id=6832)	
				target	ClientBeforeAfterLifecycleEventExecuter  (id=6833)	
			[2]	ExtensionImpl  (id=6596)	
				eventPoints	ArrayList<E>  (id=6824)	
				injectionPoints	ArrayList<E>  (id=6825)	
				observers	ArrayList<E>  (id=6826)	
				target	RulesEnricher  (id=6827)	
			[3]	ExtensionImpl  (id=6597)	
				eventPoints	ArrayList<E>  (id=6670)	
				injectionPoints	ArrayList<E>  (id=6671)	
				observers	ArrayList<E>  (id=6672)	
				target	ConfigurationRegistrar  (id=6673)	
			[4]	ExtensionImpl  (id=6601)	
				eventPoints	ArrayList<E>  (id=6664)	
				injectionPoints	ArrayList<E>  (id=6665)	
				observers	ArrayList<E>  (id=6666)	
				target	ContainerRestarter  (id=6667)	
			[5]	ExtensionImpl  (id=6602)	
				eventPoints	ArrayList<E>  (id=6702)	
				injectionPoints	ArrayList<E>  (id=6703)	
				observers	ArrayList<E>  (id=6704)	
				target	InitiateContainer  (id=53)	
			[6]	ExtensionImpl  (id=6603)	
				eventPoints	ArrayList<E>  (id=6696)	
				injectionPoints	ArrayList<E>  (id=6697)	
				observers	ArrayList<E>  (id=6698)	
				target	LocalTestExecuter  (id=6699)	
			[7]	ExtensionImpl  (id=6605)	
				eventPoints	ArrayList<E>  (id=6690)	
				injectionPoints	ArrayList<E>  (id=6691)	
				observers	ArrayList<E>  (id=6692)	
				target	DeploymentGenerator  (id=6693)	
			[8]	ExtensionImpl  (id=6606)	
				eventPoints	ArrayList<E>  (id=6684)	
				injectionPoints	ArrayList<E>  (id=6685)	
				observers	ArrayList<E>  (id=6686)	
				target	ProtocolRegistryCreator  (id=6687)	
			[9]	ExtensionImpl  (id=6607)	
				eventPoints	ArrayList<E>  (id=6678)	
				injectionPoints	ArrayList<E>  (id=6679)	
				observers	ArrayList<E>  (id=6680)	
				target	DeploymentCommandObserver  (id=6681)	
			[10]	ExtensionImpl  (id=6609)	
				eventPoints	ArrayList<E>  (id=6645)	
				injectionPoints	ArrayList<E>  (id=6646)	
				observers	ArrayList<E>  (id=6647)	
				target	ClientContainerControllerCreator  (id=6648)	
			[11]	ExtensionImpl  (id=6610)	
				eventPoints	ArrayList<E>  (id=6651)	
				injectionPoints	ArrayList<E>  (id=6652)	
				observers	ArrayList<E>  (id=6653)	
				target	RemoteTestExecuter  (id=6654)	
			[12]	ExtensionImpl  (id=6611)	
				eventPoints	ArrayList<E>  (id=6657)	
				injectionPoints	ArrayList<E>  (id=6658)	
				observers	ArrayList<E>  (id=6659)	
				target	ContainerLifecycleController  (id=61)	
			[13]	ExtensionImpl  (id=6613)	
				eventPoints	ArrayList<E>  (id=6810)	
				injectionPoints	ArrayList<E>  (id=6811)	
				observers	ArrayList<E>  (id=6812)	
				target	TestContextHandler  (id=74)	
			[14]	ExtensionImpl  (id=6614)	
				eventPoints	ArrayList<E>  (id=6804)	
				injectionPoints	ArrayList<E>  (id=6805)	
				observers	ArrayList<E>  (id=6806)	
				target	ClientTestExecuter  (id=6807)	
			[15]	ExtensionImpl  (id=6615)	
				eventPoints	ArrayList<E>  (id=6798)	
				injectionPoints	ArrayList<E>  (id=6799)	
				observers	ArrayList<E>  (id=6800)	
				target	ContainerRegistryCreator  (id=6801)	
			[16]	ExtensionImpl  (id=6617)	
				eventPoints	ArrayList<E>  (id=6792)	
				injectionPoints	ArrayList<E>  (id=6793)	
				observers	ArrayList<E>  (id=6794)	
				target	ContainerDeploymentContextHandler  (id=6795)	
			[17]	ExtensionImpl  (id=6618)	
				eventPoints	ArrayList<E>  (id=6788)	
				injectionPoints	ArrayList<E>  (id=6789)	
				observers	ArrayList<E>  (id=6790)	
				target	ContainerEventController  (id=68)	
			[18]	ExtensionImpl  (id=6619)	
				eventPoints	ArrayList<E>  (id=6782)	
				injectionPoints	ArrayList<E>  (id=6783)	
				observers	ArrayList<E>  (id=6784)	
				target	CreationalContextDestroyer  (id=6785)	
			[19]	ExtensionImpl  (id=6621)	
				eventPoints	ArrayList<E>  (id=6776)	
				injectionPoints	ArrayList<E>  (id=6777)	
				observers	ArrayList<E>  (id=6778)	
				target	ArchiveDeploymentToolingExporter  (id=6779)	
			[20]	ExtensionImpl  (id=6622)	
				eventPoints	ArrayList<E>  (id=6769)	
				injectionPoints	ArrayList<E>  (id=6770)	
				observers	ArrayList<E>  (id=6771)	
				target	ClientTestInstanceEnricher  (id=6772)	
			[21]	ExtensionImpl  (id=6623)	
				eventPoints	ArrayList<E>  (id=6763)	
				injectionPoints	ArrayList<E>  (id=6764)	
				observers	ArrayList<E>  (id=6765)	
				target	UpdateTestResultBeforeAfter  (id=6766)	
			[22]	ExtensionImpl  (id=6625)	
				eventPoints	ArrayList<E>  (id=6757)	
				injectionPoints	ArrayList<E>  (id=6758)	
				observers	ArrayList<E>  (id=6759)	
				target	ClientDeployerCreator  (id=6760)	
			[23]	ExtensionImpl  (id=6626)	
				eventPoints	ArrayList<E>  (id=6753)	
				injectionPoints	ArrayList<E>  (id=6754)	
				observers	ArrayList<E>  (id=6755)	
				target	DeploymentExceptionHandler  (id=6841)	
			[24]	ExtensionImpl  (id=6627)	
				eventPoints	ArrayList<E>  (id=6750)	
				injectionPoints	ArrayList<E>  (id=6751)	
				observers	ArrayList<E>  (id=6844)	
				target	ContainerDeployController  (id=6845)	
			[25]	ExtensionImpl  (id=6629)	
				eventPoints	ArrayList<E>  (id=6744)	
				injectionPoints	ArrayList<E>  (id=6745)	
				observers	ArrayList<E>  (id=6746)	
				target	RemoteResourceCommandObserver  (id=6747)	
			[26]	ExtensionImpl  (id=6630)	
				eventPoints	ArrayList<E>  (id=6639)	
				injectionPoints	ArrayList<E>  (id=6640)	
				observers	ArrayList<E>  (id=6641)	
				target	ArchiveDeploymentExporter  (id=6642)	
			[27]	ExtensionImpl  (id=6631)	
				eventPoints	ArrayList<E>  (id=6633)	
				injectionPoints	ArrayList<E>  (id=6634)	
				observers	ArrayList<E>  (id=6635)	
				target	ContainerCommandObserver  (id=6636)	

/s,
org.jboss.arquillian.core.impl.ManagerImpl.resolve(java.lang.Class<T>) line: 192	
      List<Context> activeContexts = resolveActiveContexts();
activeContexts	ArrayList<E>  (id=7098)	
	[0]	ApplicationContextImpl  (id=6570)	
	[1]	SuiteContextImpl  (id=6575)
	
      for(int i = activeContexts.size() -1; i >= 0; i--)
      {
         Context context = activeContexts.get(i);
         T object = context.getObjectStore().get(type);
/s,
org.jboss.arquillian.test.impl.context.SuiteContextImpl(org.jboss.arquillian.core.spi.context.AbstractContext<T>).getObjectStore() line: 111	
      if(isActive())
      {
         return activeStore.get().peek().getStore();
/s,
org.jboss.arquillian.core.spi.context.AbstractContext$1(java.lang.ThreadLocal<T>).get() line: 167 [local variables unavailable]	
        Thread t = Thread.currentThread();
        ThreadLocalMap map = getMap(t);
        if (map != null) {
            ThreadLocalMap.Entry e = map.getEntry(this);
            if (e != null) {
                @SuppressWarnings("unchecked")
                T result = (T)e.value;
                return result;
            }
/t,
/s,
java.util.Stack<E>.peek() line: 99	
        int     len = size();

        if (len == 0)
            throw new EmptyStackException();
        return elementAt(len - 1);
/t,
org.jboss.arquillian.core.spi.context.AbstractContext$StoreHolder<X>.getStore() line: 180	
         return store;
this	AbstractContext$StoreHolder<X>  (id=7137)	
	id	"suite" (id=7131)	
	store	HashObjectStore  (id=7140)	
	this$0	SuiteContextImpl  (id=6575)	
/t,
org.jboss.arquillian.core.impl.ManagerImpl.resolve(java.lang.Class<T>) line: 197	
      for(int i = activeContexts.size() -1; i >= 0; i--)
      {
         Context context = activeContexts.get(i);	/ org.jboss.arquillian.test.impl.context.SuiteContextImpl@200606de
         T object = context.getObjectStore().get(type);
/pd,
/s,
org.jboss.arquillian.core.spi.HashObjectStore.get(java.lang.Class<T>) line: 59	
      return type.cast(store.get(type));
type=interface org.jboss.arquillian.core.api.Injector
/t,
org.jboss.arquillian.core.impl.ManagerImpl.resolve(java.lang.Class<T>) line: 197	
      for(int i = activeContexts.size() -1; i >= 0; i--)
      {
         Context context = activeContexts.get(i);	/ org.jboss.arquillian.test.impl.context.SuiteContextImpl@200606de
         T object = context.getObjectStore().get(type);
/d,
null
      for(int i = activeContexts.size() -1; i >= 0; i--)
      {
         Context context = activeContexts.get(i);	/ org.jboss.arquillian.core.impl.context.ApplicationContextImpl@48e64352
         T object = context.getObjectStore().get(type);
object	InjectorImpl  (id=7196)	
	manager	ManagerImpl  (id=45)	
		contexts	ArrayList<E>  (id=6560)	
		extensions	ArrayList<E>  (id=6561)

	    if(object != null)
         {
            return object;
/t,
org.jboss.arquillian.core.impl.InstanceImpl<T>.get() line: 61	
      return manager.resolve(type);
/d,
/t,
org.arquillian.container.chameleon.ChameleonContainer.init(org.arquillian.container.chameleon.ChameleonConfiguration, org.jboss.arquillian.config.descriptor.api.ContainerDef) line: 84	

            ContainerAdapter adapter = configuration.getConfiguredAdapter();
            this.target = new TargetController(
                    adapter,
                    injectorInst.get(),
/d,
                    configuration.getChameleonResolveCacheFolder());
/t,
org.arquillian.container.chameleon.ChameleonConfiguration.getChameleonResolveCacheFolder() line: 113	
        if (chameleonResolveCacheFolder != null) {
/n,
        return new File(new File(getChameleonDistributionDownloadFolder(), "server"), "cache");
/t,
/s,
org.arquillian.container.chameleon.controller.TargetController.<init>(org.arquillian.container.chameleon.spi.model.ContainerAdapter, org.jboss.arquillian.core.api.Injector, java.io.File) line: 51

adapter	ContainerAdapter  (id=6547)	
	adapter	Adapter  (id=4122)	
		adapterClass	"org.jboss.as.arquillian.container.managed.ManagedDeployableContainer" (id=4120)	
		configuration	LinkedHashMap<K,V>  (id=3923)	
		coordinates	"org.wildfly.arquillian:wildfly-arquillian-container-managed:2.0.1.Final" (id=4118)	
		dependencies	null	
		requireDist	true	
		type	"managed" (id=4116)	
	defaultProtocol	null	
	dist	Dist  (id=3995)	
	gavExcludeExpression	String[11]  (id=4135)	
	targetType	Target$Type  (id=926)	
	version	"10.1.0.Final" (id=1843)

        this.classloader = resolveClasspathDependencies(adapter, resolverCacheFolder);
/s,
org.arquillian.container.chameleon.controller.TargetController.resolveClasspathDependencies(org.arquillian.container.chameleon.spi.model.ContainerAdapter, java.io.File) line: 174	
        String[] dependencies = targetAdapter.dependencies();
/s,
org.arquillian.container.chameleon.spi.model.ContainerAdapter.dependencies() line: 61	
        return resolve(adapter.dependencies());
/s,
org.arquillian.container.chameleon.spi.model.Adapter.dependencies() line: 51	
        List<String> deps = new ArrayList<String>();
        deps.add(coordinates); / org.wildfly.arquillian:wildfly-arquillian-container-managed:2.0.1.Final
        if (dependencies != null) {
/n,
        return deps.toArray(new String[]{});
/t,
org.arquillian.container.chameleon.spi.model.ContainerAdapter.dependencies() line: 61	
        return resolve(adapter.dependencies());
/pd,
/s,
org.arquillian.container.chameleon.spi.model.ContainerAdapter.resolve(java.lang.String[]) line: 96	
        for (int i = 0; i < values.length; i++) {
            resolved[i] = resolve(values[i]);

/ Intermezzo
aquillian-forge3-remote [Remote Java Application]	
	Java HotSpot(TM) 64-Bit Server VM [localhost:5005]	
		Thread [main] (Suspended)	
			org.arquillian.container.chameleon.spi.model.ContainerAdapter.resolve(java.lang.String[]) line: 96	
			org.arquillian.container.chameleon.spi.model.ContainerAdapter.dependencies() line: 61	
			org.arquillian.container.chameleon.controller.TargetController.resolveClasspathDependencies(org.arquillian.container.chameleon.spi.model.ContainerAdapter, java.io.File) line: 174	
			org.arquillian.container.chameleon.controller.TargetController.<init>(org.arquillian.container.chameleon.spi.model.ContainerAdapter, org.jboss.arquillian.core.api.Injector, java.io.File) line: 53	
			org.arquillian.container.chameleon.ChameleonContainer.init(org.arquillian.container.chameleon.ChameleonConfiguration, org.jboss.arquillian.config.descriptor.api.ContainerDef) line: 85			// hierin hebben we b set,
				this.target = new TargetController(
						adapter,
						injectorInst.get(),
						configuration.getChameleonResolveCacheFolder());
/cb,
			org.arquillian.container.chameleon.InitiateContainer.initiateChameleon(org.jboss.arquillian.container.spi.event.SetupContainer) line: 70	
			org.arquillian.container.chameleon.InitiateContainer.setup(org.jboss.arquillian.core.spi.EventContext<org.jboss.arquillian.container.spi.event.SetupContainer>) line: 39	
			sun.reflect.NativeMethodAccessorImpl.invoke0(java.lang.reflect.Method, java.lang.Object, java.lang.Object[]) line: not available [native method]	
			sun.reflect.NativeMethodAccessorImpl.invoke(java.lang.Object, java.lang.Object[]) line: 62	
			sun.reflect.DelegatingMethodAccessorImpl.invoke(java.lang.Object, java.lang.Object[]) line: 43	
			java.lang.reflect.Method.invoke(java.lang.Object, java.lang.Object...) line: 498	
			org.jboss.arquillian.core.impl.ObserverImpl.invoke(org.jboss.arquillian.core.spi.Manager, java.lang.Object) line: 96	
			org.jboss.arquillian.core.impl.EventContextImpl<T>.proceed() line: 92	
			org.jboss.arquillian.core.impl.ManagerImpl.fire(T, org.jboss.arquillian.core.spi.NonManagedObserver<T>) line: 143	
			org.jboss.arquillian.core.impl.ManagerImpl.fire(java.lang.Object) line: 114	
			org.jboss.arquillian.core.impl.EventImpl<T>.fire(T) line: 67	
			org.jboss.arquillian.container.impl.client.container.ContainerLifecycleController$1.perform(org.jboss.arquillian.container.spi.Container) line: 62	
			org.jboss.arquillian.container.impl.client.container.ContainerLifecycleController$1.perform(java.lang.Object) line: 55	
			org.jboss.arquillian.container.impl.client.container.ContainerLifecycleController.forEachContainer(org.jboss.arquillian.container.impl.client.container.ContainerLifecycleController.Operation<org.jboss.arquillian.container.spi.Container>) line: 209	
			org.jboss.arquillian.container.impl.client.container.ContainerLifecycleController.setupContainers(org.jboss.arquillian.container.spi.event.SetupContainers) line: 54	
			sun.reflect.NativeMethodAccessorImpl.invoke0(java.lang.reflect.Method, java.lang.Object, java.lang.Object[]) line: not available [native method]	
			sun.reflect.NativeMethodAccessorImpl.invoke(java.lang.Object, java.lang.Object[]) line: 62	
			sun.reflect.DelegatingMethodAccessorImpl.invoke(java.lang.Object, java.lang.Object[]) line: 43	
			java.lang.reflect.Method.invoke(java.lang.Object, java.lang.Object...) line: 498	
			org.jboss.arquillian.core.impl.ObserverImpl.invoke(org.jboss.arquillian.core.spi.Manager, java.lang.Object) line: 96	
			org.jboss.arquillian.core.impl.EventContextImpl<T>.invokeObservers() line: 103	
			org.jboss.arquillian.core.impl.EventContextImpl<T>.proceed() line: 85	
			org.jboss.arquillian.core.impl.ManagerImpl.fire(T, org.jboss.arquillian.core.spi.NonManagedObserver<T>) line: 143	
			org.jboss.arquillian.core.impl.ManagerImpl.fire(java.lang.Object) line: 114	
			org.jboss.arquillian.core.impl.EventImpl<T>.fire(T) line: 67	
			org.jboss.arquillian.container.test.impl.client.ContainerEventController.execute(org.jboss.arquillian.test.spi.event.suite.BeforeSuite) line: 85	
			sun.reflect.NativeMethodAccessorImpl.invoke0(java.lang.reflect.Method, java.lang.Object, java.lang.Object[]) line: not available [native method]	
			sun.reflect.NativeMethodAccessorImpl.invoke(java.lang.Object, java.lang.Object[]) line: 62	
			sun.reflect.DelegatingMethodAccessorImpl.invoke(java.lang.Object, java.lang.Object[]) line: 43	
			java.lang.reflect.Method.invoke(java.lang.Object, java.lang.Object...) line: 498	
			org.jboss.arquillian.core.impl.ObserverImpl.invoke(org.jboss.arquillian.core.spi.Manager, java.lang.Object) line: 96	
			org.jboss.arquillian.core.impl.EventContextImpl<T>.invokeObservers() line: 103	
			org.jboss.arquillian.core.impl.EventContextImpl<T>.proceed() line: 85	
			org.jboss.arquillian.test.impl.TestContextHandler.createSuiteContext(org.jboss.arquillian.core.spi.EventContext<org.jboss.arquillian.test.spi.event.suite.SuiteEvent>) line: 73	
			sun.reflect.NativeMethodAccessorImpl.invoke0(java.lang.reflect.Method, java.lang.Object, java.lang.Object[]) line: not available [native method]	
			sun.reflect.NativeMethodAccessorImpl.invoke(java.lang.Object, java.lang.Object[]) line: 62	
			sun.reflect.DelegatingMethodAccessorImpl.invoke(java.lang.Object, java.lang.Object[]) line: 43	
			java.lang.reflect.Method.invoke(java.lang.Object, java.lang.Object...) line: 498	
			org.jboss.arquillian.core.impl.ObserverImpl.invoke(org.jboss.arquillian.core.spi.Manager, java.lang.Object) line: 96	
			org.jboss.arquillian.core.impl.EventContextImpl<T>.proceed() line: 92	
			org.jboss.arquillian.core.impl.ManagerImpl.fire(T, org.jboss.arquillian.core.spi.NonManagedObserver<T>) line: 143	
			org.jboss.arquillian.core.impl.ManagerImpl.fire(java.lang.Object) line: 114	
			org.jboss.arquillian.test.impl.EventTestRunnerAdaptor.beforeSuite() line: 75	
			org.jboss.arquillian.junit.Arquillian.run(org.junit.runner.notification.RunNotifier) line: 116	
			org.apache.maven.surefire.junit4.JUnit4Provider.execute(java.lang.Class<?>, org.junit.runner.notification.RunNotifier, java.lang.String[]) line: 264	
			org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(java.lang.Class<?>, org.apache.maven.surefire.report.RunListener, org.junit.runner.notification.RunNotifier) line: 153	
			org.apache.maven.surefire.junit4.JUnit4Provider.invoke(java.lang.Object) line: 124	
			sun.reflect.NativeMethodAccessorImpl.invoke0(java.lang.reflect.Method, java.lang.Object, java.lang.Object[]) line: not available [native method]	
			sun.reflect.NativeMethodAccessorImpl.invoke(java.lang.Object, java.lang.Object[]) line: 62	
			sun.reflect.DelegatingMethodAccessorImpl.invoke(java.lang.Object, java.lang.Object[]) line: 43	
			java.lang.reflect.Method.invoke(java.lang.Object, java.lang.Object...) line: 498	
			org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray2(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]) line: 208	
			org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(java.lang.Object) line: 159	
			org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(java.lang.Object, java.lang.ClassLoader, java.lang.ClassLoader, java.lang.Object, org.apache.maven.surefire.booter.ProviderConfiguration, boolean, org.apache.maven.surefire.booter.StartupConfiguration, boolean) line: 87	
			org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(java.lang.Object, java.lang.ClassLoader, org.apache.maven.surefire.booter.StartupConfiguration, org.apache.maven.surefire.booter.ProviderConfiguration, java.io.PrintStream) line: 153	
			org.apache.maven.surefire.booter.ForkedBooter.main(java.lang.String[]) line: 95	

/ Einde Intermezzo

/s,
org.arquillian.container.chameleon.spi.model.ContainerAdapter.resolve(java.lang.String) line: 102	
        return resolve("version", version, value);
this	ContainerAdapter  (id=6547)	
	version	"10.1.0.Final" (id=1843)	
value	"org.wildfly.arquillian:wildfly-arquillian-container-managed:2.0.1.Final" (id=4118)	
/s,
org.arquillian.container.chameleon.spi.model.ContainerAdapter.resolve(java.lang.String, java.lang.String, java.lang.String) line: 106
/=
    private String resolve(String parameter, String value, String target) {
parameter	"version" (id=7283)	
value	"10.1.0.Final" (id=1843)	
target	"org.wildfly.arquillian:wildfly-arquillian-container-managed:2.0.1.Final" (id=4118)	
	
        return target.replaceAll(Pattern.quote("${" + parameter + "}"), Matcher.quoteReplacement(value));
...
/t,
org.arquillian.container.chameleon.controller.TargetController.resolveClasspathDependencies(org.arquillian.container.chameleon.spi.model.ContainerAdapter, java.io.File) line: 177	
        String[] dependencies = targetAdapter.dependencies();
/d,
[org.wildfly.arquillian:wildfly-arquillian-container-managed:2.0.1.Final]
        try {
            MavenDependency[] mavenDependencies = toMavenDependencies(dependencies, targetAdapter.excludes());
/s,
org.arquillian.container.chameleon.Utils.toMavenDependencies(java.lang.String[], java.lang.String[]) line: 59
/=
    public static MavenDependency[] toMavenDependencies(String[] dependencies, String[] exclusions) {
	
dependencies=[org.wildfly.arquillian:wildfly-arquillian-container-managed:2.0.1.Final]	
exclusions=[org.jboss.arquillian.test:*, org.jboss.arquillian.testenricher:*, org.jboss.arquillian.container:*, org.jboss.arquillian.core:*, org.jboss.arquillian.config:*, org.jboss.arquillian.protocol:*, org.jboss.shrinkwrap.api:*, org.jboss.shrinkwrap:*, org.jboss.shrinkwrap.descriptors:*, org.jboss.shrinkwrap.resolver:*, *:wildfly-arquillian-testenricher-msc]

        MavenDependencyExclusion[] mavenExclusions = toMavenExclusions(exclusions);
mavenExclusions	MavenDependencyExclusion[11]  (id=7311)	
	[0]	MavenDependencyExclusionImpl  (id=7305)	
		$assertionsDisabled	false	
		SEPARATOR_COORDINATE	:	
		artifactId	"*" (id=7318)	
		groupId	"org.jboss.arquillian.test" (id=7319)	
	[1]	MavenDependencyExclusionImpl  (id=7306)	
	[2]	MavenDependencyExclusionImpl  (id=7307)	
	[3]	MavenDependencyExclusionImpl  (id=7308)	
	[4]	MavenDependencyExclusionImpl  (id=7309)	
	[5]	MavenDependencyExclusionImpl  (id=7310)	
	[6]	MavenDependencyExclusionImpl  (id=7332)	
	[7]	MavenDependencyExclusionImpl  (id=7333)	
	[8]	MavenDependencyExclusionImpl  (id=7334)	
	[9]	MavenDependencyExclusionImpl  (id=7335)	
	[10]	MavenDependencyExclusionImpl  (id=7342)	

        for (int i = 0; i < dependencies.length; i++) {
            mavenDependencies[i] = MavenDependencies.createDependency(
                    dependencies[i], / org.wildfly.arquillian:wildfly-arquillian-container-managed:2.0.1.Final
                    ScopeType.COMPILE,
                    false,
                    mavenExclusions);
        }
        return mavenDependencies;
/t,
org.arquillian.container.chameleon.controller.TargetController.resolveClasspathDependencies(org.arquillian.container.chameleon.spi.model.ContainerAdapter, java.io.File) line: 179	
        try {
            MavenDependency[] mavenDependencies = toMavenDependencies(dependencies, targetAdapter.excludes());
/d,
            File[] archives = Resolver.resolve(resolverCacheFolder, mavenDependencies);
/s,
org.arquillian.container.chameleon.controller.Resolver.resolve(java.io.File, org.jboss.shrinkwrap.resolver.api.maven.coordinate.MavenDependency[]) line: 36	
dependencies=[MavenDependency [org.wildfly.arquillian:wildfly-arquillian-container-managed:jar:2.0.1.Final:compile]]

        String hash = hash(dependencies);
02ab9c7835daac7b404a80beba35ee3089ad69a3b36d3fa0ada01eddf03f617d
        File cacheFile = getCacheFile(cacheFolder, hash);
target\server\cache\02ab9c7835daac7b404a80beba35ee3089ad69a3b36d3fa0ada01eddf03f617d.cache
        if (cacheFile.exists()) {
/n,
            files = readCache(cacheFile);
        } else {
            files = Maven.configureResolver()
                    .addDependencies(dependencies)
                    .resolve()
                    .withTransitivity()
                    .asFile();

/ Intermezzo


/ we komen via .withTransitivity in 	,

Thread [main] (Suspended)	
	org.jboss.shrinkwrap.resolver.impl.maven.MavenWorkingSessionImpl(org.jboss.shrinkwrap.resolver.impl.maven.ConfigurableMavenWorkingSessionImpl).getSettings() line: 120	
	org.jboss.shrinkwrap.resolver.impl.maven.MavenWorkingSessionImpl.getRemoteRepositories() line: 340	
	org.jboss.shrinkwrap.resolver.impl.maven.MavenWorkingSessionImpl.resolveDependencies(org.jboss.shrinkwrap.resolver.api.maven.strategy.MavenResolutionStrategy) line: 210	
	org.jboss.shrinkwrap.resolver.impl.maven.MavenStrategyStageImpl(org.jboss.shrinkwrap.resolver.impl.maven.MavenStrategyStageBaseImpl<STRATEGYSTAGETYPE,FORMATSTAGETYPE>).using(org.jboss.shrinkwrap.resolver.api.maven.strategy.MavenResolutionStrategy) line: 70	
	org.jboss.shrinkwrap.resolver.impl.maven.MavenStrategyStageImpl(org.jboss.shrinkwrap.resolver.impl.maven.MavenStrategyStageBaseImpl<STRATEGYSTAGETYPE,FORMATSTAGETYPE>).withTransitivity() line: 52	
	org.jboss.shrinkwrap.resolver.impl.maven.MavenStrategyStageImpl(org.jboss.shrinkwrap.resolver.impl.maven.MavenStrategyStageBaseImpl<STRATEGYSTAGETYPE,FORMATSTAGETYPE>).withTransitivity() line: 39	
	org.arquillian.container.chameleon.controller.Resolver.resolve(java.io.File, org.jboss.shrinkwrap.resolver.api.maven.coordinate.MavenDependency[]) line: 46	
	org.arquillian.container.chameleon.controller.TargetController.resolveClasspathDependencies(org.arquillian.container.chameleon.spi.model.ContainerAdapter, java.io.File) line: 179	
	org.arquillian.container.chameleon.controller.TargetController.<init>(org.arquillian.container.chameleon.spi.model.ContainerAdapter, org.jboss.arquillian.core.api.Injector, java.io.File) line: 53	
	org.arquillian.container.chameleon.ChameleonContainer.init(org.arquillian.container.chameleon.ChameleonConfiguration, org.jboss.arquillian.config.descriptor.api.ContainerDef) line: 85	
	org.arquillian.container.chameleon.InitiateContainer.initiateChameleon(org.jboss.arquillian.container.spi.event.SetupContainer) line: 70	
	org.arquillian.container.chameleon.InitiateContainer.setup(org.jboss.arquillian.core.spi.EventContext<org.jboss.arquillian.container.spi.event.SetupContainer>) line: 39	
	sun.reflect.NativeMethodAccessorImpl.invoke0(java.lang.reflect.Method, java.lang.Object, java.lang.Object[]) line: not available [native method]	
	sun.reflect.NativeMethodAccessorImpl.invoke(java.lang.Object, java.lang.Object[]) line: 62	
	sun.reflect.DelegatingMethodAccessorImpl.invoke(java.lang.Object, java.lang.Object[]) line: 43	
	java.lang.reflect.Method.invoke(java.lang.Object, java.lang.Object...) line: 498	
	org.jboss.arquillian.core.impl.ObserverImpl.invoke(org.jboss.arquillian.core.spi.Manager, java.lang.Object) line: 96	
	org.jboss.arquillian.core.impl.EventContextImpl<T>.proceed() line: 92	
	org.jboss.arquillian.core.impl.ManagerImpl.fire(T, org.jboss.arquillian.core.spi.NonManagedObserver<T>) line: 143	
	org.jboss.arquillian.core.impl.ManagerImpl.fire(java.lang.Object) line: 114	
	org.jboss.arquillian.core.impl.EventImpl<T>.fire(T) line: 67	
	org.jboss.arquillian.container.impl.client.container.ContainerLifecycleController$1.perform(org.jboss.arquillian.container.spi.Container) line: 62	
	org.jboss.arquillian.container.impl.client.container.ContainerLifecycleController$1.perform(java.lang.Object) line: 55	
	org.jboss.arquillian.container.impl.client.container.ContainerLifecycleController.forEachContainer(org.jboss.arquillian.container.impl.client.container.ContainerLifecycleController.Operation<org.jboss.arquillian.container.spi.Container>) line: 209	
	org.jboss.arquillian.container.impl.client.container.ContainerLifecycleController.setupContainers(org.jboss.arquillian.container.spi.event.SetupContainers) line: 54	
	sun.reflect.NativeMethodAccessorImpl.invoke0(java.lang.reflect.Method, java.lang.Object, java.lang.Object[]) line: not available [native method]	
	sun.reflect.NativeMethodAccessorImpl.invoke(java.lang.Object, java.lang.Object[]) line: 62	
	sun.reflect.DelegatingMethodAccessorImpl.invoke(java.lang.Object, java.lang.Object[]) line: 43	
	java.lang.reflect.Method.invoke(java.lang.Object, java.lang.Object...) line: 498	
	org.jboss.arquillian.core.impl.ObserverImpl.invoke(org.jboss.arquillian.core.spi.Manager, java.lang.Object) line: 96	
	org.jboss.arquillian.core.impl.EventContextImpl<T>.invokeObservers() line: 103	
	org.jboss.arquillian.core.impl.EventContextImpl<T>.proceed() line: 85	
	org.jboss.arquillian.core.impl.ManagerImpl.fire(T, org.jboss.arquillian.core.spi.NonManagedObserver<T>) line: 143	
	org.jboss.arquillian.core.impl.ManagerImpl.fire(java.lang.Object) line: 114	
	org.jboss.arquillian.core.impl.EventImpl<T>.fire(T) line: 67	
	org.jboss.arquillian.container.test.impl.client.ContainerEventController.execute(org.jboss.arquillian.test.spi.event.suite.BeforeSuite) line: 85	
	sun.reflect.NativeMethodAccessorImpl.invoke0(java.lang.reflect.Method, java.lang.Object, java.lang.Object[]) line: not available [native method]	
	sun.reflect.NativeMethodAccessorImpl.invoke(java.lang.Object, java.lang.Object[]) line: 62	
	sun.reflect.DelegatingMethodAccessorImpl.invoke(java.lang.Object, java.lang.Object[]) line: 43	
	java.lang.reflect.Method.invoke(java.lang.Object, java.lang.Object...) line: 498	
	org.jboss.arquillian.core.impl.ObserverImpl.invoke(org.jboss.arquillian.core.spi.Manager, java.lang.Object) line: 96	
	org.jboss.arquillian.core.impl.EventContextImpl<T>.invokeObservers() line: 103	
	org.jboss.arquillian.core.impl.EventContextImpl<T>.proceed() line: 85	
	org.jboss.arquillian.test.impl.TestContextHandler.createSuiteContext(org.jboss.arquillian.core.spi.EventContext<org.jboss.arquillian.test.spi.event.suite.SuiteEvent>) line: 73	
	sun.reflect.NativeMethodAccessorImpl.invoke0(java.lang.reflect.Method, java.lang.Object, java.lang.Object[]) line: not available [native method]	
	sun.reflect.NativeMethodAccessorImpl.invoke(java.lang.Object, java.lang.Object[]) line: 62	
	sun.reflect.DelegatingMethodAccessorImpl.invoke(java.lang.Object, java.lang.Object[]) line: 43	
	java.lang.reflect.Method.invoke(java.lang.Object, java.lang.Object...) line: 498	
	org.jboss.arquillian.core.impl.ObserverImpl.invoke(org.jboss.arquillian.core.spi.Manager, java.lang.Object) line: 96	
	org.jboss.arquillian.core.impl.EventContextImpl<T>.proceed() line: 92	
	org.jboss.arquillian.core.impl.ManagerImpl.fire(T, org.jboss.arquillian.core.spi.NonManagedObserver<T>) line: 143	
	org.jboss.arquillian.core.impl.ManagerImpl.fire(java.lang.Object) line: 114	
	org.jboss.arquillian.test.impl.EventTestRunnerAdaptor.beforeSuite() line: 75	
	org.jboss.arquillian.junit.Arquillian.run(org.junit.runner.notification.RunNotifier) line: 116	
	org.apache.maven.surefire.junit4.JUnit4Provider.execute(java.lang.Class<?>, org.junit.runner.notification.RunNotifier, java.lang.String[]) line: 264	
	org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(java.lang.Class<?>, org.apache.maven.surefire.report.RunListener, org.junit.runner.notification.RunNotifier) line: 153	
	org.apache.maven.surefire.junit4.JUnit4Provider.invoke(java.lang.Object) line: 124	
	sun.reflect.NativeMethodAccessorImpl.invoke0(java.lang.reflect.Method, java.lang.Object, java.lang.Object[]) line: not available [native method]	
	sun.reflect.NativeMethodAccessorImpl.invoke(java.lang.Object, java.lang.Object[]) line: 62	
	sun.reflect.DelegatingMethodAccessorImpl.invoke(java.lang.Object, java.lang.Object[]) line: 43	
	java.lang.reflect.Method.invoke(java.lang.Object, java.lang.Object...) line: 498	
	org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray2(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]) line: 208	
	org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(java.lang.Object) line: 159	
	org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(java.lang.Object, java.lang.ClassLoader, java.lang.ClassLoader, java.lang.Object, org.apache.maven.surefire.booter.ProviderConfiguration, boolean, org.apache.maven.surefire.booter.StartupConfiguration, boolean) line: 87	
	org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(java.lang.Object, java.lang.ClassLoader, org.apache.maven.surefire.booter.StartupConfiguration, org.apache.maven.surefire.booter.ProviderConfiguration, java.io.PrintStream) line: 153	
	org.apache.maven.surefire.booter.ForkedBooter.main(java.lang.String[]) line: 95	
	
this	MavenWorkingSessionImpl  (id=7435)	
	dependencies	ArrayList<E>  (id=7438)	/ [MavenDependency [org.wildfly.arquillian:wildfly-arquillian-container-managed:jar:2.0.1.Final:compile]]
	remoteRepositories	ArrayList<E>  (id=7440)	
	settingsManager	SettingsManager  (id=7441)	

/ Einde Intermezzo

/ via .withTransitivity() hierboven,	
/s,
org.jboss.shrinkwrap.resolver.impl.maven.MavenWorkingSessionImpl.getRemoteRepositories() line: 391	
        for (Profile p : activeProfiles) {
/n,
        for (RemoteRepository repo : remoteRepositories) {
/n,
        // add maven central if selected but if not overridden by API
        if (useMavenCentralRepository) {
            if (!isIdIncluded(additionalRemoteRepositories, MAVEN_CENTRAL)) {
                enhancedRepos.add(MAVEN_CENTRAL);
            }
this	MavenWorkingSessionImpl  (id=7435)	
	log	Logger  (id=2614)	
	log	Logger  (id=2615)	
	MAVEN_CENTRAL	RemoteRepository  (id=2616)	
		URL_PATTERN	Pattern  (id=7541)	
		authentication	null	
		host	"repo1.maven.org" (id=7542)	
		id	"central" (id=2619)	
		mirroredRepositories	Collections$EmptyList<E>  (id=665)	
		protocol	"http" (id=7545)	
		proxy	null	
		releasePolicy	RepositoryPolicy  (id=7546)	/ enabled=true, checksums=warn, updates=daily
		repositoryManager	false	
		snapshotPolicy	RepositoryPolicy  (id=7546)	/ enabled=true, checksums=warn, updates=daily
		type	"default" (id=7548)	
		url	"http://repo1.maven.org/maven2" (id=7549)

        Set<RemoteRepository> mirroredRepos = new LinkedHashSet<RemoteRepository>();
        for (RemoteRepository repository : enhancedRepos) {
            RemoteRepository mirror = dms.getMirror(repository); / null
            if (mirror != null) {
/n,
            } else {
                mirroredRepos.add(repository);		

        for (RemoteRepository remoteRepository : mirroredRepos) {
            final RemoteRepository.Builder builder = new RemoteRepository.Builder(remoteRepository);

            // add authentication if <server> was provided in settings.xml file
            Server server = getSettings().getServer(remoteRepository.getId());
            if (server != null) {
/n,
            authorizedRepos.add(builder.build());
[central (http://repo1.maven.org/maven2, default, releases+snapshots)]

        if (log.isLoggable(Level.FINER)) {
/n,
        return new ArrayList<RemoteRepository>(authorizedRepos);
/t,
org.jboss.shrinkwrap.resolver.impl.maven.MavenWorkingSessionImpl.resolveDependencies(org.jboss.shrinkwrap.resolver.api.maven.strategy.MavenResolutionStrategy) line: 212	
        final List<RemoteRepository> repos = this.getRemoteRepositories();
/d,
        final CollectRequest request = new CollectRequest(MavenConverter.asDependencies(depsForResolution,
            getSession().getArtifactTypeRegistry()),
            MavenConverter.asDependencies(depManagement, getSession().getArtifactTypeRegistry()), repos);
/s,
org.jboss.shrinkwrap.resolver.impl.maven.MavenWorkingSessionImpl(org.jboss.shrinkwrap.resolver.impl.maven.ConfigurableMavenWorkingSessionImpl).getSession() line: 108	
        if (this.session == null) {
            generateSession();
/s,
org.jboss.shrinkwrap.resolver.impl.maven.MavenWorkingSessionImpl(org.jboss.shrinkwrap.resolver.impl.maven.ConfigurableMavenWorkingSessionImpl).generateSession() line: 157	
        this.session = this.system.getSession(getSettings(), this.useLegacyLocalRepository);
/s,
org.jboss.shrinkwrap.resolver.impl.maven.SettingsManager.getSettings() line: 79	
        if (this.settings == null) {
            this.settings = new MavenSettingsBuilder().buildDefaultSettings();
            // ensure we keep offline(boolean) if previously set
            propagateProgrammaticOfflineIntoSettings();
        }
        return this.settings;
this	SettingsManager  (id=7441)	
	programmaticOffline	null	
	settings	Settings  (id=7500)	
		GLOBAL_LEVEL	"global-level" (id=7504)	
		USER_LEVEL	"user-level" (id=7505)	
		activeProfiles	null	
		activeProxy	null	
		interactiveMode	true	
		localRepository	"C:\\Users\\ervelden\\.m2\\repository" (id=7507)	
		mirrors	ArrayList<E>  (id=7567)	
		modelEncoding	"UTF-8" (id=7508)	
		offline	false	
		pluginGroups	null	
		profileMap	null	
		profiles	ArrayList<E>  (id=7525)	
		proxies	ArrayList<E>  (id=7511)	
		servers	ArrayList<E>  (id=7512)	
		sourceLevel	"user-level" (id=7505)	
		sourceLevelSet	false	
		usePluginRegistry	false
/t,
/s,
org.jboss.shrinkwrap.resolver.impl.maven.bootstrap.MavenRepositorySystem.getSession(org.apache.maven.settings.Settings, boolean) line: 76	
        DefaultRepositorySystemSession session = new DefaultRepositorySystemSession();

        MavenManagerBuilder builder = new MavenManagerBuilder(system, settings);

settings	Settings  (id=7500)	
	GLOBAL_LEVEL	"global-level" (id=7504)	
	USER_LEVEL	"user-level" (id=7505)	
	activeProfiles	null	
	activeProxy	null	
	interactiveMode	true	
	localRepository	"C:\\Users\\ervelden\\.m2\\repository" (id=7507)	
	mirrors	ArrayList<E>  (id=7567)	
	modelEncoding	"UTF-8" (id=7508)	
	offline	false	
	pluginGroups	null	
	profileMap	null	
	profiles	ArrayList<E>  (id=7525)	
	proxies	ArrayList<E>  (id=7511)	
	servers	ArrayList<E>  (id=7512)	
	sourceLevel	"user-level" (id=7505)	
	sourceLevelSet	false	
	usePluginRegistry	false	
legacyLocalRepository	false	
session	DefaultRepositorySystemSession  (id=7612)	
	artifactDescriptorPolicy	null	
	artifactTypeRegistry	DefaultRepositorySystemSession$NullArtifactTypeRegistry  (id=7696)	
	authenticationSelector	DefaultRepositorySystemSession$NullAuthenticationSelector  (id=7699)	
	cache	null	
	checksumPolicy	null	
	configProperties	HashMap<K,V>  (id=7702)	
	configPropertiesView	Collections$UnmodifiableMap<K,V>  (id=7703)	
	data	DefaultSessionData  (id=7705)	
		data	ConcurrentHashMap<K,V>  (id=7754)	
	dependencyGraphTransformer	null	
	dependencyManager	null	
	dependencySelector	null	
	dependencyTraverser	null	
	ignoreArtifactDescriptorRepositories	false	
	localRepositoryManager	null	
	mirrorSelector	DefaultRepositorySystemSession$NullMirrorSelector  (id=7719)	
	offline	false	
	proxySelector	DefaultRepositorySystemSession$NullProxySelector  (id=7725)	
	readOnly	false	
	repositoryListener	null	
	resolutionErrorPolicy	null	
	systemProperties	HashMap<K,V>  (id=7732)	
	systemPropertiesView	Collections$UnmodifiableMap<K,V>  (id=7737)	
	transferListener	null	
	updatePolicy	null	
	userProperties	HashMap<K,V>  (id=7742)	
	userPropertiesView	Collections$UnmodifiableMap<K,V>  (id=7743)	
	versionFilter	null	
	workspaceReader	null	
builder	MavenManagerBuilder  (id=7614)	
	USE_LEGACY_REPO_KEY	"maven.legacyLocalRepo" (id=7616)	
	settings	Settings  (id=7500)	
	system	DefaultRepositorySystem  (id=7617)	
		artifactDescriptorReader	DefaultArtifactDescriptorReader  (id=7627)	
		artifactResolver	DefaultArtifactResolver  (id=7630)	
		dependencyCollector	DefaultDependencyCollector  (id=7634)	
		deployer	DefaultDeployer  (id=7637)	
		installer	DefaultInstaller  (id=7640)	
		localRepositoryProvider	DefaultLocalRepositoryProvider  (id=7644)	
		logger	AetherLoggerFactory$Logger  (id=7647)	
		metadataResolver	DefaultMetadataResolver  (id=7650)	
		remoteRepositoryManager	DefaultRemoteRepositoryManager  (id=7654)	
		syncContextFactory	DefaultSyncContextFactory  (id=7657)	
		versionRangeResolver	DefaultVersionRangeResolver  (id=7660)	
		versionResolver	DefaultVersionResolver  (id=7664)	
	useLegacyLocalRepository	false	


        session.setLocalRepositoryManager(builder.localRepositoryManager(session, legacyLocalRepository));
/s,
org.jboss.shrinkwrap.resolver.impl.maven.bootstrap.MavenManagerBuilder.localRepositoryManager(org.eclipse.aether.RepositorySystemSession, boolean) line: 146	
        String localRepositoryPath = settings.getLocalRepository();
C:\Users\ervelden\.m2\repository
        LocalRepositoryManager manager = factory.localRepositoryManager(system, session, new File(localRepositoryPath));
/s,
org.eclipse.aether.internal.impl.DefaultLocalRepositoryProvider.newLocalRepositoryManager(org.eclipse.aether.RepositorySystemSession, org.eclipse.aether.repository.LocalRepository) line: 101
	
        PrioritizedComponents<LocalRepositoryManagerFactory> factories =
            new PrioritizedComponents<LocalRepositoryManagerFactory>( session );
        for ( LocalRepositoryManagerFactory factory : this.managerFactories ) 
        {
            factories.add( factory, factory.getPriority() );
factories	PrioritizedComponents<T>  (id=7804)	
	FACTORY_SUFFIX	"Factory" (id=7829)	
	components	ArrayList<E>  (id=7830)	
		[0]	PrioritizedComponent<T>  (id=7840)	
			component	EnhancedLocalRepositoryManagerFactory  (id=7819)	
			index	1	
			priority	10.0	
			type	Class<T> (org.eclipse.aether.internal.impl.EnhancedLocalRepositoryManagerFactory) (id=7820)	
		[1]	PrioritizedComponent<T>  (id=7857)	
			component	SimpleLocalRepositoryManagerFactory  (id=7810)	
			index	0	
			priority	0.0	
			type	Class<T> (org.eclipse.aether.internal.impl.SimpleLocalRepositoryManagerFactory) (id=7811)	
	configProps	Collections$UnmodifiableMap<K,V>  (id=7703)	
	firstDisabled	2	
	useInsertionOrder	false	

         for ( PrioritizedComponent<LocalRepositoryManagerFactory> factory : factories.getEnabled() ) / beide enabled TODO
        {
            try
            {
                LocalRepositoryManager manager = factory.getComponent().newInstance( session, repository );
                if ( logger.isDebugEnabled() )
/n,
				return manager;
/t,
org.jboss.shrinkwrap.resolver.impl.maven.bootstrap.MavenRepositorySystem.getSession(org.apache.maven.settings.Settings, boolean) line: 81	
        session.setLocalRepositoryManager(builder.localRepositoryManager(session, legacyLocalRepository));
/d,
        session.setWorkspaceReader(builder.workspaceReader());
/s,
org.jboss.shrinkwrap.resolver.impl.maven.aether.ClasspathWorkspaceReader.<init>() line: 155	
        final String classPath = SecurityActions.getProperty(CLASS_PATH_KEY); / "java.class.path"
		
C:\Users\ervelden\eclipse\workspace-jbosstools-jee-oxygen\arquillian-forge3\target\test-classes;C:\Users\ervelden\eclipse\workspace-jbosstools-jee-oxygen\arquillian-forge3\target\classes;C:\Users\ervelden\.m2\repository\javax\javaee-api\7.0\javaee-api-7.0.jar;C:\Users\ervelden\.m2\repository\com\sun\mail\javax.mail\1.5.0\javax.mail-1.5.0.jar;C:\Users\ervelden\.m2\repository\javax\activation\activation\1.1\activation-1.1.jar;C:\Users\ervelden\.m2\repository\org\jboss\shrinkwrap\shrinkwrap-api\1.2.6\shrinkwrap-api-1.2.6.jar;C:\Users\ervelden\.m2\repository\org\jboss\shrinkwrap\shrinkwrap-spi\1.2.6\shrinkwrap-spi-1.2.6.jar;C:\Users\ervelden\.m2\repository\org\jboss\shrinkwrap\resolver\shrinkwrap-resolver-api\3.0.0-alpha-4\shrinkwrap-resolver-api-3.0.0-alpha-4.jar;C:\Users\ervelden\.m2\repository\org\jboss\shrinkwrap\resolver\shrinkwrap-resolver-spi\3.0.0-alpha-4\shrinkwrap-resolver-spi-3.0.0-alpha-4.jar;C:\Users\ervelden\.m2\repository\org\jboss\shrinkwrap\resolver\shrinkwrap-resolver-api-maven\3.0.0-alpha-4\shrinkwrap-resolver-api-maven-3.0.0-alpha-4.jar;C:\Users\ervelden\.m2\repository\org\apache\maven\maven-model\3.3.9\maven-model-3.3.9.jar;C:\Users\ervelden\.m2\repository\org\apache\commons\commons-lang3\3.4\commons-lang3-3.4.jar;C:\Users\ervelden\.m2\repository\org\jboss\shrinkwrap\resolver\shrinkwrap-resolver-spi-maven\3.0.0-alpha-4\shrinkwrap-resolver-spi-maven-3.0.0-alpha-4.jar;C:\Users\ervelden\.m2\repository\org\jboss\shrinkwrap\resolver\shrinkwrap-resolver-api-maven-archive\3.0.0-alpha-4\shrinkwrap-resolver-api-maven-archive-3.0.0-alpha-4.jar;C:\Users\ervelden\.m2\repository\org\jboss\shrinkwrap\resolver\shrinkwrap-resolver-impl-maven\3.0.0-alpha-4\shrinkwrap-resolver-impl-maven-3.0.0-alpha-4.jar;C:\Users\ervelden\.m2\repository\org\eclipse\aether\aether-api\1.0.2.v20150114\aether-api-1.0.2.v20150114.jar;C:\Users\ervelden\.m2\repository\org\eclipse\aether\aether-impl\1.0.2.v20150114\aether-impl-1.0.2.v20150114.jar;C:\Users\ervelden\.m2\repository\org\eclipse\aether\aether-spi\1.0.2.v20150114\aether-spi-1.0.2.v20150114.jar;C:\Users\ervelden\.m2\repository\org\eclipse\aether\aether-util\1.0.2.v20150114\aether-util-1.0.2.v20150114.jar;C:\Users\ervelden\.m2\repository\org\eclipse\aether\aether-connector-basic\1.0.2.v20150114\aether-connector-basic-1.0.2.v20150114.jar;C:\Users\ervelden\.m2\repository\org\eclipse\aether\aether-transport-wagon\1.0.2.v20150114\aether-transport-wagon-1.0.2.v20150114.jar;C:\Users\ervelden\.m2\repository\org\apache\maven\maven-aether-provider\3.3.9\maven-aether-provider-3.3.9.jar;C:\Users\ervelden\.m2\repository\org\codehaus\plexus\plexus-component-annotations\1.6\plexus-component-annotations-1.6.jar;C:\Users\ervelden\.m2\repository\org\apache\maven\maven-model-builder\3.3.9\maven-model-builder-3.3.9.jar;C:\Users\ervelden\.m2\repository\org\apache\maven\maven-artifact\3.3.9\maven-artifact-3.3.9.jar;C:\Users\ervelden\.m2\repository\org\apache\maven\maven-builder-support\3.3.9\maven-builder-support-3.3.9.jar;C:\Users\ervelden\.m2\repository\org\apache\maven\maven-repository-metadata\3.3.9\maven-repository-metadata-3.3.9.jar;C:\Users\ervelden\.m2\repository\org\apache\maven\maven-settings\3.3.9\maven-settings-3.3.9.jar;C:\Users\ervelden\.m2\repository\org\apache\maven\maven-settings-builder\3.3.9\maven-settings-builder-3.3.9.jar;C:\Users\ervelden\.m2\repository\com\google\guava\guava\18.0\guava-18.0.jar;C:\Users\ervelden\.m2\repository\org\codehaus\plexus\plexus-interpolation\1.21\plexus-interpolation-1.21.jar;C:\Users\ervelden\.m2\repository\org\codehaus\plexus\plexus-utils\3.0.22\plexus-utils-3.0.22.jar;C:\Users\ervelden\.m2\repository\org\sonatype\plexus\plexus-sec-dispatcher\1.3\plexus-sec-dispatcher-1.3.jar;C:\Users\ervelden\.m2\repository\org\sonatype\plexus\plexus-cipher\1.7\plexus-cipher-1.7.jar;C:\Users\ervelden\.m2\repository\org\apache\maven\wagon\wagon-provider-api\2.10\wagon-provider-api-2.10.jar;C:\Users\ervelden\.m2\repository\org\apache\maven\wagon\wagon-file\2.10\wagon-file-2.10.jar;C:\Users\ervelden\.m2\repository\commons-lang\commons-lang\2.6\commons-lang-2.6.jar;C:\Users\ervelden\.m2\repository\org\apache\maven\wagon\wagon-http-lightweight\2.10\wagon-http-lightweight-2.10.jar;C:\Users\ervelden\.m2\repository\org\apache\maven\wagon\wagon-http-shared\2.10\wagon-http-shared-2.10.jar;C:\Users\ervelden\.m2\repository\org\jsoup\jsoup\1.7.2\jsoup-1.7.2.jar;C:\Users\ervelden\.m2\repository\commons-io\commons-io\2.2\commons-io-2.2.jar;C:\Users\ervelden\.m2\repository\org\jboss\shrinkwrap\resolver\shrinkwrap-resolver-impl-maven-archive\3.0.0-alpha-4\shrinkwrap-resolver-impl-maven-archive-3.0.0-alpha-4.jar;C:\Users\ervelden\.m2\repository\org\jboss\shrinkwrap\resolver\shrinkwrap-resolver-spi-maven-archive\3.0.0-alpha-4\shrinkwrap-resolver-spi-maven-archive-3.0.0-alpha-4.jar;C:\Users\ervelden\.m2\repository\org\eclipse\sisu\org.eclipse.sisu.plexus\0.3.2\org.eclipse.sisu.plexus-0.3.2.jar;C:\Users\ervelden\.m2\repository\javax\enterprise\cdi-api\1.0\cdi-api-1.0.jar;C:\Users\ervelden\.m2\repository\javax\annotation\jsr250-api\1.0\jsr250-api-1.0.jar;C:\Users\ervelden\.m2\repository\javax\inject\javax.inject\1\javax.inject-1.jar;C:\Users\ervelden\.m2\repository\org\eclipse\sisu\org.eclipse.sisu.inject\0.3.2\org.eclipse.sisu.inject-0.3.2.jar;C:\Users\ervelden\.m2\repository\org\codehaus\plexus\plexus-compiler-javac\2.7\plexus-compiler-javac-2.7.jar;C:\Users\ervelden\.m2\repository\org\codehaus\plexus\plexus-compiler-api\2.7\plexus-compiler-api-2.7.jar;C:\Users\ervelden\.m2\repository\org\jboss\shrinkwrap\resolver\shrinkwrap-resolver-api-maven-embedded\3.0.0-alpha-4\shrinkwrap-resolver-api-maven-embedded-3.0.0-alpha-4.jar;C:\Users\ervelden\.m2\repository\org\apache\maven\shared\maven-invoker\2.2\maven-invoker-2.2.jar;C:\Users\ervelden\.m2\repository\org\jboss\shrinkwrap\resolver\shrinkwrap-resolver-impl-maven-embedded\3.0.0-alpha-4\shrinkwrap-resolver-impl-maven-embedded-3.0.0-alpha-4.jar;C:\Users\ervelden\.m2\repository\commons-codec\commons-codec\1.10\commons-codec-1.10.jar;C:\Users\ervelden\.m2\repository\org\jboss\arquillian\junit\arquillian-junit-container\1.1.13.Final\arquillian-junit-container-1.1.13.Final.jar;C:\Users\ervelden\.m2\repository\org\jboss\arquillian\junit\arquillian-junit-core\1.1.13.Final\arquillian-junit-core-1.1.13.Final.jar;C:\Users\ervelden\.m2\repository\org\jboss\arquillian\test\arquillian-test-api\1.1.13.Final\arquillian-test-api-1.1.13.Final.jar;C:\Users\ervelden\.m2\repository\org\jboss\arquillian\core\arquillian-core-api\1.1.13.Final\arquillian-core-api-1.1.13.Final.jar;C:\Users\ervelden\.m2\repository\org\jboss\arquillian\test\arquillian-test-spi\1.1.13.Final\arquillian-test-spi-1.1.13.Final.jar;C:\Users\ervelden\.m2\repository\org\jboss\arquillian\core\arquillian-core-spi\1.1.13.Final\arquillian-core-spi-1.1.13.Final.jar;C:\Users\ervelden\.m2\repository\org\jboss\arquillian\container\arquillian-container-test-api\1.1.13.Final\arquillian-container-test-api-1.1.13.Final.jar;C:\Users\ervelden\.m2\repository\org\jboss\arquillian\container\arquillian-container-test-spi\1.1.13.Final\arquillian-container-test-spi-1.1.13.Final.jar;C:\Users\ervelden\.m2\repository\org\jboss\arquillian\core\arquillian-core-impl-base\1.1.13.Final\arquillian-core-impl-base-1.1.13.Final.jar;C:\Users\ervelden\.m2\repository\org\jboss\arquillian\test\arquillian-test-impl-base\1.1.13.Final\arquillian-test-impl-base-1.1.13.Final.jar;C:\Users\ervelden\.m2\repository\org\jboss\arquillian\container\arquillian-container-impl-base\1.1.13.Final\arquillian-container-impl-base-1.1.13.Final.jar;C:\Users\ervelden\.m2\repository\org\jboss\arquillian\config\arquillian-config-api\1.1.13.Final\arquillian-config-api-1.1.13.Final.jar;C:\Users\ervelden\.m2\repository\org\jboss\shrinkwrap\descriptors\shrinkwrap-descriptors-spi\2.0.0-alpha-10\shrinkwrap-descriptors-spi-2.0.0-alpha-10.jar;C:\Users\ervelden\.m2\repository\org\jboss\arquillian\container\arquillian-container-test-impl-base\1.1.13.Final\arquillian-container-test-impl-base-1.1.13.Final.jar;C:\Users\ervelden\.m2\repository\org\jboss\shrinkwrap\shrinkwrap-impl-base\1.2.6\shrinkwrap-impl-base-1.2.6.jar;C:\Users\ervelden\.m2\repository\junit\junit\4.12\junit-4.12.jar;C:\Users\ervelden\.m2\repository\org\hamcrest\hamcrest-core\1.3\hamcrest-core-1.3.jar;C:\Users\ervelden\.m2\repository\org\arquillian\container\arquillian-container-chameleon\1.0.0.Beta1\arquillian-container-chameleon-1.0.0.Beta1.jar;C:\Users\ervelden\.m2\repository\org\arquillian\container\arquillian-chameleon-container-model\1.0.0.Beta1\arquillian-chameleon-container-model-1.0.0.Beta1.jar;C:\Users\ervelden\.m2\repository\org\jboss\arquillian\config\arquillian-config-impl-base\1.1.13.Final\arquillian-config-impl-base-1.1.13.Final.jar;C:\Users\ervelden\.m2\repository\org\jboss\arquillian\container\arquillian-container-spi\1.1.13.Final\arquillian-container-spi-1.1.13.Final.jar;C:\Users\ervelden\.m2\repository\org\jboss\shrinkwrap\descriptors\shrinkwrap-descriptors-api-base\2.0.0-alpha-10\shrinkwrap-descriptors-api-base-2.0.0-alpha-10.jar;C:\Users\ervelden\.m2\repository\org\jboss\arquillian\protocol\arquillian-protocol-servlet\1.1.13.Final\arquillian-protocol-servlet-1.1.13.Final.jar;C:\Users\ervelden\.m2\repository\org\jboss\arquillian\testenricher\arquillian-testenricher-ejb\1.1.13.Final\arquillian-testenricher-ejb-1.1.13.Final.jar;C:\Users\ervelden\.m2\repository\org\jboss\arquillian\testenricher\arquillian-testenricher-resource\1.1.13.Final\arquillian-testenricher-resource-1.1.13.Final.jar;C:\Users\ervelden\.m2\repository\org\jboss\arquillian\testenricher\arquillian-testenricher-cdi\1.1.13.Final\arquillian-testenricher-cdi-1.1.13.Final.jar;C:\Users\ervelden\.m2\repository\org\jboss\arquillian\testenricher\arquillian-testenricher-initialcontext\1.1.13.Final\arquillian-testenricher-initialcontext-1.1.13.Final.jar;C:\Users\ervelden\.m2\repository\org\arquillian\spacelift\arquillian-spacelift\1.0.0.Alpha9\arquillian-spacelift-1.0.0.Alpha9.jar;C:\Users\ervelden\.m2\repository\org\a...
/ TODO
/ Wanneer komen de maven deps op het classpath?

        final String surefireClassPath = SecurityActions.getProperty(SUREFIRE_CLASS_PATH_KEY); / "surefire.test.class.path"
		
C:\Users\ervelden\eclipse\workspace-jbosstools-jee-oxygen\arquillian-forge3\target\test-classes;C:\Users\ervelden\eclipse\workspace-jbosstools-jee-oxygen\arquillian-forge3\target\classes;C:\Users\ervelden\.m2\repository\javax\javaee-api\7.0\javaee-api-7.0.jar;C:\Users\ervelden\.m2\repository\com\sun\mail\javax.mail\1.5.0\javax.mail-1.5.0.jar;C:\Users\ervelden\.m2\repository\javax\activation\activation\1.1\activation-1.1.jar;C:\Users\ervelden\.m2\repository\org\jboss\shrinkwrap\shrinkwrap-api\1.2.6\shrinkwrap-api-1.2.6.jar;C:\Users\ervelden\.m2\repository\org\jboss\shrinkwrap\shrinkwrap-spi\1.2.6\shrinkwrap-spi-1.2.6.jar;C:\Users\ervelden\.m2\repository\org\jboss\shrinkwrap\resolver\shrinkwrap-resolver-api\3.0.0-alpha-4\shrinkwrap-resolver-api-3.0.0-alpha-4.jar;C:\Users\ervelden\.m2\repository\org\jboss\shrinkwrap\resolver\shrinkwrap-resolver-spi\3.0.0-alpha-4\shrinkwrap-resolver-spi-3.0.0-alpha-4.jar;C:\Users\ervelden\.m2\repository\org\jboss\shrinkwrap\resolver\shrinkwrap-resolver-api-maven\3.0.0-alpha-4\shrinkwrap-resolver-api-maven-3.0.0-alpha-4.jar;C:\Users\ervelden\.m2\repository\org\apache\maven\maven-model\3.3.9\maven-model-3.3.9.jar;C:\Users\ervelden\.m2\repository\org\apache\commons\commons-lang3\3.4\commons-lang3-3.4.jar;C:\Users\ervelden\.m2\repository\org\jboss\shrinkwrap\resolver\shrinkwrap-resolver-spi-maven\3.0.0-alpha-4\shrinkwrap-resolver-spi-maven-3.0.0-alpha-4.jar;C:\Users\ervelden\.m2\repository\org\jboss\shrinkwrap\resolver\shrinkwrap-resolver-api-maven-archive\3.0.0-alpha-4\shrinkwrap-resolver-api-maven-archive-3.0.0-alpha-4.jar;C:\Users\ervelden\.m2\repository\org\jboss\shrinkwrap\resolver\shrinkwrap-resolver-impl-maven\3.0.0-alpha-4\shrinkwrap-resolver-impl-maven-3.0.0-alpha-4.jar;C:\Users\ervelden\.m2\repository\org\eclipse\aether\aether-api\1.0.2.v20150114\aether-api-1.0.2.v20150114.jar;C:\Users\ervelden\.m2\repository\org\eclipse\aether\aether-impl\1.0.2.v20150114\aether-impl-1.0.2.v20150114.jar;C:\Users\ervelden\.m2\repository\org\eclipse\aether\aether-spi\1.0.2.v20150114\aether-spi-1.0.2.v20150114.jar;C:\Users\ervelden\.m2\repository\org\eclipse\aether\aether-util\1.0.2.v20150114\aether-util-1.0.2.v20150114.jar;C:\Users\ervelden\.m2\repository\org\eclipse\aether\aether-connector-basic\1.0.2.v20150114\aether-connector-basic-1.0.2.v20150114.jar;C:\Users\ervelden\.m2\repository\org\eclipse\aether\aether-transport-wagon\1.0.2.v20150114\aether-transport-wagon-1.0.2.v20150114.jar;C:\Users\ervelden\.m2\repository\org\apache\maven\maven-aether-provider\3.3.9\maven-aether-provider-3.3.9.jar;C:\Users\ervelden\.m2\repository\org\codehaus\plexus\plexus-component-annotations\1.6\plexus-component-annotations-1.6.jar;C:\Users\ervelden\.m2\repository\org\apache\maven\maven-model-builder\3.3.9\maven-model-builder-3.3.9.jar;C:\Users\ervelden\.m2\repository\org\apache\maven\maven-artifact\3.3.9\maven-artifact-3.3.9.jar;C:\Users\ervelden\.m2\repository\org\apache\maven\maven-builder-support\3.3.9\maven-builder-support-3.3.9.jar;C:\Users\ervelden\.m2\repository\org\apache\maven\maven-repository-metadata\3.3.9\maven-repository-metadata-3.3.9.jar;C:\Users\ervelden\.m2\repository\org\apache\maven\maven-settings\3.3.9\maven-settings-3.3.9.jar;C:\Users\ervelden\.m2\repository\org\apache\maven\maven-settings-builder\3.3.9\maven-settings-builder-3.3.9.jar;C:\Users\ervelden\.m2\repository\com\google\guava\guava\18.0\guava-18.0.jar;C:\Users\ervelden\.m2\repository\org\codehaus\plexus\plexus-interpolation\1.21\plexus-interpolation-1.21.jar;C:\Users\ervelden\.m2\repository\org\codehaus\plexus\plexus-utils\3.0.22\plexus-utils-3.0.22.jar;C:\Users\ervelden\.m2\repository\org\sonatype\plexus\plexus-sec-dispatcher\1.3\plexus-sec-dispatcher-1.3.jar;C:\Users\ervelden\.m2\repository\org\sonatype\plexus\plexus-cipher\1.7\plexus-cipher-1.7.jar;C:\Users\ervelden\.m2\repository\org\apache\maven\wagon\wagon-provider-api\2.10\wagon-provider-api-2.10.jar;C:\Users\ervelden\.m2\repository\org\apache\maven\wagon\wagon-file\2.10\wagon-file-2.10.jar;C:\Users\ervelden\.m2\repository\commons-lang\commons-lang\2.6\commons-lang-2.6.jar;C:\Users\ervelden\.m2\repository\org\apache\maven\wagon\wagon-http-lightweight\2.10\wagon-http-lightweight-2.10.jar;C:\Users\ervelden\.m2\repository\org\apache\maven\wagon\wagon-http-shared\2.10\wagon-http-shared-2.10.jar;C:\Users\ervelden\.m2\repository\org\jsoup\jsoup\1.7.2\jsoup-1.7.2.jar;C:\Users\ervelden\.m2\repository\commons-io\commons-io\2.2\commons-io-2.2.jar;C:\Users\ervelden\.m2\repository\org\jboss\shrinkwrap\resolver\shrinkwrap-resolver-impl-maven-archive\3.0.0-alpha-4\shrinkwrap-resolver-impl-maven-archive-3.0.0-alpha-4.jar;C:\Users\ervelden\.m2\repository\org\jboss\shrinkwrap\resolver\shrinkwrap-resolver-spi-maven-archive\3.0.0-alpha-4\shrinkwrap-resolver-spi-maven-archive-3.0.0-alpha-4.jar;C:\Users\ervelden\.m2\repository\org\eclipse\sisu\org.eclipse.sisu.plexus\0.3.2\org.eclipse.sisu.plexus-0.3.2.jar;C:\Users\ervelden\.m2\repository\javax\enterprise\cdi-api\1.0\cdi-api-1.0.jar;C:\Users\ervelden\.m2\repository\javax\annotation\jsr250-api\1.0\jsr250-api-1.0.jar;C:\Users\ervelden\.m2\repository\javax\inject\javax.inject\1\javax.inject-1.jar;C:\Users\ervelden\.m2\repository\org\eclipse\sisu\org.eclipse.sisu.inject\0.3.2\org.eclipse.sisu.inject-0.3.2.jar;C:\Users\ervelden\.m2\repository\org\codehaus\plexus\plexus-compiler-javac\2.7\plexus-compiler-javac-2.7.jar;C:\Users\ervelden\.m2\repository\org\codehaus\plexus\plexus-compiler-api\2.7\plexus-compiler-api-2.7.jar;C:\Users\ervelden\.m2\repository\org\jboss\shrinkwrap\resolver\shrinkwrap-resolver-api-maven-embedded\3.0.0-alpha-4\shrinkwrap-resolver-api-maven-embedded-3.0.0-alpha-4.jar;C:\Users\ervelden\.m2\repository\org\apache\maven\shared\maven-invoker\2.2\maven-invoker-2.2.jar;C:\Users\ervelden\.m2\repository\org\jboss\shrinkwrap\resolver\shrinkwrap-resolver-impl-maven-embedded\3.0.0-alpha-4\shrinkwrap-resolver-impl-maven-embedded-3.0.0-alpha-4.jar;C:\Users\ervelden\.m2\repository\commons-codec\commons-codec\1.10\commons-codec-1.10.jar;C:\Users\ervelden\.m2\repository\org\jboss\arquillian\junit\arquillian-junit-container\1.1.13.Final\arquillian-junit-container-1.1.13.Final.jar;C:\Users\ervelden\.m2\repository\org\jboss\arquillian\junit\arquillian-junit-core\1.1.13.Final\arquillian-junit-core-1.1.13.Final.jar;C:\Users\ervelden\.m2\repository\org\jboss\arquillian\test\arquillian-test-api\1.1.13.Final\arquillian-test-api-1.1.13.Final.jar;C:\Users\ervelden\.m2\repository\org\jboss\arquillian\core\arquillian-core-api\1.1.13.Final\arquillian-core-api-1.1.13.Final.jar;C:\Users\ervelden\.m2\repository\org\jboss\arquillian\test\arquillian-test-spi\1.1.13.Final\arquillian-test-spi-1.1.13.Final.jar;C:\Users\ervelden\.m2\repository\org\jboss\arquillian\core\arquillian-core-spi\1.1.13.Final\arquillian-core-spi-1.1.13.Final.jar;C:\Users\ervelden\.m2\repository\org\jboss\arquillian\container\arquillian-container-test-api\1.1.13.Final\arquillian-container-test-api-1.1.13.Final.jar;C:\Users\ervelden\.m2\repository\org\jboss\arquillian\container\arquillian-container-test-spi\1.1.13.Final\arquillian-container-test-spi-1.1.13.Final.jar;C:\Users\ervelden\.m2\repository\org\jboss\arquillian\core\arquillian-core-impl-base\1.1.13.Final\arquillian-core-impl-base-1.1.13.Final.jar;C:\Users\ervelden\.m2\repository\org\jboss\arquillian\test\arquillian-test-impl-base\1.1.13.Final\arquillian-test-impl-base-1.1.13.Final.jar;C:\Users\ervelden\.m2\repository\org\jboss\arquillian\container\arquillian-container-impl-base\1.1.13.Final\arquillian-container-impl-base-1.1.13.Final.jar;C:\Users\ervelden\.m2\repository\org\jboss\arquillian\config\arquillian-config-api\1.1.13.Final\arquillian-config-api-1.1.13.Final.jar;C:\Users\ervelden\.m2\repository\org\jboss\shrinkwrap\descriptors\shrinkwrap-descriptors-spi\2.0.0-alpha-10\shrinkwrap-descriptors-spi-2.0.0-alpha-10.jar;C:\Users\ervelden\.m2\repository\org\jboss\arquillian\container\arquillian-container-test-impl-base\1.1.13.Final\arquillian-container-test-impl-base-1.1.13.Final.jar;C:\Users\ervelden\.m2\repository\org\jboss\shrinkwrap\shrinkwrap-impl-base\1.2.6\shrinkwrap-impl-base-1.2.6.jar;C:\Users\ervelden\.m2\repository\junit\junit\4.12\junit-4.12.jar;C:\Users\ervelden\.m2\repository\org\hamcrest\hamcrest-core\1.3\hamcrest-core-1.3.jar;C:\Users\ervelden\.m2\repository\org\arquillian\container\arquillian-container-chameleon\1.0.0.Beta1\arquillian-container-chameleon-1.0.0.Beta1.jar;C:\Users\ervelden\.m2\repository\org\arquillian\container\arquillian-chameleon-container-model\1.0.0.Beta1\arquillian-chameleon-container-model-1.0.0.Beta1.jar;C:\Users\ervelden\.m2\repository\org\jboss\arquillian\config\arquillian-config-impl-base\1.1.13.Final\arquillian-config-impl-base-1.1.13.Final.jar;C:\Users\ervelden\.m2\repository\org\jboss\arquillian\container\arquillian-container-spi\1.1.13.Final\arquillian-container-spi-1.1.13.Final.jar;C:\Users\ervelden\.m2\repository\org\jboss\shrinkwrap\descriptors\shrinkwrap-descriptors-api-base\2.0.0-alpha-10\shrinkwrap-descriptors-api-base-2.0.0-alpha-10.jar;C:\Users\ervelden\.m2\repository\org\jboss\arquillian\protocol\arquillian-protocol-servlet\1.1.13.Final\arquillian-protocol-servlet-1.1.13.Final.jar;C:\Users\ervelden\.m2\repository\org\jboss\arquillian\testenricher\arquillian-testenricher-ejb\1.1.13.Final\arquillian-testenricher-ejb-1.1.13.Final.jar;C:\Users\ervelden\.m2\repository\org\jboss\arquillian\testenricher\arquillian-testenricher-resource\1.1.13.Final\arquillian-testenricher-resource-1.1.13.Final.jar;C:\Users\ervelden\.m2\repository\org\jboss\arquillian\testenricher\arquillian-testenricher-cdi\1.1.13.Final\arquillian-testenricher-cdi-1.1.13.Final.jar;C:\Users\ervelden\.m2\repository\org\jboss\arquillian\testenricher\arquillian-testenricher-initialcontext\1.1.13.Final\arquillian-testenricher-initialcontext-1.1.13.Final.jar;C:\Users\ervelden\.m2\repository\org\arquillian\spacelift\arquillian-spacelift\1.0.0.Alpha9\arquillian-spacelift-1.0.0.Alpha9.jar;C:\Users\ervelden\.m2\repository\org\a...

        this.classPathEntries.addAll(getClassPathEntries(surefireClassPath));
        this.classPathEntries.addAll(getClassPathEntries(classPath));
/t,

        session.setTransferListener(builder.transferListerer());
/s,
org.jboss.shrinkwrap.resolver.impl.maven.logging.LogTransferListener.<init>() line: 42	
/=
public class LogTransferListener extends AbstractTransferListener {
    // set up new logger with output directed to standard out
    private static final Logger log = Logger.getLogger(LogTransferListener.class.getName());
/t,
        session.setRepositoryListener(builder.repositoryListener());t,
/s,
public class LogRepositoryListener extends AbstractRepositoryListener {
    private static final Logger log = Logger.getLogger(LogRepositoryListener.class.getName());
/t,
        session.setOffline(settings.isOffline());
        session.setMirrorSelector(builder.mirrorSelector());
/s,
org.jboss.shrinkwrap.resolver.impl.maven.bootstrap.MavenManagerBuilder.mirrorSelector() line: 171	
        DefaultMirrorSelector dms = new DefaultMirrorSelector();
		return dms;
/t,
        session.setProxySelector(builder.proxySelector());
/s,
    public ProxySelector proxySelector() {
        DefaultProxySelector dps = new DefaultProxySelector();
		return dps;
/t,
        session.setDependencyManager(builder.dependencyManager());
/s,
    /**
     * Creates a new dependency manager without any management information.
     */
    public ClassicDependencyManager()
    {
        this( 0, Collections.<Object, String> emptyMap(), Collections.<Object, String> emptyMap(),
              Collections.<Object, Boolean> emptyMap(), Collections.<Object, String> emptyMap(),
              Collections.<Object, Collection<Exclusion>> emptyMap() );
    }
/t,
        session.setArtifactDescriptorPolicy(builder.artifactRepositoryPolicy());
/s,
    public SimpleArtifactDescriptorPolicy( boolean ignoreMissing, boolean ignoreInvalid )		/ true, true
    {
        this( ( ignoreMissing ? IGNORE_MISSING : 0 ) | ( ignoreInvalid ? IGNORE_INVALID : 0 ) );
    }
/t,

        session.setDependencyTraverser(builder.dependencyTraverser());
/s,
/**
 * A dependency traverser that excludes the dependencies of fat artifacts from the traversal. Fat artifacts are
 * artifacts that have the property {@link org.eclipse.aether.artifact.ArtifactProperties#INCLUDES_DEPENDENCIES} set to
 * {@code true}.
 * 
 * @see org.eclipse.aether.artifact.Artifact#getProperties()
 */
public final class FatArtifactTraverser
    implements DependencyTraverser
{
    /**
     * Creates a new instance of this dependency traverser.
     */
    public FatArtifactTraverser()
    {
    }
/t,
     
        session.setDependencyGraphTransformer(builder.dependencyGraphTransformer());
/s,
    public DependencyGraphTransformer dependencyGraphTransformer() {
        DependencyGraphTransformer transformer =
                new ConflictResolver(new NearestVersionSelector(), new JavaScopeSelector(),
                        new SimpleOptionalitySelector(), new JavaScopeDeriver());
        return new ChainedDependencyGraphTransformer(transformer, new JavaDependencyContextRefiner());
  

        // set artifact stereotypes
        session.setArtifactTypeRegistry(builder.artifactTypeRegistry());
/s,
    public ArtifactTypeRegistry artifactTypeRegistry() {
        DefaultArtifactTypeRegistry stereotypes = new DefaultArtifactTypeRegistry();
        stereotypes.add(new DefaultArtifactType("pom"));	/ this( id, id, "", "none", false, false );
        stereotypes.add(new DefaultArtifactType("maven-plugin", "jar", "", "java")); / this( id, extension, classifier, language, true, false );
        stereotypes.add(new DefaultArtifactType("jar", "jar", "", "java"));
        stereotypes.add(new DefaultArtifactType("ejb", "jar", "", "java"));
        stereotypes.add(new DefaultArtifactType("ejb-client", "jar", "client", "java"));
        stereotypes.add(new DefaultArtifactType("test-jar", "jar", "tests", "java"));
        stereotypes.add(new DefaultArtifactType("javadoc", "jar", "javadoc", "java"));
        stereotypes.add(new DefaultArtifactType("java-source", "jar", "sources", "java", false, false));
        stereotypes.add(new DefaultArtifactType("war", "war", "", "java", false, true));
        stereotypes.add(new DefaultArtifactType("ear", "ear", "", "java", false, true));
        stereotypes.add(new DefaultArtifactType("rar", "rar", "", "java", false, true));
        stereotypes.add(new DefaultArtifactType("par", "par", "", "java", false, true));
        return stereotypes;
    }
/t,
        // set system properties for interpolation
        session.setSystemProperties(SecurityActions.getProperties());
        session.setConfigProperties(SecurityActions.getProperties());

        return session;	
/t,
org.jboss.shrinkwrap.resolver.impl.maven.MavenWorkingSessionImpl(org.jboss.shrinkwrap.resolver.impl.maven.ConfigurableMavenWorkingSessionImpl).generateSession() line: 161	
        this.session = this.system.getSession(getSettings(), this.useLegacyLocalRepository);
/d,
/t,
org.jboss.shrinkwrap.resolver.impl.maven.MavenWorkingSessionImpl.resolveDependencies(org.jboss.shrinkwrap.resolver.api.maven.strategy.MavenResolutionStrategy) line: 212	
        final CollectRequest request = new CollectRequest(MavenConverter.asDependencies(depsForResolution,
            getSession().getArtifactTypeRegistry()),
/d,
            MavenConverter.asDependencies(depManagement, getSession().getArtifactTypeRegistry()), repos);
/s,
org.jboss.shrinkwrap.resolver.impl.maven.convert.MavenConverter.asDependencies(java.util.List<org.jboss.shrinkwrap.resolver.api.maven.coordinate.MavenDependency>, org.eclipse.aether.artifact.ArtifactTypeRegistry) line: 244	
/=
    public static List<Dependency> asDependencies(List<MavenDependency> dependencies, ArtifactTypeRegistry registry) {
dependencies	Collections$UnmodifiableRandomAccessList<E>  (id=7462) [MavenDependency [org.wildfly.arquillian:wildfly-arquillian-container-managed:jar:2.0.1.Final:compile]]
registry	DefaultArtifactTypeRegistry  (id=8038)	
	types	HashMap<K,V>  (id=8047)	
par=org.eclipse.aether.artifact.DefaultArtifactType@5a2f016d
javadoc=org.eclipse.aether.artifact.DefaultArtifactType@1a38ba58
rar=org.eclipse.aether.artifact.DefaultArtifactType@3ad394e6
maven-plugin=org.eclipse.aether.artifact.DefaultArtifactType@5cbf9e9f
test-jar=org.eclipse.aether.artifact.DefaultArtifactType@6058e535
ejb-client=org.eclipse.aether.artifact.DefaultArtifactType@42deb43a
ear=org.eclipse.aether.artifact.DefaultArtifactType@18e8473e
war=org.eclipse.aether.artifact.DefaultArtifactType@1deb2c43
jar=org.eclipse.aether.artifact.DefaultArtifactType@3bb9efbc
ejb=org.eclipse.aether.artifact.DefaultArtifactType@1cefc4b3
java-source=org.eclipse.aether.artifact.DefaultArtifactType@2b27cc70
pom=org.eclipse.aether.artifact.DefaultArtifactType@6f6a7463
/s,
org.jboss.shrinkwrap.resolver.impl.maven.convert.MavenConverter.asDependency(org.jboss.shrinkwrap.resolver.spi.MavenDependencySPI, org.eclipse.aether.artifact.ArtifactTypeRegistry) line: 239	

        String scope = dependency.getScope().toString();
compile
        return new Dependency(asArtifact(dependency, registry), scope, dependency.isOptional(),
                asExclusions(dependency.getExclusions()));
/s,
org.jboss.shrinkwrap.resolver.impl.maven.convert.MavenConverter.asArtifact(org.jboss.shrinkwrap.resolver.api.maven.coordinate.MavenCoordinate, org.eclipse.aether.artifact.ArtifactTypeRegistry) line: 254	

            return new DefaultArtifact(coordinate.getGroupId(), coordinate.getArtifactId(),
                    coordinate.getClassifier(), coordinate.getPackaging().getExtension(), coordinate.getVersion(), registry.get(coordinate.getPackaging().getId()));	/ coordinate.getPackaging().getId()=jar
coordinate	MavenDependencyImpl  (id=7446)	
	$assertionsDisabled	false	
	delegate	MavenCoordinateImpl  (id=8231)	
		$assertionsDisabled	false	
		EMPTY_STRING	"" (id=990)	
		SEPARATOR_COORDINATE	:	
		artifactId	"wildfly-arquillian-container-managed" (id=8235)	
		classifier	"" (id=990)	
		groupId	"org.wildfly.arquillian" (id=8236)	
		packaging	PackagingType  (id=1933)	/ jar
		version	"2.0.1.Final" (id=7445)	
	exclusions	Collections$UnmodifiableSet<E>  (id=8232)	
	optional	false	
	scope	ScopeType  (id=1980)	
	undeclaredScope	false	
/t,
/s,
org.jboss.shrinkwrap.resolver.impl.maven.coordinate.MavenDependencyImpl.getExclusions() line: 175	
        return this.exclusions;
[MavenDependencyExclusion [org.jboss.arquillian.testenricher:*], MavenDependencyExclusion [org.jboss.arquillian.config:*], MavenDependencyExclusion [org.jboss.arquillian.container:*], MavenDependencyExclusion [org.jboss.arquillian.test:*], MavenDependencyExclusion [org.jboss.shrinkwrap.api:*], MavenDependencyExclusion [org.jboss.shrinkwrap.descriptors:*], MavenDependencyExclusion [org.jboss.shrinkwrap:*], MavenDependencyExclusion [org.jboss.shrinkwrap.resolver:*], MavenDependencyExclusion [org.jboss.arquillian.protocol:*], MavenDependencyExclusion [org.jboss.arquillian.core:*], MavenDependencyExclusion [*:wildfly-arquillian-testenricher-msc]]
/t,
/s,
org.eclipse.aether.graph.Dependency.<init>(org.eclipse.aether.artifact.Artifact, java.lang.String, java.lang.Boolean, java.util.Collection<org.eclipse.aether.graph.Exclusion>) line: 71	
/=
    public Dependency( Artifact artifact, String scope, Boolean optional, Collection<Exclusion> exclusions )
    {
        this( artifact, scope, Exclusions.copy( exclusions ), optional );
artifact	DefaultArtifact  (id=8304)	
	SNAPSHOT	"SNAPSHOT" (id=8335)	
	SNAPSHOT_TIMESTAMP	Pattern  (id=8336)	
	artifactId	"wildfly-arquillian-container-managed" (id=8235)	
	classifier	"" (id=990)	
	extension	"jar" (id=1950)	
	file	null	
	groupId	"org.wildfly.arquillian" (id=8236)	
	properties	Collections$UnmodifiableMap<K,V>  (id=8305)	
	version	"2.0.1.Final" (id=7445)	
/t,
org.jboss.shrinkwrap.resolver.impl.maven.MavenWorkingSessionImpl.resolveDependencies(org.jboss.shrinkwrap.resolver.api.maven.strategy.MavenResolutionStrategy) line: 214	

        final CollectRequest request = new CollectRequest(
		MavenConverter.asDependencies(depsForResolution,getSession().getArtifactTypeRegistry()),
/d,
            MavenConverter.asDependencies(depManagement, getSession().getArtifactTypeRegistry()), repos); / depManagement=[]
/s,
org.jboss.shrinkwrap.resolver.impl.maven.convert.MavenConverter.asDependencies(java.util.List<org.jboss.shrinkwrap.resolver.api.maven.coordinate.MavenDependency>, org.eclipse.aether.artifact.ArtifactTypeRegistry) line: 249	

        for (final MavenDependency d : dependencies) { / []
/n,
/d,
        return list; / []
/t,
/s,
org.eclipse.aether.collection.CollectRequest.<init>(java.util.List<org.eclipse.aether.graph.Dependency>, java.util.List<org.eclipse.aether.graph.Dependency>, java.util.List<org.eclipse.aether.repository.RemoteRepository>) line: 95	

/**
 * A request to collect the transitive dependencies and to build a dependency graph from them. There are three ways to
 * create a dependency graph. First, only the root dependency can be given. Second, a root dependency and direct
 * dependencies can be specified in which case the specified direct dependencies are merged with the direct dependencies
 * retrieved from the artifact descriptor of the root dependency. And last, only direct dependencies can be specified in
 * which case the root node of the resulting graph has no associated dependency.
 * 
 * @see RepositorySystem#collectDependencies(RepositorySystemSession, CollectRequest)
 */
public final class CollectRequest
{

    private Artifact rootArtifact;

    private Dependency root;

    private List<Dependency> dependencies = Collections.emptyList();

    private List<Dependency> managedDependencies = Collections.emptyList();

    private List<RemoteRepository> repositories = Collections.emptyList();

    private String context = "";

    private RequestTrace trace;

    
    /**
     * Creates a new request with the specified properties.
     * 
     * @param dependencies The direct dependencies of some imaginary root, may be {@code null}.
     * @param managedDependencies The dependency management information to apply to the transitive dependencies, may be
     *            {@code null}.
     * @param repositories The repositories to use for the collection, may be {@code null}.
     */
    public CollectRequest( List<Dependency> dependencies, List<Dependency> managedDependencies,
                           List<RemoteRepository> repositories )
    {
        setDependencies( dependencies ); / [org.wildfly.arquillian:wildfly-arquillian-container-managed:jar:2.0.1.Final (compile)]
        setManagedDependencies( managedDependencies ); / []
        setRepositories( repositories ); / [central (http://repo1.maven.org/maven2, default, releases+snapshots)]
    }
/t,
org.jboss.shrinkwrap.resolver.impl.maven.MavenWorkingSessionImpl.resolveDependencies(org.jboss.shrinkwrap.resolver.api.maven.strategy.MavenResolutionStrategy) line: 220	
        final CollectRequest request = new CollectRequest(MavenConverter.asDependencies(depsForResolution,
            getSession().getArtifactTypeRegistry()),
            MavenConverter.asDependencies(depManagement, getSession().getArtifactTypeRegistry()), repos);
/d,
        Collection<ArtifactResult> results = Collections.emptyList();

        // Set the dependency selector used in resolving transitive dependencies based on our transitive exclusion
        // policy abstraction
        final Set<DependencySelector> dependencySelectors = new LinkedHashSet<DependencySelector>(3);
        final TransitiveExclusionPolicy transitiveExclusionPolicy = strategy.getTransitiveExclusionPolicy();
transitiveExclusionPolicy	DefaultTransitiveExclusionPolicy  (id=8367)	 INSTANCE
        final ScopeType[] filteredScopes = transitiveExclusionPolicy.getFilteredScopes();
/s,
    public ScopeType[] getFilteredScopes() {
        return new ScopeType[] { ScopeType.PROVIDED, ScopeType.TEST };
/t,
        final int numFilteredScopes = filteredScopes.length;
        final String[] filteredScopeStrings = new String[numFilteredScopes];
        for (int i = 0; i < numFilteredScopes; i++) {
            filteredScopeStrings[i] = filteredScopes[i].toString();
        }
filteredScopeStrings=[provided, test]
        if (numFilteredScopes > 0) {
            dependencySelectors.add(new ScopeDependencySelector(filteredScopeStrings)); / 
/s,
org.eclipse.aether.util.graph.selector.ScopeDependencySelector.<init>(java.util.Collection<java.lang.String>, java.util.Collection<java.lang.String>) line: 48	
        transitive = false;
        this.included = clone( included );	/ null
        this.excluded = clone( excluded );	/ [provided, test]
/t,
dependencySelectors=[org.eclipse.aether.util.graph.selector.ScopeDependencySelector@df9ab91f]

        if (!transitiveExclusionPolicy.allowOptional()) {
/j,
            dependencySelectors.add(new OptionalDependencySelector());
		}
        if (!transitiveExclusionPolicy.allowOptional()) {
/j,
            dependencySelectors.add(new OptionalDependencySelector());
        }
        dependencySelectors.add(new ExclusionDependencySelector());
        final DependencySelector dependencySelector = new AndDependencySelector(dependencySelectors);
        getSession().setDependencySelector(dependencySelector);
this	MavenWorkingSessionImpl  (id=7435)	
	session	DefaultRepositorySystemSession  (id=7612)	
		dependencySelector	AndDependencySelector  (id=8410)	
			selectors	LinkedHashSet<E>  (id=8411)	
				[0]	ScopeDependencySelector  (id=8391)	
					excluded	ArrayList<E>  (id=8398)	
					included	null	
					transitive	false	
				[1]	OptionalDependencySelector  (id=8406)	
					depth	0	
				[2]	ExclusionDependencySelector  (id=8408)	
					exclusions	Exclusion[0]  (id=8417)	
					hashCode	-963813863

        try {
            results = getSystem().resolveDependencies(getSession(), this, request,
                strategy.getResolutionFilters());
/s,
org.jboss.shrinkwrap.resolver.impl.maven.bootstrap.MavenRepositorySystem.resolveDependencies(org.eclipse.aether.RepositorySystemSession, org.jboss.shrinkwrap.resolver.api.maven.MavenWorkingSession, org.eclipse.aether.collection.CollectRequest, org.jboss.shrinkwrap.resolver.api.maven.filter.MavenResolutionFilter[]) line: 118	

        final DependencyRequest depRequest = new DependencyRequest(request, 
			new MavenResolutionFilterWrap(filters,Collections.unmodifiableList(new ArrayList<MavenDependency>(swrSession.getDependenciesForResolution()))));
request	CollectRequest  (id=8354)	
	dependencies	ArrayList<E>  (id=8202)	[org.wildfly.arquillian:wildfly-arquillian-container-managed:jar:2.0.1.Final (compile)]
	managedDependencies	ArrayList<E>  (id=8349)	[]
	repositories	ArrayList<E>  (id=7601)	[central (http://repo1.maven.org/maven2, default, releases+snapshots)]
filters	MavenResolutionFilter[0]  (id=8553)	[]
swrSession.getDependenciesForResolution()=swrSession.dependencies=[MavenDependency [org.wildfly.arquillian:wildfly-arquillian-container-managed:jar:2.0.1.Final:compile]]
/s,
org.eclipse.aether.resolution.DependencyRequest.<init>(org.eclipse.aether.collection.CollectRequest, org.eclipse.aether.graph.DependencyFilter) line: 68	
/=
    public DependencyRequest( CollectRequest request, DependencyFilter filter )
	
request	CollectRequest  (id=8354)	
	dependencies	ArrayList<E>  (id=8202)	[org.wildfly.arquillian:wildfly-arquillian-container-managed:jar:2.0.1.Final (compile)]

filter	MavenResolutionFilterWrap  (id=8583)	
	dependenciesForResolution	Collections$UnmodifiableRandomAccessList<E>  (id=8581)	
		[0]	MavenDependencyImpl  (id=7446)	
			delegate	MavenCoordinateImpl  (id=8231)	MavenCoordinate [org.wildfly.arquillian:wildfly-arquillian-container-managed:jar:2.0.1.Final]
			exclusions	Collections$UnmodifiableSet<E>  (id=8232) [MavenDependencyExclusion [org.jboss.arquillian.testenricher:*], MavenDependencyExclusion [org.jboss.arquillian.config:*], MavenDependencyExclusion [org.jboss.arquillian.container:*], MavenDependencyExclusion [org.jboss.arquillian.test:*], MavenDependencyExclusion [org.jboss.shrinkwrap.api:*], MavenDependencyExclusion [org.jboss.shrinkwrap.descriptors:*], MavenDependencyExclusion [org.jboss.shrinkwrap:*], MavenDependencyExclusion [org.jboss.shrinkwrap.resolver:*], MavenDependencyExclusion [org.jboss.arquillian.protocol:*], MavenDependencyExclusion [org.jboss.arquillian.core:*], MavenDependencyExclusion [*:wildfly-arquillian-testenricher-msc]]
			optional	false	
			scope	ScopeType  (id=1980)	compile
			undeclaredScope	false	
	filters	MavenResolutionFilter[0]  (id=8553)	

	        setCollectRequest( request );
			setFilter( filter );
/t,
org.jboss.shrinkwrap.resolver.impl.maven.bootstrap.MavenRepositorySystem.resolveDependencies(org.eclipse.aether.RepositorySystemSession, org.jboss.shrinkwrap.resolver.api.maven.MavenWorkingSession, org.eclipse.aether.collection.CollectRequest, org.jboss.shrinkwrap.resolver.api.maven.filter.MavenResolutionFilter[]) line: 121	

        final DependencyRequest depRequest = new DependencyRequest(request, new MavenResolutionFilterWrap(filters,
                Collections.unmodifiableList(new ArrayList<MavenDependency>(swrSession.getDependenciesForResolution()))));
/d,
        DependencyResult result = system.resolveDependencies(repoSession, depRequest);
/s,
org.eclipse.aether.internal.impl.DefaultRepositorySystem.resolveDependencies(org.eclipse.aether.RepositorySystemSession, org.eclipse.aether.resolution.DependencyRequest) line: 322	

        RequestTrace trace = RequestTrace.newChild( request.getTrace(), request );
/s,
org.eclipse.aether.RequestTrace.newChild(org.eclipse.aether.RequestTrace, java.lang.Object) line: 44	
            return new RequestTrace( data );
data	DependencyRequest  (id=8591)	
/t,
        DependencyResult result = new DependencyResult( request );
request	DependencyRequest  (id=8591)	
/s,
org.eclipse.aether.resolution.DependencyResult.<init>(org.eclipse.aether.resolution.DependencyRequest) line: 54	
        this.request = request;
        root = request.getRoot();	/ null
        cycles = Collections.emptyList();
        collectExceptions = Collections.emptyList();
        artifactResults = Collections.emptyList();
/t,
        else if ( request.getCollectRequest() != null )
        {
            CollectResult collectResult;
            try
            {
                request.getCollectRequest().setTrace( trace );
                collectResult = dependencyCollector.collectDependencies( session, request.getCollectRequest() );
/s,
org.eclipse.aether.internal.impl.DefaultDependencyCollector.collectDependencies(org.eclipse.aether.RepositorySystemSession, org.eclipse.aether.collection.CollectRequest) line: 146	
/=
    public CollectResult collectDependencies( RepositorySystemSession session, CollectRequest request )
	
	        session = optimizeSession( session );
/s,
org.eclipse.aether.internal.impl.DefaultDependencyCollector.optimizeSession(org.eclipse.aether.RepositorySystemSession) line: 303	
        DefaultRepositorySystemSession optimized = new DefaultRepositorySystemSession( session );
        optimized.setArtifactTypeRegistry( CachingArtifactTypeRegistry.newInstance( session ) );
        return optimized;
/t,
org.eclipse.aether.internal.impl.DefaultDependencyCollector.collectDependencies(org.eclipse.aether.RepositorySystemSession, org.eclipse.aether.collection.CollectRequest) line: 152	

        RequestTrace trace = RequestTrace.newChild( request.getTrace(), request );

        CollectResult result = new CollectResult( request );

        DependencySelector depSelector = session.getDependencySelector();
session	DefaultRepositorySystemSession  (id=8661)	
	dependencySelector	AndDependencySelector  (id=8410)	
		selectors	LinkedHashSet<E>  (id=8411)	
			[0]	ScopeDependencySelector  (id=8391)	
			[1]	OptionalDependencySelector  (id=8406)	
			[2]	ExclusionDependencySelector  (id=8408)	

        DependencyManager depManager = session.getDependencyManager();
        DependencyTraverser depTraverser = session.getDependencyTraverser();
        VersionFilter verFilter = session.getVersionFilter();

        Dependency root = request.getRoot();
        List<RemoteRepository> repositories = request.getRepositories(); [central (http://repo1.maven.org/maven2, default, releases+snapshots)]
        List<Dependency> dependencies = request.getDependencies(); [org.wildfly.arquillian:wildfly-arquillian-container-managed:jar:2.0.1.Final (compile)]
        List<Dependency> managedDependencies = request.getManagedDependencies();

        Map<String, Object> stats = logger.isDebugEnabled() ? new LinkedHashMap<String, Object>() : null;
        long time1 = System.currentTimeMillis();

        DefaultDependencyNode node;
        if ( root != null )
/n,
        else
        {
            node = new DefaultDependencyNode( request.getRootArtifact() );
/s,
    /**
     * Creates a new root node with the specified artifact as its label. Note that the new node has no dependency, i.e.
     * {@link #getDependency()} will return {@code null}. Put differently, the specified artifact will not be subject to
     * dependency collection/resolution.
     * 
     * @param artifact The artifact to use as label for this node, may be {@code null}.
     */
    public DefaultDependencyNode( Artifact artifact )
    {
        this.artifact = artifact;						/ null
        children = new ArrayList<DependencyNode>( 0 );
        aliases = relocations = Collections.emptyList();
        repositories = Collections.emptyList();
        context = "";
        data = Collections.emptyMap();
    }
/t,
org.eclipse.aether.internal.impl.DefaultDependencyCollector.collectDependencies(org.eclipse.aether.RepositorySystemSession, org.eclipse.aether.collection.CollectRequest) line: 235	
            node = new DefaultDependencyNode( request.getRootArtifact() );
        }
/d,
        result.setRoot( node );
        boolean traverse = root == null || depTraverser == null || depTraverser.traverseDependency( root );
        String errorPath = null;
        if ( traverse && !dependencies.isEmpty() )
/j,
        {
            DataPool pool = new DataPool( session );
/s,
org.eclipse.aether.internal.impl.DataPool.<init>(org.eclipse.aether.RepositorySystemSession) line: 68	

        RepositoryCache cache = session.getCache();

        if ( cache != null )
/n,
        if ( artifacts == null )
        {
            artifacts = new ObjectPool<Artifact>();
        if ( dependencies == null )
        {
            dependencies = new ObjectPool<Dependency>();
        if ( descriptors == null )
        {
            descriptors = Collections.synchronizedMap( new WeakHashMap<Object, Descriptor>( 256 ) );
/t,
org.eclipse.aether.internal.impl.DefaultDependencyCollector.collectDependencies(org.eclipse.aether.RepositorySystemSession, org.eclipse.aether.collection.CollectRequest) line: 243	
            DataPool pool = new DataPool( session );
/d,
            NodeStack nodes = new NodeStack();
            nodes.push( node );					/ hierboven gemaakte root	,

            DefaultDependencyCollectionContext context =
                new DefaultDependencyCollectionContext( session, request.getRootArtifact(), root, managedDependencies );
/ request.getRootArtifact()=request.rootArtifact=null, root=null

            DefaultVersionFilterContext versionContext = new DefaultVersionFilterContext( session );

            Args args = new Args( session, trace, pool, nodes, context, versionContext, request );
            Results results = new Results( result, session );

            process( args, results, dependencies, repositories,
                     depSelector != null ? depSelector.deriveChildSelector( context ) : null,
                     depManager != null ? depManager.deriveChildManager( context ) : null,
                     depTraverser != null ? depTraverser.deriveChildTraverser( context ) : null,
                     verFilter != null ? verFilter.deriveChildFilter( context ) : null );
/s,
org.eclipse.aether.util.graph.selector.AndDependencySelector.deriveChildSelector(org.eclipse.aether.collection.DependencyCollectionContext) line: 121	
        for ( DependencySelector selector : selectors )
this	AndDependencySelector  (id=8410)	
	selectors	LinkedHashSet<E>  (id=8411)	
		[0]	ScopeDependencySelector  (id=8391)	
		[1]	OptionalDependencySelector  (id=8406)	
		[2]	ExclusionDependencySelector  (id=8408)	

        for ( DependencySelector selector : selectors )
        {
            DependencySelector childSelector = selector.deriveChildSelector( context );
/s,
    public DependencySelector deriveChildSelector( DependencyCollectionContext context )
    {
        if ( this.transitive || context.getDependency() == null )
/j,
        {
            return this;
/t,
/ volgende,	
        for ( DependencySelector selector : selectors )
        {
            DependencySelector childSelector = selector.deriveChildSelector( context );
/ TODO
        return new AndDependencySelector( childSelectors );
childSelectors	LinkedHashSet<E>  (id=8801)	
	[0]	ScopeDependencySelector  (id=8391)	
	[1]	OptionalDependencySelector  (id=8800)	
	[2]	ExclusionDependencySelector  (id=8408)	
/t,
/s,
org.eclipse.aether.util.graph.manager.ClassicDependencyManager.deriveChildManager(org.eclipse.aether.collection.DependencyCollectionContext) line: 84	
        return new ClassicDependencyManager( depth + 1, managedVersions, managedScopes, managedOptionals,
                                             managedLocalPaths, managedExclusions );/ 1,{},{},{},{},{}
/t,
/s,
org.eclipse.aether.util.graph.traverser.FatArtifactTraverser.deriveChildTraverser(org.eclipse.aether.collection.DependencyCollectionContext) line: 44	
        return this;
/t,
/s,
org.eclipse.aether.internal.impl.DefaultDependencyCollector.process(org.eclipse.aether.internal.impl.DefaultDependencyCollector.Args, org.eclipse.aether.internal.impl.DefaultDependencyCollector.Results, java.util.List<org.eclipse.aether.graph.Dependency>, java.util.List<org.eclipse.aether.repository.RemoteRepository>, org.eclipse.aether.collection.DependencySelector, org.eclipse.aether.collection.DependencyManager, org.eclipse.aether.collection.DependencyTraverser, org.eclipse.aether.collection.VersionFilter) line: 349	

/ Intermezzo

Thread [main] (Suspended)	
	org.eclipse.aether.internal.impl.DefaultDependencyCollector.process(org.eclipse.aether.internal.impl.DefaultDependencyCollector.Args, org.eclipse.aether.internal.impl.DefaultDependencyCollector.Results, java.util.List<org.eclipse.aether.graph.Dependency>, java.util.List<org.eclipse.aether.repository.RemoteRepository>, org.eclipse.aether.collection.DependencySelector, org.eclipse.aether.collection.DependencyManager, org.eclipse.aether.collection.DependencyTraverser, org.eclipse.aether.collection.VersionFilter) line: 349	
	org.eclipse.aether.internal.impl.DefaultDependencyCollector.collectDependencies(org.eclipse.aether.RepositorySystemSession, org.eclipse.aether.collection.CollectRequest) line: 254	
	org.eclipse.aether.internal.impl.DefaultRepositorySystem.resolveDependencies(org.eclipse.aether.RepositorySystemSession, org.eclipse.aether.resolution.DependencyRequest) line: 341	
	org.jboss.shrinkwrap.resolver.impl.maven.bootstrap.MavenRepositorySystem.resolveDependencies(org.eclipse.aether.RepositorySystemSession, org.jboss.shrinkwrap.resolver.api.maven.MavenWorkingSession, org.eclipse.aether.collection.CollectRequest, org.jboss.shrinkwrap.resolver.api.maven.filter.MavenResolutionFilter[]) line: 121	
	org.jboss.shrinkwrap.resolver.impl.maven.MavenWorkingSessionImpl.resolveDependencies(org.jboss.shrinkwrap.resolver.api.maven.strategy.MavenResolutionStrategy) line: 239	
	org.jboss.shrinkwrap.resolver.impl.maven.MavenStrategyStageImpl(org.jboss.shrinkwrap.resolver.impl.maven.MavenStrategyStageBaseImpl<STRATEGYSTAGETYPE,FORMATSTAGETYPE>).using(org.jboss.shrinkwrap.resolver.api.maven.strategy.MavenResolutionStrategy) line: 70	
	org.jboss.shrinkwrap.resolver.impl.maven.MavenStrategyStageImpl(org.jboss.shrinkwrap.resolver.impl.maven.MavenStrategyStageBaseImpl<STRATEGYSTAGETYPE,FORMATSTAGETYPE>).withTransitivity() line: 52	
	org.jboss.shrinkwrap.resolver.impl.maven.MavenStrategyStageImpl(org.jboss.shrinkwrap.resolver.impl.maven.MavenStrategyStageBaseImpl<STRATEGYSTAGETYPE,FORMATSTAGETYPE>).withTransitivity() line: 39	
	org.arquillian.container.chameleon.controller.Resolver.resolve(java.io.File, org.jboss.shrinkwrap.resolver.api.maven.coordinate.MavenDependency[]) line: 46	
	org.arquillian.container.chameleon.controller.TargetController.resolveClasspathDependencies(org.arquillian.container.chameleon.spi.model.ContainerAdapter, java.io.File) line: 179	
	org.arquillian.container.chameleon.controller.TargetController.<init>(org.arquillian.container.chameleon.spi.model.ContainerAdapter, org.jboss.arquillian.core.api.Injector, java.io.File) line: 53	
	org.arquillian.container.chameleon.ChameleonContainer.init(org.arquillian.container.chameleon.ChameleonConfiguration, org.jboss.arquillian.config.descriptor.api.ContainerDef) line: 85	
	org.arquillian.container.chameleon.InitiateContainer.initiateChameleon(org.jboss.arquillian.container.spi.event.SetupContainer) line: 70	
	org.arquillian.container.chameleon.InitiateContainer.setup(org.jboss.arquillian.core.spi.EventContext<org.jboss.arquillian.container.spi.event.SetupContainer>) line: 39	
	sun.reflect.NativeMethodAccessorImpl.invoke0(java.lang.reflect.Method, java.lang.Object, java.lang.Object[]) line: not available [native method]	
	sun.reflect.NativeMethodAccessorImpl.invoke(java.lang.Object, java.lang.Object[]) line: 62	
	sun.reflect.DelegatingMethodAccessorImpl.invoke(java.lang.Object, java.lang.Object[]) line: 43	
	java.lang.reflect.Method.invoke(java.lang.Object, java.lang.Object...) line: 498	
	org.jboss.arquillian.core.impl.ObserverImpl.invoke(org.jboss.arquillian.core.spi.Manager, java.lang.Object) line: 96	
	org.jboss.arquillian.core.impl.EventContextImpl<T>.proceed() line: 92	
	org.jboss.arquillian.core.impl.ManagerImpl.fire(T, org.jboss.arquillian.core.spi.NonManagedObserver<T>) line: 143	
	org.jboss.arquillian.core.impl.ManagerImpl.fire(java.lang.Object) line: 114	
	org.jboss.arquillian.core.impl.EventImpl<T>.fire(T) line: 67	
	org.jboss.arquillian.container.impl.client.container.ContainerLifecycleController$1.perform(org.jboss.arquillian.container.spi.Container) line: 62	
	org.jboss.arquillian.container.impl.client.container.ContainerLifecycleController$1.perform(java.lang.Object) line: 55	
	org.jboss.arquillian.container.impl.client.container.ContainerLifecycleController.forEachContainer(org.jboss.arquillian.container.impl.client.container.ContainerLifecycleController.Operation<org.jboss.arquillian.container.spi.Container>) line: 209	
	org.jboss.arquillian.container.impl.client.container.ContainerLifecycleController.setupContainers(org.jboss.arquillian.container.spi.event.SetupContainers) line: 54	
	sun.reflect.NativeMethodAccessorImpl.invoke0(java.lang.reflect.Method, java.lang.Object, java.lang.Object[]) line: not available [native method]	
	sun.reflect.NativeMethodAccessorImpl.invoke(java.lang.Object, java.lang.Object[]) line: 62	
	sun.reflect.DelegatingMethodAccessorImpl.invoke(java.lang.Object, java.lang.Object[]) line: 43	
	java.lang.reflect.Method.invoke(java.lang.Object, java.lang.Object...) line: 498	
	org.jboss.arquillian.core.impl.ObserverImpl.invoke(org.jboss.arquillian.core.spi.Manager, java.lang.Object) line: 96	
	org.jboss.arquillian.core.impl.EventContextImpl<T>.invokeObservers() line: 103	
	org.jboss.arquillian.core.impl.EventContextImpl<T>.proceed() line: 85	
	org.jboss.arquillian.core.impl.ManagerImpl.fire(T, org.jboss.arquillian.core.spi.NonManagedObserver<T>) line: 143	
	org.jboss.arquillian.core.impl.ManagerImpl.fire(java.lang.Object) line: 114	
	org.jboss.arquillian.core.impl.EventImpl<T>.fire(T) line: 67	
	org.jboss.arquillian.container.test.impl.client.ContainerEventController.execute(org.jboss.arquillian.test.spi.event.suite.BeforeSuite) line: 85	
	sun.reflect.NativeMethodAccessorImpl.invoke0(java.lang.reflect.Method, java.lang.Object, java.lang.Object[]) line: not available [native method]	
	sun.reflect.NativeMethodAccessorImpl.invoke(java.lang.Object, java.lang.Object[]) line: 62	
	sun.reflect.DelegatingMethodAccessorImpl.invoke(java.lang.Object, java.lang.Object[]) line: 43	
	java.lang.reflect.Method.invoke(java.lang.Object, java.lang.Object...) line: 498	
	org.jboss.arquillian.core.impl.ObserverImpl.invoke(org.jboss.arquillian.core.spi.Manager, java.lang.Object) line: 96	
	org.jboss.arquillian.core.impl.EventContextImpl<T>.invokeObservers() line: 103	
	org.jboss.arquillian.core.impl.EventContextImpl<T>.proceed() line: 85	
	org.jboss.arquillian.test.impl.TestContextHandler.createSuiteContext(org.jboss.arquillian.core.spi.EventContext<org.jboss.arquillian.test.spi.event.suite.SuiteEvent>) line: 73	
	sun.reflect.NativeMethodAccessorImpl.invoke0(java.lang.reflect.Method, java.lang.Object, java.lang.Object[]) line: not available [native method]	
	sun.reflect.NativeMethodAccessorImpl.invoke(java.lang.Object, java.lang.Object[]) line: 62	
	sun.reflect.DelegatingMethodAccessorImpl.invoke(java.lang.Object, java.lang.Object[]) line: 43	
	java.lang.reflect.Method.invoke(java.lang.Object, java.lang.Object...) line: 498	
	org.jboss.arquillian.core.impl.ObserverImpl.invoke(org.jboss.arquillian.core.spi.Manager, java.lang.Object) line: 96	
	org.jboss.arquillian.core.impl.EventContextImpl<T>.proceed() line: 92	
	org.jboss.arquillian.core.impl.ManagerImpl.fire(T, org.jboss.arquillian.core.spi.NonManagedObserver<T>) line: 143	
	org.jboss.arquillian.core.impl.ManagerImpl.fire(java.lang.Object) line: 114	
	org.jboss.arquillian.test.impl.EventTestRunnerAdaptor.beforeSuite() line: 75	
	org.jboss.arquillian.junit.Arquillian.run(org.junit.runner.notification.RunNotifier) line: 116	
	org.apache.maven.surefire.junit4.JUnit4Provider.execute(java.lang.Class<?>, org.junit.runner.notification.RunNotifier, java.lang.String[]) line: 264	
	org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(java.lang.Class<?>, org.apache.maven.surefire.report.RunListener, org.junit.runner.notification.RunNotifier) line: 153	
	org.apache.maven.surefire.junit4.JUnit4Provider.invoke(java.lang.Object) line: 124	
	sun.reflect.NativeMethodAccessorImpl.invoke0(java.lang.reflect.Method, java.lang.Object, java.lang.Object[]) line: not available [native method]	
	sun.reflect.NativeMethodAccessorImpl.invoke(java.lang.Object, java.lang.Object[]) line: 62	
	sun.reflect.DelegatingMethodAccessorImpl.invoke(java.lang.Object, java.lang.Object[]) line: 43	
	java.lang.reflect.Method.invoke(java.lang.Object, java.lang.Object...) line: 498	
	org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray2(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]) line: 208	
	org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(java.lang.Object) line: 159	
	org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(java.lang.Object, java.lang.ClassLoader, java.lang.ClassLoader, java.lang.Object, org.apache.maven.surefire.booter.ProviderConfiguration, boolean, org.apache.maven.surefire.booter.StartupConfiguration, boolean) line: 87	
	org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(java.lang.Object, java.lang.ClassLoader, org.apache.maven.surefire.booter.StartupConfiguration, org.apache.maven.surefire.booter.ProviderConfiguration, java.io.PrintStream) line: 153	
	org.apache.maven.surefire.booter.ForkedBooter.main(java.lang.String[]) line: 95	



/ Einde Intermezzo

        for ( Dependency dependency : dependencies )
        {
            processDependency( args, results, repositories, depSelector, depManager, depTraverser, verFilter,
                               dependency );
/s,
org.eclipse.aether.internal.impl.DefaultDependencyCollector.processDependency(org.eclipse.aether.internal.impl.DefaultDependencyCollector.Args, org.eclipse.aether.internal.impl.DefaultDependencyCollector.Results, java.util.List<org.eclipse.aether.repository.RemoteRepository>, org.eclipse.aether.collection.DependencySelector, org.eclipse.aether.collection.DependencyManager, org.eclipse.aether.collection.DependencyTraverser, org.eclipse.aether.collection.VersionFilter, org.eclipse.aether.graph.Dependency) line: 361	

        List<Artifact> relocations = Collections.emptyList();
        boolean disableVersionManagement = false;
        processDependency( args, results, repositories, depSelector, depManager, depTraverser, verFilter, dependency,
                           relocations, disableVersionManagement );
/s,
org.eclipse.aether.internal.impl.DefaultDependencyCollector.processDependency(org.eclipse.aether.internal.impl.DefaultDependencyCollector.Args, org.eclipse.aether.internal.impl.DefaultDependencyCollector.Results, java.util.List<org.eclipse.aether.repository.RemoteRepository>, org.eclipse.aether.collection.DependencySelector, org.eclipse.aether.collection.DependencyManager, org.eclipse.aether.collection.DependencyTraverser, org.eclipse.aether.collection.VersionFilter, org.eclipse.aether.graph.Dependency, java.util.List<org.eclipse.aether.artifact.Artifact>, boolean) line: 373	

        if ( depSelector != null && !depSelector.selectDependency( dependency ) )
/n,
        {
            return;
/n,
        }

        PremanagedDependency preManaged =
            PremanagedDependency.create( depManager, dependency, disableVersionManagement, args.premanagedState );
/s,
org.eclipse.aether.internal.impl.DefaultDependencyCollector$PremanagedDependency.create(org.eclipse.aether.collection.DependencyManager, org.eclipse.aether.graph.Dependency, boolean, boolean) line: 847	

            return new PremanagedDependency( premanagedVersion, premanagedScope, premanagedOptional, managedBits,
                                             dependency, premanagedState );
        }
/t,
org.eclipse.aether.internal.impl.DefaultDependencyCollector.processDependency(org.eclipse.aether.internal.impl.DefaultDependencyCollector.Args, org.eclipse.aether.internal.impl.DefaultDependencyCollector.Results, java.util.List<org.eclipse.aether.repository.RemoteRepository>, org.eclipse.aether.collection.DependencySelector, org.eclipse.aether.collection.DependencyManager, org.eclipse.aether.collection.DependencyTraverser, org.eclipse.aether.collection.VersionFilter, org.eclipse.aether.graph.Dependency, java.util.List<org.eclipse.aether.artifact.Artifact>, boolean) line: 382	

       PremanagedDependency preManaged =
            PremanagedDependency.create( depManager, dependency, disableVersionManagement, args.premanagedState );
        dependency = preManaged.managedDependency;
org.wildfly.arquillian:wildfly-arquillian-container-managed:jar:2.0.1.Final (compile)

        boolean noDescriptor = isLackingDescriptor( dependency.getArtifact() );
false
/ want er is geen localPath	,
/s,
        return artifact.getProperty( ArtifactProperties.LOCAL_PATH, null ) != null;
/t,
        boolean traverse = !noDescriptor && ( depTraverser == null || depTraverser.traverseDependency( dependency ) );
/s,
org.eclipse.aether.util.graph.traverser.FatArtifactTraverser.traverseDependency(org.eclipse.aether.graph.Dependency) line: 38 
        String prop = dependency.getArtifact().getProperty( ArtifactProperties.INCLUDES_DEPENDENCIES, "" ); / includesDependencies
false
        return !Boolean.parseBoolean( prop );
/t,
org.eclipse.aether.internal.impl.DefaultDependencyCollector.processDependency(org.eclipse.aether.internal.impl.DefaultDependencyCollector.Args, org.eclipse.aether.internal.impl.DefaultDependencyCollector.Results, java.util.List<org.eclipse.aether.repository.RemoteRepository>, org.eclipse.aether.collection.DependencySelector, org.eclipse.aether.collection.DependencyManager, org.eclipse.aether.collection.DependencyTraverser, org.eclipse.aether.collection.VersionFilter, org.eclipse.aether.graph.Dependency, java.util.List<org.eclipse.aether.artifact.Artifact>, boolean) line: 390	

        try
        {
            VersionRangeRequest rangeRequest = createVersionRangeRequest( args, repositories, dependency );
/s,
org.eclipse.aether.internal.impl.DefaultDependencyCollector.createVersionRangeRequest(org.eclipse.aether.internal.impl.DefaultDependencyCollector.Args, java.util.List<org.eclipse.aether.repository.RemoteRepository>, org.eclipse.aether.graph.Dependency) line: 599	
	...
/t,

            rangeResult = cachedResolveRangeResult( rangeRequest, args.pool, args.session );
/s,
org.eclipse.aether.internal.impl.DefaultDependencyCollector.cachedResolveRangeResult(org.eclipse.aether.resolution.VersionRangeRequest, org.eclipse.aether.internal.impl.DataPool, org.eclipse.aether.RepositorySystemSession) line: 611	

        Object key = pool.toKey( rangeRequest );
rangeRequest=org.wildfly.arquillian:wildfly-arquillian-container-managed:jar:2.0.1.Final < [central (http://repo1.maven.org/maven2, default, releases+snapshots)]
/s,
org.eclipse.aether.internal.impl.DataPool$ConstraintKey.<init>(org.eclipse.aether.resolution.VersionRangeRequest) line: 296	
            artifact = request.getArtifact();
            repositories = request.getRepositories();
            hashCode = artifact.hashCode();
/t,
org.eclipse.aether.internal.impl.DefaultDependencyCollector.cachedResolveRangeResult(org.eclipse.aether.resolution.VersionRangeRequest, org.eclipse.aether.internal.impl.DataPool, org.eclipse.aether.RepositorySystemSession) line: 612	

        Object key = pool.toKey( rangeRequest );
/d,
        VersionRangeResult rangeResult = pool.getConstraint( key, rangeRequest );
        if ( rangeResult == null )
/j,
        {
            rangeResult = versionRangeResolver.resolveVersionRange( session, rangeRequest );
/s,
org.apache.maven.repository.internal.DefaultVersionRangeResolver.resolveVersionRange(org.eclipse.aether.RepositorySystemSession, org.eclipse.aether.resolution.VersionRangeRequest) line: 149
	
        VersionRangeResult result = new VersionRangeResult( request );

        VersionScheme versionScheme = new GenericVersionScheme();

        VersionConstraint versionConstraint;
        try
        {
            versionConstraint = versionScheme.parseVersionConstraint( request.getArtifact().getVersion() ); / 2.0.1.Final
/s,
org.eclipse.aether.util.version.GenericVersionScheme.parseVersionConstraint(java.lang.String) line: 113	
       Collection<VersionRange> ranges = new ArrayList<VersionRange>();
        if ( ranges.isEmpty() )
        {
            result = new GenericVersionConstraint( parseVersion( constraint ) ); constraint="2.0.1.Final"
result	GenericVersionConstraint  (id=8915)	
	range	null	
	version	GenericVersion  (id=8904)	
		hash	154846	
		items	GenericVersion$Item[3]  (id=8905)	
			[0]	GenericVersion$Item  (id=8909)	
			[1]	GenericVersion$Item  (id=8910)	
			[2]	GenericVersion$Item  (id=8911)	
		version	"2.0.1.Final" (id=7445)	
        return result;
/t,
org.apache.maven.repository.internal.DefaultVersionRangeResolver.resolveVersionRange(org.eclipse.aether.RepositorySystemSession, org.eclipse.aether.resolution.VersionRangeRequest) line: 162	
            versionConstraint = versionScheme.parseVersionConstraint( request.getArtifact().getVersion() );
/d,
        result.setVersionConstraint( versionConstraint );

        if ( versionConstraint.getRange() == null )
        {
            result.addVersion( versionConstraint.getVersion() );
	return result;
/t,
org.eclipse.aether.internal.impl.DefaultDependencyCollector.cachedResolveRangeResult(org.eclipse.aether.resolution.VersionRangeRequest, org.eclipse.aether.internal.impl.DataPool, org.eclipse.aether.RepositorySystemSession) line: 616	

            rangeResult = versionRangeResolver.resolveVersionRange( session, rangeRequest );
/d,
            pool.putConstraint( key, rangeResult );
        return rangeResult;
/t,
org.eclipse.aether.internal.impl.DefaultDependencyCollector.processDependency(org.eclipse.aether.internal.impl.DefaultDependencyCollector.Args, org.eclipse.aether.internal.impl.DefaultDependencyCollector.Results, java.util.List<org.eclipse.aether.repository.RemoteRepository>, org.eclipse.aether.collection.DependencySelector, org.eclipse.aether.collection.DependencyManager, org.eclipse.aether.collection.DependencyTraverser, org.eclipse.aether.collection.VersionFilter, org.eclipse.aether.graph.Dependency, java.util.List<org.eclipse.aether.artifact.Artifact>, boolean) line: 394	

            rangeResult = cachedResolveRangeResult( rangeRequest, args.pool, args.session );
/d,
            versions = filterVersions( dependency, rangeResult, verFilter, args.versionContext );
[2.0.1.Final]
/ doet niets in ons geval	,

        for ( Version version : versions )
        {
            Artifact originalArtifact = dependency.getArtifact().setVersion( version.toString() );
/ doet niets, was al,
            Dependency d = dependency.setArtifact( originalArtifact );
/ doet niets, was al,
            ArtifactDescriptorRequest descriptorRequest = createArtifactDescriptorRequest( args, repositories, d );
/ al eens geweest	,
            final ArtifactDescriptorResult descriptorResult =
                getArtifactDescriptorResult( args, results, noDescriptor, d, descriptorRequest );
/s,
org.eclipse.aether.internal.impl.DefaultDependencyCollector.getArtifactDescriptorResult(org.eclipse.aether.internal.impl.DefaultDependencyCollector$Args, org.eclipse.aether.internal.impl.DefaultDependencyCollector$Results, boolean, org.eclipse.aether.graph.Dependency, org.eclipse.aether.resolution.ArtifactDescriptorRequest) line: 519	

        return noDescriptor
/n,
            ? new ArtifactDescriptorResult( descriptorRequest )
            : resolveCachedArtifactDescriptor( args.pool, descriptorRequest, args.session, d, results, args );
/s,
org.eclipse.aether.internal.impl.DefaultDependencyCollector.resolveCachedArtifactDescriptor(org.eclipse.aether.internal.impl.DataPool, org.eclipse.aether.resolution.ArtifactDescriptorRequest, org.eclipse.aether.RepositorySystemSession, org.eclipse.aether.graph.Dependency, org.eclipse.aether.internal.impl.DefaultDependencyCollector$Results, org.eclipse.aether.internal.impl.DefaultDependencyCollector$Args) line: 529	

        Object key = pool.toKey( descriptorRequest );/ =        return request.getArtifact();
        ArtifactDescriptorResult descriptorResult = pool.getDescriptor( key, descriptorRequest );
        if ( descriptorResult == null )
/j,
        {
            try
            {
                descriptorResult = descriptorReader.readArtifactDescriptor( session, descriptorRequest );
/ TODO (duurde lang)
                pool.putDescriptor( key, descriptorResult );
        return descriptorResult;
/t,
org.eclipse.aether.internal.impl.DefaultDependencyCollector.processDependency(org.eclipse.aether.internal.impl.DefaultDependencyCollector.Args, org.eclipse.aether.internal.impl.DefaultDependencyCollector.Results, java.util.List<org.eclipse.aether.repository.RemoteRepository>, org.eclipse.aether.collection.DependencySelector, org.eclipse.aether.collection.DependencyManager, org.eclipse.aether.collection.DependencyTraverser, org.eclipse.aether.collection.VersionFilter, org.eclipse.aether.graph.Dependency, java.util.List<org.eclipse.aether.artifact.Artifact>, boolean) line: 411	

            final ArtifactDescriptorResult descriptorResult =
                getArtifactDescriptorResult( args, results, noDescriptor, d, descriptorRequest );
            if ( descriptorResult != null )
            {
                d = d.setArtifact( descriptorResult.getArtifact() );
/ doet niets, al,
				
                else
                {
                    d = args.pool.intern( d.setArtifact( args.pool.intern( d.getArtifact() ) ) );
/s,
org.eclipse.aether.internal.impl.ObjectPool<T>.intern(T) line: 39	
        objects.put( object, new WeakReference<T>( object ) );
        return object;
object=DefaultArtifact org.wildfly.arquillian:wildfly-arquillian-container-managed:jar:2.0.1.Final
/t,
org.eclipse.aether.internal.impl.DefaultDependencyCollector.processDependency(org.eclipse.aether.internal.impl.DefaultDependencyCollector.Args, org.eclipse.aether.internal.impl.DefaultDependencyCollector.Results, java.util.List<org.eclipse.aether.repository.RemoteRepository>, org.eclipse.aether.collection.DependencySelector, org.eclipse.aether.collection.DependencyManager, org.eclipse.aether.collection.DependencyTraverser, org.eclipse.aether.collection.VersionFilter, org.eclipse.aether.graph.Dependency, java.util.List<org.eclipse.aether.artifact.Artifact>, boolean) line: 446	

                else
                {
                    d = args.pool.intern( d.setArtifact( args.pool.intern( d.getArtifact() ) ) );

                    List<RemoteRepository> repos =
                        getRemoteRepositories( rangeResult.getRepository( version ), repositories );
rangeResult.getRepository( version )= ArtifactRepository return repositories.get( version ); = null
repos=[central (http://repo1.maven.org/maven2, default, releases+snapshots)]

                    DefaultDependencyNode child =
                        createDependencyNode( relocations, preManaged, rangeResult, version, d,
                                              descriptorResult.getAliases(), repos, args.request.getRequestContext() );
/ TODO
                    node.getChildren().add( child );

                    boolean recurse = traverse && !descriptorResult.getDependencies().isEmpty(); / true
                    if ( recurse )
                    {
                        doRecurse( args, results, repositories, depSelector, depManager, depTraverser, verFilter, d,
                                   descriptorResult, child );
/s,
org.eclipse.aether.internal.impl.DefaultDependencyCollector.doRecurse(org.eclipse.aether.internal.impl.DefaultDependencyCollector.Args, org.eclipse.aether.internal.impl.DefaultDependencyCollector.Results, java.util.List<org.eclipse.aether.repository.RemoteRepository>, org.eclipse.aether.collection.DependencySelector, org.eclipse.aether.collection.DependencyManager, org.eclipse.aether.collection.DependencyTraverser, org.eclipse.aether.collection.VersionFilter, org.eclipse.aether.graph.Dependency, org.eclipse.aether.resolution.ArtifactDescriptorResult, org.eclipse.aether.graph.DefaultDependencyNode) line: 481	
/=
    private void doRecurse( Args args, Results results, List<RemoteRepository> repositories,
                            DependencySelector depSelector, DependencyManager depManager,
                            DependencyTraverser depTraverser, VersionFilter verFilter, Dependency d,
                            ArtifactDescriptorResult descriptorResult, DefaultDependencyNode child )
descriptorResult	ArtifactDescriptorResult  (id=8961)	
	aliases	Collections$EmptyList<E>  (id=665)	
	artifact	DefaultArtifact  (id=8304)
org.wildfly.arquillian:wildfly-arquillian-container-managed:jar:2.0.1.Final

	dependencies	ArrayList<E>  (id=8963)	
org.wildfly.arquillian:wildfly-arquillian-common:jar:2.0.1.Final (compile)
org.wildfly.arquillian:wildfly-arquillian-protocol-jmx:jar:2.0.1.Final (compile)
org.jboss.xnio:xnio-api:jar:3.3.4.Final (compile)
org.jboss.xnio:xnio-nio:jar:3.3.4.Final (compile)
org.jboss.logging:jboss-logging:jar:3.3.0.Final (compile)
org.jboss.marshalling:jboss-marshalling:jar:1.4.10.Final (compile)
org.jboss.marshalling:jboss-marshalling-river:jar:1.4.10.Final (compile)
org.jboss.remoting:jboss-remoting:jar:4.0.18.Final (compile)
org.jboss.remotingjmx:remoting-jmx:jar:2.0.1.Final (compile)
org.jboss.sasl:jboss-sasl:jar:1.0.5.Final (compile)
javax.inject:javax.inject:jar:1 (compile)
org.wildfly.core:wildfly-launcher:jar:2.0.10.Final (compile)
org.jboss.arquillian.junit:arquillian-junit-container:jar:1.1.11.Final (test)
org.jboss.arquillian.protocol:arquillian-protocol-servlet:jar:1.1.11.Final (test)
org.jboss:jboss-ejb-client:jar:2.0.2.Final (test)
org.jboss.spec.javax.ejb:jboss-ejb-api_3.2_spec:jar:1.0.0.Final (test)
org.jboss.spec.javax.servlet:jboss-servlet-api_3.1_spec:jar:1.0.0.Final (test)
org.jboss.arquillian.core:arquillian-core-api:jar:1.1.11.Final (compile)
junit:junit:jar:4.12 (test)

exceptions	Collections$EmptyList<E>  (id=665)	
[]

managedDependencies	ArrayList<E>  (id=8964)	
org.wildfly.arquillian:wildfly-arquillian-common:jar:2.0.1.Final ()
org.wildfly.arquillian:wildfly-arquillian-container-embedded:jar:2.0.1.Final ()
org.wildfly.arquillian:wildfly-arquillian-container-managed:jar:2.0.1.Final ()
org.wildfly.arquillian:wildfly-arquillian-container-remote:jar:2.0.1.Final ()
org.wildfly.arquillian:wildfly-arquillian-common-domain:jar:2.0.1.Final ()
org.wildfly.arquillian:wildfly-arquillian-container-domain-managed:jar:2.0.1.Final ()
org.wildfly.arquillian:wildfly-arquillian-container-domain-remote:jar:2.0.1.Final ()
org.wildfly.arquillian:wildfly-arquillian-protocol-jmx:jar:2.0.1.Final ()
org.wildfly.arquillian:wildfly-arquillian-testenricher-msc:jar:2.0.1.Final ()
com.google.guava:guava:jar:16.0.1 ()
org.wildfly.core:wildfly-domain-management:jar:2.0.10.Final (provided)
junit:junit:jar:4.12 (test)
org.wildfly.core:wildfly-launcher:jar:2.0.10.Final ()
org.jboss.arquillian.container:arquillian-container-spi:jar:1.1.11.Final ()
org.jboss.arquillian.container:arquillian-container-test-api:jar:1.1.11.Final ()
org.jboss.arquillian.container:arquillian-container-test-spi:jar:1.1.11.Final ()
org.jboss.arquillian.container:arquillian-container-test-impl-base:jar:1.1.11.Final ()
org.jboss.arquillian.core:arquillian-core-api:jar:1.1.11.Final ()
org.jboss.arquillian.core:arquillian-core-impl-base:jar:1.1.11.Final ()
org.jboss.arquillian.core:arquillian-core-spi:jar:1.1.11.Final ()
org.jboss.arquillian.junit:arquillian-junit-container:jar:1.1.11.Final ()
org.jboss.arquillian.junit:arquillian-junit-core:jar:1.1.11.Final ()
org.jboss.arquillian.protocol:arquillian-protocol-jmx:jar:1.1.11.Final ()
org.jboss.arquillian.protocol:arquillian-protocol-servlet:jar:1.1.11.Final ()
org.jboss.arquillian.test:arquillian-test-spi:jar:1.1.11.Final ()
org.jboss.arquillian.test:arquillian-test-impl-base:jar:1.1.11.Final ()
org.jboss.arquillian.testenricher:arquillian-testenricher-cdi:jar:1.1.11.Final ()
org.jboss.arquillian.testenricher:arquillian-testenricher-ejb:jar:1.1.11.Final ()
org.jboss.arquillian.testenricher:arquillian-testenricher-initialcontext:jar:1.1.11.Final ()
org.jboss.arquillian.testenricher:arquillian-testenricher-resource:jar:1.1.11.Final ()
org.jboss.arquillian.testng:arquillian-testng-core:jar:1.1.11.Final ()
org.jboss.arquillian.testng:arquillian-testng-container:jar:1.1.11.Final ()
org.jboss.shrinkwrap.descriptors:shrinkwrap-descriptors-impl-base:jar:2.0.0-alpha-9 ()
org.jboss:jboss-ejb-client:jar:2.0.2.Final ()
org.jboss.spec.javax.servlet:jboss-servlet-api_3.1_spec:jar:1.0.0.Final (test)
org.jboss.spec.javax.ejb:jboss-ejb-api_3.2_spec:jar:1.0.0.Final (test)
javax.enterprise:cdi-api:jar:1.2 (test)
org.testng:testng:jar:6.8.8 ()
org.wildfly.core:wildfly-core-feature-pack:pom:2.0.10.Final ()
org.wildfly.core:wildfly-core-feature-pack:zip:2.0.10.Final ()
org.wildfly.core:wildfly-core-build:pom:2.0.10.Final ()
org.wildfly.core:wildfly-core-build:zip:2.0.10.Final ()
org.wildfly.core:wildfly-core-test-runner:jar:2.0.10.Final ()
org.wildfly.core:wildfly-controller:jar:2.0.10.Final ()
org.wildfly.core:wildfly-core-security-api:jar:2.0.10.Final ()
org.wildfly.core:wildfly-core-security:jar:2.0.10.Final ()
org.wildfly.core:wildfly-controller-client:jar:2.0.10.Final ()
org.wildfly.core:wildfly-deployment-repository:jar:2.0.10.Final ()
org.wildfly.core:wildfly-deployment-scanner:jar:2.0.10.Final ()
org.wildfly.core:wildfly-domain-http-error-context:jar:2.0.10.Final ()
org.wildfly.core:wildfly-domain-http-interface:jar:2.0.10.Final ()
org.wildfly.core:wildfly-core-dist:pom:2.0.10.Final ()
org.wildfly.core:wildfly-cli:jar:2.0.10.Final ()
org.wildfly.core:wildfly-core-testsuite-shared:jar:2.0.10.Final ()
org.wildfly.core:wildfly-cli:jar:client:2.0.10.Final ()
org.wildfly.core:wildfly-core-model-test-framework:jar:2.0.10.Final ()
org.wildfly.core:wildfly-core-model-test-controller-optional:jar:2.0.10.Final ()
org.wildfly.core:wildfly-embedded:jar:2.0.10.Final ()
org.wildfly.core:wildfly-host-controller:jar:2.0.10.Final ()
org.wildfly.core:wildfly-io:jar:2.0.10.Final ()
org.wildfly.core:wildfly-jmx:jar:2.0.10.Final ()
org.wildfly.core:wildfly-logging:jar:2.0.10.Final ()
org.wildfly.core:wildfly-management-client-content:jar:2.0.10.Final ()
org.wildfly.core:wildfly-model-test:jar:2.0.10.Final ()
org.wildfly.core:wildfly-network:jar:2.0.10.Final ()
org.wildfly.core:wildfly-patching:jar:2.0.10.Final ()
org.wildfly.core:wildfly-platform-mbean:jar:2.0.10.Final ()
org.wildfly.core:wildfly-process-controller:jar:2.0.10.Final ()
org.wildfly.core:wildfly-protocol:jar:2.0.10.Final ()
org.wildfly.core:wildfly-remoting:jar:2.0.10.Final ()
org.wildfly.core:wildfly-request-controller:jar:2.0.10.Final ()
org.wildfly.core:wildfly-self-contained:jar:2.0.10.Final ()
org.wildfly.core:wildfly-server:jar:2.0.10.Final ()
org.wildfly.core:wildfly-subsystem-test:pom:2.0.10.Final ()
org.wildfly.core:wildfly-subsystem-test-framework:jar:2.0.10.Final ()
org.wildfly.core:wildfly-threads:jar:2.0.10.Final ()
org.wildfly.core:wildfly-version:jar:2.0.10.Final ()
commons-io:commons-io:jar:2.4 ()
commons-lang:commons-lang:jar:2.6 ()
javax.inject:javax.inject:jar:1 ()
org.jboss.aesh:aesh:jar:0.66.4 ()
org.fusesource.jansi:jansi:jar:1.11 ()
log4j:log4j:jar:1.2.16 (test)
org.apache.httpcomponents:httpclient:jar:4.5 ()
org.apache.httpcomponents:httpmime:jar:4.5 ()
org.apache.httpcomponents:httpcore:jar:4.4.1 ()
org.apache.httpcomponents:httpcore-nio:jar:4.4.1 ()
org.apache.maven:maven-aether-provider:jar:3.2.1 ()
org.codehaus.plexus:plexus-utils:jar:3.0.21 ()
org.codehaus.woodstox:woodstox-core-asl:jar:4.4.1 ()
org.codehaus.woodstox:stax2-api:jar:3.1.4 ()
org.jboss.byteman:byteman:jar:2.2.1 (test)
org.jboss.byteman:byteman-submit:jar:2.2.1 (test)
org.jboss.byteman:byteman-install:jar:2.2.1 (test)
org.jboss.byteman:byteman-bmunit:jar:2.2.1 (test)
org.jboss:jandex:jar:2.0.1.Final ()
org.jboss:jboss-dmr:jar:1.3.0.Final ()
org.jboss:staxmapper:jar:1.2.0.Final ()
org.jboss:jboss-vfs:jar:3.2.11.Final ()
org.jboss.classfilewriter:jboss-classfilewriter:jar:1.1.2.Final ()
org.jboss.invocation:jboss-invocation:jar:1.4.1.Final ()
org.jboss.logging:jboss-logging:jar:3.3.0.Final ()
org.jboss.logging:jboss-logging-annotations:jar:2.0.1.Final (provided)
org.jboss.logging:jboss-logging-processor:jar:2.0.1.Final (provided)
org.jboss.logging:jul-to-slf4j-stub:jar:1.0.1.Final ()
org.jboss.logmanager:jboss-logmanager:jar:2.0.3.Final ()
org.jboss.logmanager:log4j-jboss-logmanager:jar:1.1.2.Final ()
org.jboss.marshalling:jboss-marshalling:jar:1.4.10.Final ()
org.jboss.marshalling:jboss-marshalling-river:jar:1.4.10.Final ()
org.jboss.metadata:jboss-metadata-common:jar:10.0.0.Final ()
org.jboss.msc:jboss-msc:jar:1.2.6.Final ()
org.jboss.modules:jboss-modules:jar:1.5.1.Final ()
io.undertow:undertow-core:jar:1.3.15.Final ()
io.undertow:undertow-servlet:jar:1.3.15.Final ()
io.undertow:undertow-websockets-jsr:jar:1.3.15.Final ()
org.jboss.remoting:jboss-remoting:jar:4.0.18.Final ()
org.jboss.remotingjmx:remoting-jmx:jar:2.0.1.Final ()
org.jboss.sasl:jboss-sasl:jar:1.0.5.Final ()
org.jboss.shrinkwrap:shrinkwrap-api:jar:1.1.2 ()
org.jboss.shrinkwrap:shrinkwrap-impl-base:jar:1.1.2 ()
org.jboss.slf4j:slf4j-jboss-logmanager:jar:1.0.3.GA ()
org.jboss.spec.javax.interceptor:jboss-interceptors-api_1.2_spec:jar:1.0.0.Final ()
org.jboss.spec.javax.sql:jboss-javax-sql-api_7.0_spec:jar:2.0.0.Final ()
org.jboss.stdio:jboss-stdio:jar:1.0.2.GA ()
org.jboss.threads:jboss-threads:jar:2.2.1.Final ()
org.jboss.xnio:xnio-api:jar:3.3.4.Final ()
org.jboss.xnio:xnio-nio:jar:3.3.4.Final ()
org.mockito:mockito-all:jar:1.9.5 (test)
org.picketbox:picketbox:jar:4.9.4.Final ()
org.picketbox:picketbox-infinispan:jar:4.9.4.Final ()
org.slf4j:jcl-over-slf4j:jar:1.7.7.jbossorg-1 ()
org.slf4j:slf4j-api:jar:1.7.7.jbossorg-1 ()
org.syslog4j:syslog4j:jar:0.9.30 (test)
org.eclipse.aether:aether-api:jar:1.0.0.v20140518 ()
org.eclipse.aether:aether-spi:jar:1.0.0.v20140518 ()
org.eclipse.aether:aether-util:jar:1.0.0.v20140518 ()
org.eclipse.aether:aether-impl:jar:1.0.0.v20140518 ()
org.eclipse.aether:aether-connector-basic:jar:1.0.0.v20140518 ()
org.eclipse.aether:aether-transport-file:jar:1.0.0.v20140518 ()
org.eclipse.aether:aether-transport-http:jar:1.0.0.v20140518 ()
org.wildfly.common:wildfly-common:jar:1.1.0.Final ()
org.wildfly.checkstyle:wildfly-checkstyle-config:jar:1.0.4.Final ()
org.wildfly.legacy.test:wildfly-legacy-spi:jar:1.0.0.Final ()
org.wildfly.security:wildfly-elytron:jar:1.0.2.Final ()
xml-resolver:xml-resolver:jar:1.2 ()
xerces:xercesImpl:jar:2.11.0.SP4 ()

	properties	LinkedHashMap<K,V>  (id=8966)	
	relocations	Collections$EmptyList<E>  (id=665)
	repositories	ArrayList<E>  (id=8967)	
	[0]	RemoteRepository  (id=9027)	jboss-public-repository (http://repository.jboss.org/nexus/content/groups/public/, default, releases+snapshots)
	[1]	RemoteRepository  (id=9049)	central (https://repo.maven.apache.org/maven2, default, releases)

	repository	RemoteRepository  (id=2616)	
	request	ArtifactDescriptorRequest  (id=8944)	

        final List<RemoteRepository> childRepos = args.ignoreRepos
            ? repositories
            : remoteRepositoryManager.aggregateRepositories( args.session, repositories,
                                                             descriptorResult.getRepositories(), true );
        Object key =
            args.pool.toKey( d.getArtifact(), childRepos, childSelector, childManager, childTraverser, childFilter );
/s,
				return new GraphKey( artifact, repositories, selector, manager, traverser, filter );
/t,
        List<DependencyNode> children = args.pool.getChildren( key );
        if ( children == null )
/j,
        {
            args.pool.putChildren( key, child.getChildren() );

            args.nodes.push( child );

            process( args, results, descriptorResult.getDependencies(), childRepos, childSelector, childManager,
                     childTraverser, childFilter );
/s,
DefaultDependencyCollector.process(Args, Results, List<Dependency>, List<RemoteRepository>, DependencySelector, DependencyManager, DependencyTraverser, VersionFilter) line: 349	

/ Intermezzo

/ recursive call	,

Thread [main] (Suspended)	
	DefaultDependencyCollector.process(Args, Results, List<Dependency>, List<RemoteRepository>, DependencySelector, DependencyManager, DependencyTraverser, VersionFilter) line: 349	
	        for ( Dependency dependency : dependencies )
dependencies=
org.wildfly.arquillian:wildfly-arquillian-common:jar:2.0.1.Final (compile)
org.wildfly.arquillian:wildfly-arquillian-protocol-jmx:jar:2.0.1.Final (compile)
org.jboss.xnio:xnio-api:jar:3.3.4.Final (compile)
org.jboss.xnio:xnio-nio:jar:3.3.4.Final (compile)
org.jboss.logging:jboss-logging:jar:3.3.0.Final (compile)
org.jboss.marshalling:jboss-marshalling:jar:1.4.10.Final (compile)
org.jboss.marshalling:jboss-marshalling-river:jar:1.4.10.Final (compile)
org.jboss.remoting:jboss-remoting:jar:4.0.18.Final (compile)
org.jboss.remotingjmx:remoting-jmx:jar:2.0.1.Final (compile)
org.jboss.sasl:jboss-sasl:jar:1.0.5.Final (compile)
javax.inject:javax.inject:jar:1 (compile)
org.wildfly.core:wildfly-launcher:jar:2.0.10.Final (compile)
org.jboss.arquillian.junit:arquillian-junit-container:jar:1.1.11.Final (test)
org.jboss.arquillian.protocol:arquillian-protocol-servlet:jar:1.1.11.Final (test)
org.jboss:jboss-ejb-client:jar:2.0.2.Final (test)
org.jboss.spec.javax.ejb:jboss-ejb-api_3.2_spec:jar:1.0.0.Final (test)
org.jboss.spec.javax.servlet:jboss-servlet-api_3.1_spec:jar:1.0.0.Final (test)
org.jboss.arquillian.core:arquillian-core-api:jar:1.1.11.Final (compile)
junit:junit:jar:4.12 (test)
/cb,
	DefaultDependencyCollector.doRecurse(Args, Results, List<RemoteRepository>, DependencySelector, DependencyManager, DependencyTraverser, VersionFilter, Dependency, ArtifactDescriptorResult, DefaultDependencyNode) line: 504	
	DefaultDependencyCollector.processDependency(Args, Results, List<RemoteRepository>, DependencySelector, DependencyManager, DependencyTraverser, VersionFilter, Dependency, List<Artifact>, boolean) line: 458	
	DefaultDependencyCollector.processDependency(Args, Results, List<RemoteRepository>, DependencySelector, DependencyManager, DependencyTraverser, VersionFilter, Dependency) line: 363	
	DefaultDependencyCollector.process(Args, Results, List<Dependency>, List<RemoteRepository>, DependencySelector, DependencyManager, DependencyTraverser, VersionFilter) line: 351	
			for ( Dependency dependency : dependencies )
dependencies=
org.wildfly.arquillian:wildfly-arquillian-container-managed:jar:2.0.1.Final (compile)
/cb,			
	DefaultDependencyCollector.collectDependencies(RepositorySystemSession, CollectRequest) line: 254	
	DefaultRepositorySystem.resolveDependencies(RepositorySystemSession, DependencyRequest) line: 341	
	MavenRepositorySystem.resolveDependencies(RepositorySystemSession, MavenWorkingSession, CollectRequest, MavenResolutionFilter[]) line: 121	
	MavenWorkingSessionImpl.resolveDependencies(MavenResolutionStrategy) line: 239	
	MavenStrategyStageImpl(MavenStrategyStageBaseImpl<STRATEGYSTAGETYPE,FORMATSTAGETYPE>).using(MavenResolutionStrategy) line: 70	
	MavenStrategyStageImpl(MavenStrategyStageBaseImpl<STRATEGYSTAGETYPE,FORMATSTAGETYPE>).withTransitivity() line: 52	
	MavenStrategyStageImpl(MavenStrategyStageBaseImpl<STRATEGYSTAGETYPE,FORMATSTAGETYPE>).withTransitivity() line: 39	
	Resolver.resolve(File, MavenDependency[]) line: 46	
	TargetController.resolveClasspathDependencies(ContainerAdapter, File) line: 179	
	TargetController.<init>(ContainerAdapter, Injector, File) line: 53	
	ChameleonContainer.init(ChameleonConfiguration, ContainerDef) line: 85	
	InitiateContainer.initiateChameleon(SetupContainer) line: 70	
	InitiateContainer.setup(EventContext<SetupContainer>) line: 39	
	NativeMethodAccessorImpl.invoke0(Method, Object, Object[]) line: not available [native method]	
	NativeMethodAccessorImpl.invoke(Object, Object[]) line: 62	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: 43	
	Method.invoke(Object, Object...) line: 498	
	ObserverImpl.invoke(Manager, Object) line: 96	
	EventContextImpl<T>.proceed() line: 92	
	ManagerImpl.fire(T, NonManagedObserver<T>) line: 143	
	ManagerImpl.fire(Object) line: 114	
	EventImpl<T>.fire(T) line: 67	
	ContainerLifecycleController$1.perform(Container) line: 62	
	ContainerLifecycleController$1.perform(Object) line: 55	
	ContainerLifecycleController.forEachContainer(Operation<Container>) line: 209	
	ContainerLifecycleController.setupContainers(SetupContainers) line: 54	
	NativeMethodAccessorImpl.invoke0(Method, Object, Object[]) line: not available [native method]	
	NativeMethodAccessorImpl.invoke(Object, Object[]) line: 62	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: 43	
	Method.invoke(Object, Object...) line: 498	
	ObserverImpl.invoke(Manager, Object) line: 96	
	EventContextImpl<T>.invokeObservers() line: 103	
	EventContextImpl<T>.proceed() line: 85	
	ManagerImpl.fire(T, NonManagedObserver<T>) line: 143	
	ManagerImpl.fire(Object) line: 114	
	EventImpl<T>.fire(T) line: 67	
	ContainerEventController.execute(BeforeSuite) line: 85	
	NativeMethodAccessorImpl.invoke0(Method, Object, Object[]) line: not available [native method]	
	NativeMethodAccessorImpl.invoke(Object, Object[]) line: 62	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: 43	
	Method.invoke(Object, Object...) line: 498	
	ObserverImpl.invoke(Manager, Object) line: 96	
	EventContextImpl<T>.invokeObservers() line: 103	
	EventContextImpl<T>.proceed() line: 85	
	TestContextHandler.createSuiteContext(EventContext<SuiteEvent>) line: 73	
	NativeMethodAccessorImpl.invoke0(Method, Object, Object[]) line: not available [native method]	
	NativeMethodAccessorImpl.invoke(Object, Object[]) line: 62	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: 43	
	Method.invoke(Object, Object...) line: 498	
	ObserverImpl.invoke(Manager, Object) line: 96	
	EventContextImpl<T>.proceed() line: 92	
	ManagerImpl.fire(T, NonManagedObserver<T>) line: 143	
	ManagerImpl.fire(Object) line: 114	
	EventTestRunnerAdaptor.beforeSuite() line: 75	
	Arquillian.run(RunNotifier) line: 116	
	JUnit4Provider.execute(Class<?>, RunNotifier, String[]) line: 264	
	JUnit4Provider.executeTestSet(Class<?>, RunListener, RunNotifier) line: 153	
	JUnit4Provider.invoke(Object) line: 124	
	NativeMethodAccessorImpl.invoke0(Method, Object, Object[]) line: not available [native method]	
	NativeMethodAccessorImpl.invoke(Object, Object[]) line: 62	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: 43	
	Method.invoke(Object, Object...) line: 498	
	ReflectionUtils.invokeMethodWithArray2(Object, Method, Object[]) line: 208	
	ProviderFactory$ProviderProxy.invoke(Object) line: 159	
	ProviderFactory.invokeProvider(Object, ClassLoader, ClassLoader, Object, ProviderConfiguration, boolean, StartupConfiguration, boolean) line: 87	
	ForkedBooter.runSuitesInProcess(Object, ClassLoader, StartupConfiguration, ProviderConfiguration, PrintStream) line: 153	
	ForkedBooter.main(String[]) line: 95	

/ Einde Intermezzo

        for ( Dependency dependency : dependencies )
        {
            processDependency( args, results, repositories, depSelector, depManager, depTraverser, verFilter,
                               dependency );
dependency=org.wildfly.arquillian:wildfly-arquillian-common:jar:2.0.1.Final (compile)
/s,
DefaultDependencyCollector.processDependency(Args, Results, List<RemoteRepository>, DependencySelector, DependencyManager, DependencyTraverser, VersionFilter, Dependency) line: 363	
        List<Artifact> relocations = Collections.emptyList();
        boolean disableVersionManagement = false;
        processDependency( args, results, repositories, depSelector, depManager, depTraverser, verFilter, dependency,
                           relocations, disableVersionManagement );
/s,
////////////////// RESULT DUURT LANG 
DefaultDependencyCollector.processDependency(Args, Results, List<RemoteRepository>, DependencySelector, DependencyManager, DependencyTraverser, VersionFilter, Dependency, List<Artifact>, boolean) line: 411	
...
            final ArtifactDescriptorResult descriptorResult =
                getArtifactDescriptorResult( args, results, noDescriptor, d, descriptorRequest );
				
descriptorRequest	ArtifactDescriptorRequest  (id=9644)	
	artifact	DefaultArtifact  (id=9600)
org.wildfly.arquillian:wildfly-arquillian-common:jar:2.0.1.Final	
	repositories	ArrayList<E>  (id=9023)	
[central (http://repo1.maven.org/maven2, default, releases+snapshots), jboss-public-repository (http://repository.jboss.org/nexus/content/groups/public/, default, releases+snapshots)]

descriptorResult	ArtifactDescriptorResult  (id=9645)	
	dependencies	ArrayList<E>  (id=9646)
com.google.guava:guava:jar:16.0.1 (provided)
org.jboss.arquillian.testenricher:arquillian-testenricher-cdi:jar:1.1.11.Final (compile)
org.jboss.arquillian.testenricher:arquillian-testenricher-ejb:jar:1.1.11.Final (compile)
org.jboss.arquillian.testenricher:arquillian-testenricher-initialcontext:jar:1.1.11.Final (compile)
org.jboss.arquillian.testenricher:arquillian-testenricher-resource:jar:1.1.11.Final (compile)
org.jboss.arquillian.container:arquillian-container-test-impl-base:jar:1.1.11.Final (compile)
org.jboss.arquillian.protocol:arquillian-protocol-servlet:jar:1.1.11.Final (compile)
org.wildfly.arquillian:wildfly-arquillian-testenricher-msc:jar:2.0.1.Final (compile)
org.wildfly.core:wildfly-controller-client:jar:2.0.10.Final (compile)
org.jboss.shrinkwrap.descriptors:shrinkwrap-descriptors-impl-base:jar:2.0.0-alpha-9 (compile)
junit:junit:jar:4.12 (test)
org.jboss.arquillian.core:arquillian-core-api:jar:1.1.11.Final (compile)

            if ( descriptorResult != null )
            {
                d = d.setArtifact( descriptorResult.getArtifact() );

                DependencyNode node = args.nodes.top();

                else
                {
                    d = args.pool.intern( d.setArtifact( args.pool.intern( d.getArtifact() ) ) );

                    List<RemoteRepository> repos =
                        getRemoteRepositories( rangeResult.getRepository( version ), repositories );

                    DefaultDependencyNode child =
                        createDependencyNode( relocations, preManaged, rangeResult, version, d,
                                              descriptorResult.getAliases(), repos, args.request.getRequestContext() );

                    node.getChildren().add( child );
args	DefaultDependencyCollector$Args  (id=8772)	
	nodes	NodeStack  (id=8750)	
		nodes	DependencyNode[96]  (id=8752)	
			[0]	DefaultDependencyNode  (id=8736)	
				artifact								null	
				children	ArrayList<E>  (id=8998)
					[0]	DefaultDependencyNode  (id=8996)	org.wildfly.arquillian:wildfly-arquillian-container-managed:jar:2.0.1.Final (compile)				
			[1]	DefaultDependencyNode  (id=8996)	
				artifact	DefaultArtifact  (id=8304)	org.wildfly.arquillian:wildfly-arquillian-container-managed:jar:2.0.1.Final
				children	ArrayList<E>  (id=9539)	
					[0]	DefaultDependencyNode  (id=9791) org.wildfly.arquillian:wildfly-arquillian-common:jar:2.0.1.Final (compile)	

                    if ( recurse )
                    {
                        doRecurse( args, results, repositories, depSelector, depManager, depTraverser, verFilter, d,
                                   descriptorResult, child );
/s,
DefaultDependencyCollector.doRecurse(Args, Results, List<RemoteRepository>, DependencySelector, DependencyManager, DependencyTraverser, VersionFilter, Dependency, ArtifactDescriptorResult, DefaultDependencyNode) line: 481	

        Object key =
            args.pool.toKey( d.getArtifact(), childRepos, childSelector, childManager, childTraverser, childFilter );
key	DataPool$GraphKey  (id=9912)	
	artifact	DefaultArtifact  (id=9600)	org.wildfly.arquillian:wildfly-arquillian-common:jar:2.0.1.Final

        List<DependencyNode> children = args.pool.getChildren( key );
        if ( children == null )
/j,
        {
            args.pool.putChildren( key, child.getChildren() );

            args.nodes.push( child );
args	DefaultDependencyCollector$Args  (id=8772)	
	nodes	NodeStack  (id=8750)	
		nodes	DependencyNode[96]  (id=8752)	
			[0]	DefaultDependencyNode  (id=8736)	
			[1]	DefaultDependencyNode  (id=8996)	
			[2]	DefaultDependencyNode  (id=9791)	
				artifact	DefaultArtifact  (id=9600)	org.wildfly.arquillian:wildfly-arquillian-common:jar:2.0.1.Final
				children	ArrayList<E>  (id=9947)		null


            process( args, results, descriptorResult.getDependencies(), childRepos, childSelector, childManager,
                     childTraverser, childFilter );
/s,
        for ( Dependency dependency : dependencies )
dependencies	ArrayList<E>  (id=9646)	
com.google.guava:guava:jar:16.0.1 (provided)
org.jboss.arquillian.testenricher:arquillian-testenricher-cdi:jar:1.1.11.Final (compile)
org.jboss.arquillian.testenricher:arquillian-testenricher-ejb:jar:1.1.11.Final (compile)
org.jboss.arquillian.testenricher:arquillian-testenricher-initialcontext:jar:1.1.11.Final (compile)
org.jboss.arquillian.testenricher:arquillian-testenricher-resource:jar:1.1.11.Final (compile)
org.jboss.arquillian.container:arquillian-container-test-impl-base:jar:1.1.11.Final (compile)
org.jboss.arquillian.protocol:arquillian-protocol-servlet:jar:1.1.11.Final (compile)
org.wildfly.arquillian:wildfly-arquillian-testenricher-msc:jar:2.0.1.Final (compile)
org.wildfly.core:wildfly-controller-client:jar:2.0.10.Final (compile)
org.jboss.shrinkwrap.descriptors:shrinkwrap-descriptors-impl-base:jar:2.0.0-alpha-9 (compile)
junit:junit:jar:4.12 (test)
org.jboss.arquillian.core:arquillian-core-api:jar:1.1.11.Final (compile)

        {
            processDependency( args, results, repositories, depSelector, depManager, depTraverser, verFilter,
                               dependency );
/s,
DefaultDependencyCollector.processDependency(Args, Results, List<RemoteRepository>, DependencySelector, DependencyManager, DependencyTraverser, VersionFilter, Dependency, List<Artifact>, boolean) line: 373	
        if ( depSelector != null && !depSelector.selectDependency( dependency ) )
/s,
AndDependencySelector.selectDependency(Dependency) line: 104 / de dep moet aan alle selectors voldoen	,
        for ( DependencySelector selector : selectors )
this	AndDependencySelector  (id=9015)	
	selectors	LinkedHashSet<E>  (id=9007)	
		[0]	ScopeDependencySelector  (id=9006)	
		[1]	OptionalDependencySelector  (id=9010)	
		[2]	ExclusionDependencySelector  (id=9014)	

        {
            if ( !selector.selectDependency( dependency ) )
        {
            return;
        }
		
/////////////////////////////////////////////////////////////////
/ de scope van de dep moet NIET test of provided zijn, 
/ en dep moet NIET optional zijn, 
/ en de dep mag niet in bepaalde packages zitten zoals org.jboss.arquillian.core:*:*:*, WH omdat we die al hebben, dat is arquillian,
 
/s,
ScopeDependencySelector.selectDependency(Dependency) line: 98	
        String scope = dependency.getScope(); / provided
included=null
excluded=[test,provided]
        return ( included == null || included.contains( scope ) )
/j,		
		&& ( excluded == null || !excluded.contains( scope ) ); / dus de dep wordt selected als scope != test of provided,
/n,
dependency=	
com.google.guava:guava:jar:16.0.1 (provided)

/t,
DefaultDependencyCollector.process(Args, Results, List<Dependency>, List<RemoteRepository>, DependencySelector, DependencyManager, DependencyTraverser, VersionFilter) line: 351	
        for ( Dependency dependency : dependencies )
/ volgende,
dependency=org.jboss.arquillian.testenricher:arquillian-testenricher-cdi:jar:1.1.11.Final (compile)
        {
            processDependency( args, results, repositories, depSelector, depManager, depTraverser, verFilter,
                               dependency );
/s,
AndDependencySelector.selectDependency(Dependency) line: 106	
        for ( DependencySelector selector : selectors )
        {
            if ( !selector.selectDependency( dependency ) )
/s,
ScopeDependencySelector.selectDependency(Dependency) line: 98	
dependency=
org.jboss.arquillian.testenricher:arquillian-testenricher-cdi:jar:1.1.11.Final (compile)
        String scope = dependency.getScope();
        return ( included == null || included.contains( scope ) ) 
/j
		&& ( excluded == null || !excluded.contains( scope ) );
/j,
/t,
AndDependencySelector.selectDependency(Dependency) line: 110	
        for ( DependencySelector selector : selectors )
        {
            if ( !selector.selectDependency( dependency ) )
/n,
/ want hij select de dep wel,
/ volgende,	
/s,
OptionalDependencySelector.selectDependency(Dependency) line: 43	
        return depth < 2 
/n, depth=2
		|| !dependency.isOptional();	 dep heeft optional =false
/j,
/t,
/t,
AndDependencySelector.selectDependency(Dependency) line: 110	
        for ( DependencySelector selector : selectors )
        {
            if ( !selector.selectDependency( dependency ) ) / hij select hem, hij is niet optional,
/n,
/ volgende,
/s,
ExclusionDependencySelector.selectDependency(Dependency) line: 72	
        Artifact artifact = dependency.getArtifact(); / org.jboss.arquillian.testenricher:arquillian-testenricher-cdi:jar:1.1.11.Final
        for ( Exclusion exclusion : exclusions )
		
this	ExclusionDependencySelector  (id=9014)	
	exclusions	Exclusion[11]  (id=10076)	
org.jboss.arquillian.config:*:*:*
org.jboss.arquillian.container:*:*:*
org.jboss.arquillian.core:*:*:*
org.jboss.arquillian.protocol:*:*:*
org.jboss.arquillian.test:*:*:*
org.jboss.arquillian.testenricher:*:*:*   						<-
org.jboss.shrinkwrap:*:*:*
org.jboss.shrinkwrap.api:*:*:*
org.jboss.shrinkwrap.descriptors:*:*:*
org.jboss.shrinkwrap.resolver:*:*:*
*:wildfly-arquillian-testenricher-msc:*:*

        {
            if ( matches( exclusion, artifact ) )
/j,
voor org.jboss.arquillian.testenricher:*:*:*
            {
                return false;
/t,
AndDependencySelector.selectDependency(Dependency) line: 108	
        for ( DependencySelector selector : selectors )
        {
            if ( !selector.selectDependency( dependency ) )
/j,
            {
                return false;
/t,
DefaultDependencyCollector.processDependency(Args, Results, List<RemoteRepository>, DependencySelector, DependencyManager, DependencyTraverser, VersionFilter, Dependency, List<Artifact>, boolean) line: 375	
        if ( depSelector != null && !depSelector.selectDependency( dependency)
dependency=org.jboss.arquillian.testenricher:arquillian-testenricher-cdi:jar:1.1.11.Final (compile)
        {
            return;
/t,
DefaultDependencyCollector.process(Args, Results, List<Dependency>, List<RemoteRepository>, DependencySelector, DependencyManager, DependencyTraverser, VersionFilter) line: 351	
        for ( Dependency dependency : dependencies )
/ volgende,
dependency=
org.jboss.arquillian.testenricher:arquillian-testenricher-ejb:jar:1.1.11.Final (compile)
/n,
org.jboss.arquillian.testenricher:arquillian-testenricher-initialcontext:jar:1.1.11.Final (compile)
/n,
org.jboss.arquillian.testenricher:arquillian-testenricher-resource:jar:1.1.11.Final (compile)
/n,
org.jboss.arquillian.container:arquillian-container-test-impl-base:jar:1.1.11.Final (compile)
/n,
org.jboss.arquillian.protocol:arquillian-protocol-servlet:jar:1.1.11.Final (compile)
/n,
org.wildfly.arquillian:wildfly-arquillian-testenricher-msc:jar:2.0.1.Final (compile)
/n,

dependency=
org.wildfly.core:wildfly-controller-client:jar:2.0.10.Final (compile)
/s,
DefaultDependencyCollector.processDependency(Args, Results, List<RemoteRepository>, DependencySelector, DependencyManager, DependencyTraverser, VersionFilter, Dependency, List<Artifact>, boolean) line: 378	

        if ( depSelector != null && !depSelector.selectDependency( dependency ) )
        {
            return;
        }
/n,
            final ArtifactDescriptorResult descriptorResult =
                getArtifactDescriptorResult( args, results, noDescriptor, d, descriptorRequest );
descriptorRequest	ArtifactDescriptorRequest  (id=10294)	
	artifact	DefaultArtifact  (id=10261)	org.wildfly.core:wildfly-controller-client:jar:2.0.10.Final
	repositories	ArrayList<E>  (id=9911) [central (http://repo1.maven.org/maven2, default, releases+snapshots), jboss-public-repository (http://repository.jboss.org/nexus/content/groups/public/, default, releases+snapshots)]
	
descriptorResult	ArtifactDescriptorResult  (id=10295)	
	dependencies	ArrayList<E>  (id=10305)	
org.wildfly.core:wildfly-protocol:jar:2.0.10.Final (compile)
org.jboss:jboss-dmr:jar:1.3.0.Final (compile)
org.jboss.logging:jboss-logging:jar:3.3.0.Final (compile)
org.jboss.logging:jboss-logging-annotations:jar:2.0.1.Final (provided?)
org.jboss.logging:jboss-logging-processor:jar:2.0.1.Final (provided?)
org.jboss.threads:jboss-threads:jar:2.2.1.Final (compile)
junit:junit:jar:4.12 (test)
org.wildfly.checkstyle:wildfly-checkstyle-config:jar:1.0.4.Final (provided)	

            if ( descriptorResult != null )
            {
                d = d.setArtifact( descriptorResult.getArtifact() );

                DependencyNode node = args.nodes.top();  / org.wildfly.arquillian:wildfly-arquillian-common:jar:2.0.1.Final (compile)

                int cycleEntry = args.nodes.find( d.getArtifact() );
                if ( cycleEntry >= 0 )
/n,
                else
                {
                    d = args.pool.intern( d.setArtifact( args.pool.intern( d.getArtifact() ) ) );

                    List<RemoteRepository> repos =
                        getRemoteRepositories( rangeResult.getRepository( version ), repositories );

                    DefaultDependencyNode child =
                        createDependencyNode( relocations, preManaged, rangeResult, version, d,
                                              descriptorResult.getAliases(), repos, args.request.getRequestContext() );

                    node.getChildren().add( child );
node=org.wildfly.arquillian:wildfly-arquillian-common:jar:2.0.1.Final (compile)
child=org.wildfly.core:wildfly-controller-client:jar:2.0.10.Final (compile)
/ dus in nodes heeft node=org.wildfly.arquillian:wildfly-arquillian-common:jar:2.0.1.Final als child= org.wildfly.core:wildfly-controller-client:jar:2.0.10.Final,
/ maar org.wildfly.core:wildfly-controller-client:jar:2.0.10.Final is zelf nog geen node, die children zal hebben, dat komt pas in recurse,

/ we gaan de child recurse,

                    boolean recurse = traverse && !descriptorResult.getDependencies().isEmpty();
                    if ( recurse )
                    {
                        doRecurse( args, results, repositories, depSelector, depManager, depTraverser, verFilter, d,
                                   descriptorResult, child );
/s,
DefaultDependencyCollector.doRecurse(Args, Results, List<RemoteRepository>, DependencySelector, DependencyManager, DependencyTraverser, VersionFilter, Dependency, ArtifactDescriptorResult, DefaultDependencyNode) line: 498	
        List<DependencyNode> children = args.pool.getChildren( key );
        if ( children == null )
        {
            args.pool.putChildren( key, child.getChildren() );

            args.nodes.push( child );
/ Dus we zetten de child=org.wildfly.core:wildfly-controller-client:jar:2.0.10.Final die we gaan recuse als node in nodes, WH omdat hij zelf children gaat krijgen	, dat is wat recurse doet,

            process( args, results, descriptorResult.getDependencies(), childRepos, childSelector, childManager,
                     childTraverser, childFilter );
/s,
DefaultDependencyCollector.process(Args, Results, List<Dependency>, List<RemoteRepository>, DependencySelector, DependencyManager, DependencyTraverser, VersionFilter) line: 349	
        for ( Dependency dependency : dependencies )
org.wildfly.core:wildfly-protocol:jar:2.0.10.Final (compile)
org.jboss:jboss-dmr:jar:1.3.0.Final (compile)
org.jboss.logging:jboss-logging:jar:3.3.0.Final (compile)
org.jboss.logging:jboss-logging-annotations:jar:2.0.1.Final (provided?)
org.jboss.logging:jboss-logging-processor:jar:2.0.1.Final (provided?)
org.jboss.threads:jboss-threads:jar:2.2.1.Final (compile)
junit:junit:jar:4.12 (test)
org.wildfly.checkstyle:wildfly-checkstyle-config:jar:1.0.4.Final (provided)	
        {
            processDependency( args, results, repositories, depSelector, depManager, depTraverser, verFilter,
                               dependency ); / org.wildfly.core:wildfly-protocol:jar:2.0.10.Final (compile)
/s,
DefaultDependencyCollector.processDependency(Args, Results, List<RemoteRepository>, DependencySelector, DependencyManager, DependencyTraverser, VersionFilter, Dependency, List<Artifact>, boolean) line: 373	
        if ( depSelector != null && !depSelector.selectDependency( dependency ) )
/n,
/ geen test of provide scope,
/ niet optional
/ niet in bepaalde packages,
	
            final ArtifactDescriptorResult descriptorResult =
                getArtifactDescriptorResult( args, results, noDescriptor, d, descriptorRequest ); 
descriptorRequest	ArtifactDescriptorRequest  (id=10493)	
	artifact	DefaultArtifact  (id=10484)	
org.wildfly.core:wildfly-protocol:jar:2.0.10.Final

descriptorResult	ArtifactDescriptorResult  (id=10494)	
	dependencies	ArrayList<E>  (id=10502)	
org.jboss.logging:jboss-logging:jar:3.3.0.Final (compile)
org.jboss.logging:jboss-logging-annotations:jar:2.0.1.Final (provided?)
org.jboss.logging:jboss-logging-processor:jar:2.0.1.Final (provided?)
org.jboss.logmanager:jboss-logmanager:jar:2.0.3.Final (test)
org.jboss.remoting:jboss-remoting:jar:4.0.18.Final (compile)
org.jboss.sasl:jboss-sasl:jar:1.0.5.Final (compile)
org.jboss.threads:jboss-threads:jar:2.2.1.Final (compile)
org.jboss.xnio:xnio-api:jar:3.3.4.Final (compile)
org.jboss.xnio:xnio-nio:jar:3.3.4.Final (compile)
junit:junit:jar:4.12 (test)
org.wildfly.checkstyle:wildfly-checkstyle-config:jar:1.0.4.Final (provided)

                    DefaultDependencyNode child =
                        createDependencyNode( relocations, preManaged, rangeResult, version, d,
                                              descriptorResult.getAliases(), repos, args.request.getRequestContext() );

                    node.getChildren().add( child ); / org.wildfly.core:wildfly-protocol:jar:2.0.10.Final (compile)

                    boolean recurse = traverse && !descriptorResult.getDependencies().isEmpty();
                    if ( recurse )
                    {
                        doRecurse( args, results, repositories, depSelector, depManager, depTraverser, verFilter, d,
                                   descriptorResult, child );
                    }			 
/s,
DefaultDependencyCollector.doRecurse(Args, Results, List<RemoteRepository>, DependencySelector, DependencyManager, DependencyTraverser, VersionFilter, Dependency, ArtifactDescriptorResult, DefaultDependencyNode) line: 497	
        List<DependencyNode> children = args.pool.getChildren( key );
        if ( children == null )
        {
            args.pool.putChildren( key, child.getChildren() );

            args.nodes.push( child );/ org.wildfly.core:wildfly-protocol:jar:2.0.10.Final (compile)

            process( args, results, descriptorResult.getDependencies(), childRepos, childSelector, childManager,
                     childTraverser, childFilter );
/s,
DefaultDependencyCollector.process(Args, Results, List<Dependency>, List<RemoteRepository>, DependencySelector, DependencyManager, DependencyTraverser, VersionFilter) line: 349	
        for ( Dependency dependency : dependencies )
        {
            processDependency( args, results, repositories, depSelector, depManager, depTraverser, verFilter,
                               dependency );
/s,
DefaultDependencyCollector.processDependency(Args, Results, List<RemoteRepository>, DependencySelector, DependencyManager, DependencyTraverser, VersionFilter, Dependency, List<Artifact>, boolean) line: 373	
        if ( depSelector != null && !depSelector.selectDependency( dependency ) ) / org.jboss.logging:jboss-logging:jar:3.3.0.Final (compile)
/n,
            ArtifactDescriptorRequest descriptorRequest = createArtifactDescriptorRequest( args, repositories, d );
org.jboss.logging:jboss-logging:jar:3.3.0.Final

            final ArtifactDescriptorResult descriptorResult =
                getArtifactDescriptorResult( args, results, noDescriptor, d, descriptorRequest );
org.jboss.logmanager:jboss-logmanager:jar:1.5.2.Final (provided)
log4j:log4j:jar:1.2.16 (provided)
org.apache.logging.log4j:log4j-api:jar:2.0 (provided)
org.slf4j:slf4j-api:jar:1.7.2 (provided)

                DependencyNode node = args.nodes.top();	
org.wildfly.core:wildfly-protocol:jar:2.0.10.Final (compile)

                    DefaultDependencyNode child =
                        createDependencyNode( relocations, preManaged, rangeResult, version, d,
                                              descriptorResult.getAliases(), repos, args.request.getRequestContext() )
org.jboss.logging:jboss-logging:jar:3.3.0.Final (compile)

                    node.getChildren().add( child );
                    if ( recurse )
                    {
                        doRecurse( args, results, repositories, depSelector, depManager, depTraverser, verFilter, d,
                                   descriptorResult, child );
/s,
DefaultDependencyCollector.doRecurse(Args, Results, List<RemoteRepository>, DependencySelector, DependencyManager, DependencyTraverser, VersionFilter, Dependency, ArtifactDescriptorResult, DefaultDependencyNode) line: 481	

        List<DependencyNode> children = args.pool.getChildren( key );
        if ( children == null )
        {
            args.pool.putChildren( key, child.getChildren() );

            args.nodes.push( child ); / org.jboss.logging:jboss-logging:jar:3.3.0.Final (compile)

            process( args, results, descriptorResult.getDependencies(), childRepos, childSelector, childManager,
                     childTraverser, childFilter );
/s,
DefaultDependencyCollector.process(Args, Results, List<Dependency>, List<RemoteRepository>, DependencySelector, DependencyManager, DependencyTraverser, VersionFilter) line: 349	
        for ( Dependency dependency : dependencies )
org.jboss.logmanager:jboss-logmanager:jar:1.5.2.Final (provided)
log4j:log4j:jar:1.2.16 (provided)
org.apache.logging.log4j:log4j-api:jar:2.0 (provided)
org.slf4j:slf4j-api:jar:1.7.2 (provided)
        {
            processDependency( args, results, repositories, depSelector, depManager, depTraverser, verFilter,
                               dependency );
/s,
DefaultDependencyCollector.processDependency(Args, Results, List<RemoteRepository>, DependencySelector, DependencyManager, DependencyTraverser, VersionFilter, Dependency, List<Artifact>, boolean) line: 373	
        if ( depSelector != null && !depSelector.selectDependency( dependency ) )
        {
            return;
/t,
DefaultDependencyCollector.doRecurse(Args, Results, List<RemoteRepository>, DependencySelector, DependencyManager, DependencyTraverser, VersionFilter, Dependency, ArtifactDescriptorResult, DefaultDependencyNode) line: 507
	
child=org.jboss.logging:jboss-logging:jar:3.3.0.Final (compile)		
args	DefaultDependencyCollector$Args  (id=8772)	
	nodes	NodeStack  (id=8750)	
		nodes	DependencyNode[96]  (id=8752)	
null
org.wildfly.arquillian:wildfly-arquillian-container-managed:jar:2.0.1.Final (compile)
org.wildfly.arquillian:wildfly-arquillian-common:jar:2.0.1.Final (compile)
org.wildfly.core:wildfly-controller-client:jar:2.0.10.Final (compile)
org.wildfly.core:wildfly-protocol:jar:2.0.10.Final (compile)
org.jboss.logging:jboss-logging:jar:3.3.0.Final (compile)
	
            process( args, results, descriptorResult.getDependencies(), childRepos, childSelector, childManager,
                     childTraverser, childFilter );
/d,
            args.nodes.pop();
args.nodes.size()=5

/ org.jboss.logging:jboss-logging:jar:3.3.0.Final (compile) is nog wel child van org.wildfly.core:wildfly-protocol:jar:2.0.10.Final (compile), maar als deze laatste er straks ook afgaat?
/ TODO
/ maar,
pool	DataPool  (id=8738)	
	artifacts	ObjectPool<T>  (id=8743)	
		objects	WeakHashMap<K,V>  (id=8768)	
org.wildfly.core:wildfly-controller-client:jar:2.0.10.Final=java.lang.ref.WeakReference@30865a90
org.wildfly.arquillian:wildfly-arquillian-container-managed:jar:2.0.1.Final=java.lang.ref.WeakReference@1b70203f
org.wildfly.arquillian:wildfly-arquillian-common:jar:2.0.1.Final=java.lang.ref.WeakReference@51671b08
org.wildfly.core:wildfly-protocol:jar:2.0.10.Final=java.lang.ref.WeakReference@6134ac4a
org.jboss.logging:jboss-logging:jar:3.3.0.Final=java.lang.ref.WeakReference@71b1a49c
	dependencies	ObjectPool<T>  (id=8745)	
		objects	WeakHashMap<K,V>  (id=9544)
org.wildfly.core:wildfly-controller-client:jar:2.0.10.Final (compile)=java.lang.ref.WeakReference@6c2d4cc6
org.wildfly.core:wildfly-protocol:jar:2.0.10.Final (compile)=java.lang.ref.WeakReference@14c053c6
org.wildfly.arquillian:wildfly-arquillian-common:jar:2.0.1.Final (compile)=java.lang.ref.WeakReference@1162410a
org.jboss.logging:jboss-logging:jar:3.3.0.Final (compile)=java.lang.ref.WeakReference@3f3ddbd9
org.wildfly.arquillian:wildfly-arquillian-container-managed:jar:2.0.1.Final (compile)=java.lang.ref.WeakReference@5710768a		
	descriptors	Collections$SynchronizedMap<K,V>  (id=8748)	
org.wildfly.core:wildfly-controller-client:jar:2.0.10.Final=org.eclipse.aether.internal.impl.DataPool$GoodDescriptor@73e132e0
org.wildfly.arquillian:wildfly-arquillian-container-managed:jar:2.0.1.Final=org.eclipse.aether.internal.impl.DataPool$GoodDescriptor@3773862a
org.wildfly.arquillian:wildfly-arquillian-common:jar:2.0.1.Final=org.eclipse.aether.internal.impl.DataPool$GoodDescriptor@2472c7d8
org.wildfly.core:wildfly-protocol:jar:2.0.10.Final=org.eclipse.aether.internal.impl.DataPool$GoodDescriptor@777c9dc9
org.jboss.logging:jboss-logging:jar:3.3.0.Final=org.eclipse.aether.internal.impl.DataPool$GoodDescriptor@589b028e

/t,
DefaultDependencyCollector.processDependency(Args, Results, List<RemoteRepository>, DependencySelector, DependencyManager, DependencyTraverser, VersionFilter, Dependency, List<Artifact>, boolean) line: 462	
                        doRecurse( args, results, repositories, depSelector, depManager, depTraverser, verFilter, d,
                                   descriptorResult, child );
/d,
org.jboss.logging:jboss-logging:jar:3.3.0.Final (compile)

/t,
DefaultDependencyCollector.process(Args, Results, List<Dependency>, List<RemoteRepository>, DependencySelector, DependencyManager, DependencyTraverser, VersionFilter) line: 351

/ process org.wildfly.core:wildfly-protocol:jar:2.0.10.Final (compile)

/ volgende,	
        for ( Dependency dependency : dependencies )
dependencies=
org.jboss.logging:jboss-logging:jar:3.3.0.Final (compile)
/d,
org.jboss.logging:jboss-logging-annotations:jar:2.0.1.Final (provided?)
/n,
org.jboss.logging:jboss-logging-processor:jar:2.0.1.Final (provided?)
/n,
org.jboss.logmanager:jboss-logmanager:jar:2.0.3.Final (test)
/n,
org.jboss.remoting:jboss-remoting:jar:4.0.18.Final (compile)
org.jboss.sasl:jboss-sasl:jar:1.0.5.Final (compile)
org.jboss.threads:jboss-threads:jar:2.2.1.Final (compile)
org.jboss.xnio:xnio-api:jar:3.3.4.Final (compile)
org.jboss.xnio:xnio-nio:jar:3.3.4.Final (compile)
junit:junit:jar:4.12 (test)
org.wildfly.checkstyle:wildfly-checkstyle-config:jar:1.0.4.Final (provided)
        {
            processDependency( args, results, repositories, depSelector, depManager, depTraverser, verFilter,
                               dependency );
dependency=org.jboss.remoting:jboss-remoting:jar:4.0.18.Final (compile)
/ we geven \n,
args	DefaultDependencyCollector$Args  (id=8772)	
	nodes	NodeStack  (id=8750)	
		nodes	DependencyNode[96]  (id=8752)	
null
org.wildfly.arquillian:wildfly-arquillian-container-managed:jar:2.0.1.Final (compile)
org.wildfly.arquillian:wildfly-arquillian-common:jar:2.0.1.Final (compile)
org.wildfly.core:wildfly-controller-client:jar:2.0.10.Final (compile)
org.wildfly.core:wildfly-protocol:jar:2.0.10.Final (compile)
org.jboss.remoting:jboss-remoting:jar:4.0.18.Final (compile)
org.jboss.xnio:xnio-api:jar:3.3.4.Final (compile)
		size 5
/ klopt	, op index 5 stond org.jboss.logging:jboss-logging:jar:3.3.0.Final (compile), maar die was processed, dus is overwrite met org.jboss.remoting:jboss-remoting:jar:4.0.18.Final (compile), en dan is daar ook nog org.jboss.xnio:xnio-api:jar:3.3.4.Final (compile) bijgekomen, maar beide zijn ook processed, want de size is weer 5	,

args	DefaultDependencyCollector$Args  (id=8772)	
	pool	DataPool  (id=8738)	
		artifacts	ObjectPool<T>  (id=8743)	
			objects	WeakHashMap<K,V>  (id=8768)	
org.wildfly.core:wildfly-controller-client:jar:2.0.10.Final=java.lang.ref.WeakReference@30865a90
org.jboss.logging:jboss-logging:jar:3.1.4.GA=java.lang.ref.WeakReference@63034ed1
org.wildfly.arquillian:wildfly-arquillian-container-managed:jar:2.0.1.Final=java.lang.ref.WeakReference@1b70203f
org.wildfly.arquillian:wildfly-arquillian-common:jar:2.0.1.Final=java.lang.ref.WeakReference@51671b08
org.jboss.remoting:jboss-remoting:jar:4.0.18.Final=java.lang.ref.WeakReference@232024b9
org.wildfly.core:wildfly-protocol:jar:2.0.10.Final=java.lang.ref.WeakReference@6134ac4a
org.jboss.xnio:xnio-api:jar:3.3.4.Final=java.lang.ref.WeakReference@55a8dc49
org.jboss.logging:jboss-logging:jar:3.3.0.Final=java.lang.ref.WeakReference@71b1a49c
		dependencies
org.jboss.logging:jboss-logging:jar:3.1.4.GA (compile)=java.lang.ref.WeakReference@2a415aa9
org.wildfly.core:wildfly-controller-client:jar:2.0.10.Final (compile)=java.lang.ref.WeakReference@6c2d4cc6
org.wildfly.core:wildfly-protocol:jar:2.0.10.Final (compile)=java.lang.ref.WeakReference@14c053c6
org.wildfly.arquillian:wildfly-arquillian-common:jar:2.0.1.Final (compile)=java.lang.ref.WeakReference@1162410a
org.jboss.logging:jboss-logging:jar:3.3.0.Final (compile)=java.lang.ref.WeakReference@3f3ddbd9
org.wildfly.arquillian:wildfly-arquillian-container-managed:jar:2.0.1.Final (compile)=java.lang.ref.WeakReference@5710768a
org.jboss.remoting:jboss-remoting:jar:4.0.18.Final (compile)=java.lang.ref.WeakReference@53cdecf6
org.jboss.xnio:xnio-api:jar:3.3.4.Final (compile)=java.lang.ref.WeakReference@71ea1fda


/ we zien dat erbij zijn gekomen	,
org.jboss.remoting:jboss-remoting:jar:4.0.18.Final=java.lang.ref.WeakReference@232024b9
org.jboss.xnio:xnio-api:jar:3.3.4.Final=java.lang.ref.WeakReference@55a8dc49

/ we zijn nog steeds in het process van	,
org.wildfly.core:wildfly-protocol:jar:2.0.10.Final (compile)
/
DefaultDependencyCollector.process(Args, Results, List<Dependency>, List<RemoteRepository>, DependencySelector, DependencyManager, DependencyTraverser, VersionFilter) line: 351
	
/ volgende,
        for ( Dependency dependency : dependencies ) 
dependency=org.jboss.sasl:jboss-sasl:jar:1.0.5.Final (compile)
        {
            processDependency( args, results, repositories, depSelector, depManager, depTraverser, verFilter,
                               dependency );
/ we geven \n,
nodes	NodeStack  (id=8750)	
	nodes	DependencyNode[96]  (id=8752)	
null
org.wildfly.arquillian:wildfly-arquillian-container-managed:jar:2.0.1.Final (compile)
org.wildfly.arquillian:wildfly-arquillian-common:jar:2.0.1.Final (compile)
org.wildfly.core:wildfly-controller-client:jar:2.0.10.Final (compile)
org.wildfly.core:wildfly-protocol:jar:2.0.10.Final (compile)
org.jboss.sasl:jboss-sasl:jar:1.0.5.Final (compile)		<- erbij,
org.jboss.logging:jboss-logging:jar:3.1.1.GA (compile)	<- erbij,
	size 5

args	DefaultDependencyCollector$Args  (id=8772)	
	pool	DataPool  (id=8738)	
		dependencies	ObjectPool<T>  (id=8745)	
org.jboss.logging:jboss-logging:jar:3.1.4.GA (compile)=java.lang.ref.WeakReference@2a415aa9
org.wildfly.core:wildfly-controller-client:jar:2.0.10.Final (compile)=java.lang.ref.WeakReference@6c2d4cc6
org.wildfly.core:wildfly-protocol:jar:2.0.10.Final (compile)=java.lang.ref.WeakReference@14c053c6
org.wildfly.arquillian:wildfly-arquillian-common:jar:2.0.1.Final (compile)=java.lang.ref.WeakReference@1162410a
org.jboss.logging:jboss-logging:jar:3.3.0.Final (compile)=java.lang.ref.WeakReference@3f3ddbd9
org.wildfly.arquillian:wildfly-arquillian-container-managed:jar:2.0.1.Final (compile)=java.lang.ref.WeakReference@5710768a
org.jboss.remoting:jboss-remoting:jar:4.0.18.Final (compile)=java.lang.ref.WeakReference@53cdecf6
org.jboss.logging:jboss-logging:jar:3.1.1.GA (compile)=java.lang.ref.WeakReference@5b43e173			<- erbij,
org.jboss.sasl:jboss-sasl:jar:1.0.5.Final (compile)=java.lang.ref.WeakReference@2392212b			<- erbij,
org.jboss.xnio:xnio-api:jar:3.3.4.Final (compile)=java.lang.ref.WeakReference@71ea1fda

/ we zijn nog steeds in het process van	,
org.wildfly.core:wildfly-protocol:jar:2.0.10.Final (compile)
/
DefaultDependencyCollector.process(Args, Results, List<Dependency>, List<RemoteRepository>, DependencySelector, DependencyManager, DependencyTraverser, VersionFilter) line: 351
/ volgende,
        for ( Dependency dependency : dependencies )
        {
            processDependency( args, results, repositories, depSelector, depManager, depTraverser, verFilter,
                               dependency );
        }
args	DefaultDependencyCollector$Args  (id=8772)	
	nodes	NodeStack  (id=8750)	
		nodes	DependencyNode[96]  (id=8752)	
null
org.wildfly.arquillian:wildfly-arquillian-container-managed:jar:2.0.1.Final (compile)
org.wildfly.arquillian:wildfly-arquillian-common:jar:2.0.1.Final (compile)
org.wildfly.core:wildfly-controller-client:jar:2.0.10.Final (compile)
org.wildfly.core:wildfly-protocol:jar:2.0.10.Final (compile)
org.jboss.threads:jboss-threads:jar:2.2.1.Final (compile)		<- erbij,
org.jboss.logging:jboss-logging:jar:3.1.1.GA (compile)			<- used, maar hadden we al,
	size 5
args	DefaultDependencyCollector$Args  (id=8772)	
	pool	DataPool  (id=8738)	
		dependencies	ObjectPool<T>  (id=8745)	
			objects	WeakHashMap<K,V>  (id=9544)	
org.jboss.logging:jboss-logging:jar:3.1.4.GA (compile)=java.lang.ref.WeakReference@2a415aa9
org.wildfly.core:wildfly-controller-client:jar:2.0.10.Final (compile)=java.lang.ref.WeakReference@6c2d4cc6
org.wildfly.core:wildfly-protocol:jar:2.0.10.Final (compile)=java.lang.ref.WeakReference@14c053c6
org.wildfly.arquillian:wildfly-arquillian-common:jar:2.0.1.Final (compile)=java.lang.ref.WeakReference@1162410a
org.jboss.threads:jboss-threads:jar:2.2.1.Final (compile)=java.lang.ref.WeakReference@3e1162e7					<- erbij,
org.jboss.logging:jboss-logging:jar:3.3.0.Final (compile)=java.lang.ref.WeakReference@3f3ddbd9
org.wildfly.arquillian:wildfly-arquillian-container-managed:jar:2.0.1.Final (compile)=java.lang.ref.WeakReference@5710768a
org.jboss.remoting:jboss-remoting:jar:4.0.18.Final (compile)=java.lang.ref.WeakReference@53cdecf6
org.jboss.logging:jboss-logging:jar:3.1.1.GA (compile)=java.lang.ref.WeakReference@5b43e173			<- hadden we al,
org.jboss.sasl:jboss-sasl:jar:1.0.5.Final (compile)=java.lang.ref.WeakReference@2392212b
org.jboss.xnio:xnio-api:jar:3.3.4.Final (compile)=java.lang.ref.WeakReference@71ea1fda

/ we zijn nog steeds in het process van	,
org.wildfly.core:wildfly-protocol:jar:2.0.10.Final (compile)
/
DefaultDependencyCollector.process(Args, Results, List<Dependency>, List<RemoteRepository>, DependencySelector, DependencyManager, DependencyTraverser, VersionFilter) line: 351
/ volgende,
        for ( Dependency dependency : dependencies ) / org.jboss.xnio:xnio-api:jar:3.3.4.Final / hebben we al,
        {
            processDependency( args, results, repositories, depSelector, depManager, depTraverser, verFilter,
                               dependency );
        }
args	DefaultDependencyCollector$Args  (id=8772)	
	nodes	NodeStack  (id=8750)	
		nodes	DependencyNode[96]  (id=8752)	
/ onveranderd	,
args	DefaultDependencyCollector$Args  (id=8772)	
	pool	DataPool  (id=8738)	
		artifacts	ObjectPool<T>  (id=8743)	
/ onveranderd,

/ we zijn nog steeds in het process van	,
org.wildfly.core:wildfly-protocol:jar:2.0.10.Final (compile)
/
DefaultDependencyCollector.process(Args, Results, List<Dependency>, List<RemoteRepository>, DependencySelector, DependencyManager, DependencyTraverser, VersionFilter) line: 351
/ volgende,
        for ( Dependency dependency : dependencies ) / org.jboss.xnio:xnio-nio:jar:3.3.4.Final 
        {
            processDependency( args, results, repositories, depSelector, depManager, depTraverser, verFilter,
                               dependency );
        }	
args	DefaultDependencyCollector$Args  (id=8772)	
	nodes	NodeStack  (id=8750)	
		nodes	DependencyNode[96]  (id=8752)	
null
org.wildfly.arquillian:wildfly-arquillian-container-managed:jar:2.0.1.Final (compile)
org.wildfly.arquillian:wildfly-arquillian-common:jar:2.0.1.Final (compile)
org.wildfly.core:wildfly-controller-client:jar:2.0.10.Final (compile)
org.wildfly.core:wildfly-protocol:jar:2.0.10.Final (compile)
org.jboss.xnio:xnio-nio:jar:3.3.4.Final (compile)				<- erbij,
org.jboss.logging:jboss-logging:jar:3.1.1.GA (compile)	<- al,
args	DefaultDependencyCollector$Args  (id=8772)	
	pool	DataPool  (id=8738)	
		artifacts	ObjectPool<T>  (id=8743)	
org.wildfly.core:wildfly-controller-client:jar:2.0.10.Final=org.eclipse.aether.internal.impl.DataPool$GoodDescriptor@73e132e0
org.jboss.logging:jboss-logging:jar:3.1.4.GA=org.eclipse.aether.internal.impl.DataPool$GoodDescriptor@669d2b1b
org.wildfly.arquillian:wildfly-arquillian-container-managed:jar:2.0.1.Final=org.eclipse.aether.internal.impl.DataPool$GoodDescriptor@3773862a
org.jboss.logging:jboss-logging:jar:3.1.1.GA=org.eclipse.aether.internal.impl.DataPool$GoodDescriptor@721eb7df
org.wildfly.arquillian:wildfly-arquillian-common:jar:2.0.1.Final=org.eclipse.aether.internal.impl.DataPool$GoodDescriptor@2472c7d8
org.jboss.remoting:jboss-remoting:jar:4.0.18.Final=org.eclipse.aether.internal.impl.DataPool$GoodDescriptor@1ea9f009
org.jboss.xnio:xnio-nio:jar:3.3.4.Final=org.eclipse.aether.internal.impl.DataPool$GoodDescriptor@38600b					<- erbij,
org.jboss.sasl:jboss-sasl:jar:1.0.5.Final=org.eclipse.aether.internal.impl.DataPool$GoodDescriptor@350b3a17
org.wildfly.core:wildfly-protocol:jar:2.0.10.Final=org.eclipse.aether.internal.impl.DataPool$GoodDescriptor@777c9dc9
org.jboss.xnio:xnio-api:jar:3.3.4.Final=org.eclipse.aether.internal.impl.DataPool$GoodDescriptor@405325cf
org.jboss.threads:jboss-threads:jar:2.2.1.Final=org.eclipse.aether.internal.impl.DataPool$GoodDescriptor@30f4b1a6
org.jboss.logging:jboss-logging:jar:3.3.0.Final=org.eclipse.aether.internal.impl.DataPool$GoodDescriptor@589b028e

/ we zijn nog steeds in het process van	,
org.wildfly.core:wildfly-protocol:jar:2.0.10.Final (compile)
/ volgende,
        for ( Dependency dependency : dependencies ) 
junit:junit:jar:4.12 (test)
/n,
org.wildfly.checkstyle:wildfly-checkstyle-config:jar:1.0.4.Final (provided)
/n,
        {
            processDependency( args, results, repositories, depSelector, depManager, depTraverser, verFilter,
                               dependency );
        }	
/ Geen dependencies meer	,
/t,
DefaultDependencyCollector.doRecurse(Args, Results, List<RemoteRepository>, DependencySelector, DependencyManager, DependencyTraverser, VersionFilter, Dependency, ArtifactDescriptorResult, DefaultDependencyNode) line: 507	
            process( args, results, descriptorResult.getDependencies(), childRepos, childSelector, childManager,
                     childTraverser, childFilter );

            args.nodes.pop();
args	DefaultDependencyCollector$Args  (id=8772)	
	nodes	NodeStack  (id=8750)	
		nodes	DependencyNode[96]  (id=8752)	
null
org.wildfly.arquillian:wildfly-arquillian-container-managed:jar:2.0.1.Final (compile)
org.wildfly.arquillian:wildfly-arquillian-common:jar:2.0.1.Final (compile)
org.wildfly.core:wildfly-controller-client:jar:2.0.10.Final (compile)			<- tot hier,
org.wildfly.core:wildfly-protocol:jar:2.0.10.Final (compile)			<- process klaar	,
org.jboss.xnio:xnio-nio:jar:3.3.4.Final (compile)
org.jboss.logging:jboss-logging:jar:3.1.1.GA (compile)			

/t,
DefaultDependencyCollector.processDependency(Args, Results, List<RemoteRepository>, DependencySelector, DependencyManager, DependencyTraverser, VersionFilter, Dependency, List<Artifact>, boolean) line: 462	
                        doRecurse( args, results, repositories, depSelector, depManager, depTraverser, verFilter, d,
                                   descriptorResult, child );
/d,
org.wildfly.core:wildfly-protocol:jar:2.0.10.Final
/t,
DefaultDependencyCollector.process(Args, Results, List<Dependency>, List<RemoteRepository>, DependencySelector, DependencyManager, DependencyTraverser, VersionFilter) line: 351	

/ we zijn aan het resolve: org.wildfly.core:wildfly-controller-client:jar:2.0.10.Final (compile)
	
        for ( Dependency dependency : dependencies )
org.wildfly.core:wildfly-protocol:jar:2.0.10.Final (compile)	/ zojuist gedaan	,
org.jboss:jboss-dmr:jar:1.3.0.Final (compile)
org.jboss.logging:jboss-logging:jar:3.3.0.Final (compile)
org.jboss.logging:jboss-logging-annotations:jar:2.0.1.Final (provided?)
org.jboss.logging:jboss-logging-processor:jar:2.0.1.Final (provided?)
org.jboss.threads:jboss-threads:jar:2.2.1.Final (compile)
junit:junit:jar:4.12 (test)
org.wildfly.checkstyle:wildfly-checkstyle-config:jar:1.0.4.Final (provided)

/ nu
dependency=org.jboss:jboss-dmr:jar:1.3.0.Final (compile)
        {
            processDependency( args, results, repositories, depSelector, depManager, depTraverser, verFilter,
                               dependency );
/ we geven /n,
args	DefaultDependencyCollector$Args  (id=8772)	
	nodes	NodeStack  (id=8750)	
		nodes	DependencyNode[96]  (id=8752)	
null
org.wildfly.arquillian:wildfly-arquillian-container-managed:jar:2.0.1.Final (compile)
org.wildfly.arquillian:wildfly-arquillian-common:jar:2.0.1.Final (compile)
org.wildfly.core:wildfly-controller-client:jar:2.0.10.Final (compile)
org.jboss:jboss-dmr:jar:1.3.0.Final (compile)	<- used	,
org.jboss.xnio:xnio-nio:jar:3.3.4.Final (compile)	<- used	, 
org.jboss.logging:jboss-logging:jar:3.1.1.GA (compile) <- used	,
		size	4	
	pool	DataPool  (id=8738)	
		artifacts	ObjectPool<T>  (id=8743)	
			objects	WeakHashMap<K,V>  (id=8768)	
org.wildfly.core:wildfly-controller-client:jar:2.0.10.Final=java.lang.ref.WeakReference@30865a90
org.jboss.logging:jboss-logging:jar:3.1.4.GA=java.lang.ref.WeakReference@63034ed1
org.wildfly.arquillian:wildfly-arquillian-container-managed:jar:2.0.1.Final=java.lang.ref.WeakReference@1b70203f
org.jboss.logging:jboss-logging:jar:3.1.1.GA=java.lang.ref.WeakReference@28f8e165
org.wildfly.arquillian:wildfly-arquillian-common:jar:2.0.1.Final=java.lang.ref.WeakReference@51671b08
org.jboss.remoting:jboss-remoting:jar:4.0.18.Final=java.lang.ref.WeakReference@232024b9
org.jboss.xnio:xnio-nio:jar:3.3.4.Final=java.lang.ref.WeakReference@5ab9b447
org.jboss.sasl:jboss-sasl:jar:1.0.5.Final=java.lang.ref.WeakReference@545f80bf
org.wildfly.core:wildfly-protocol:jar:2.0.10.Final=java.lang.ref.WeakReference@6134ac4a
org.jboss.xnio:xnio-api:jar:3.3.4.Final=java.lang.ref.WeakReference@55a8dc49
org.jboss.threads:jboss-threads:jar:2.2.1.Final=java.lang.ref.WeakReference@4e406694
org.jboss.logging:jboss-logging:jar:3.3.0.Final=java.lang.ref.WeakReference@71b1a49c
org.jboss:jboss-dmr:jar:1.3.0.Final=java.lang.ref.WeakReference@4c7a078					<- erbij,

/ we zijn nog process org.wildfly.core:wildfly-controller-client:jar:2.0.10.Final (compile)

        for ( Dependency dependency : dependencies )
        {
org.jboss.logging:jboss-logging:jar:3.3.0.Final (compile)	
/ deze is er al, en hij process deze niet,
org.jboss.logging:jboss-logging-annotations:jar:2.0.1.Final (provided?)
/n,
org.jboss.logging:jboss-logging-processor:jar:2.0.1.Final (provided?)
/n,
org.jboss.logging:jboss-logging:jar:3.3.0.Final (compile)	
/ deze is er al,
junit:junit:jar:4.12 (test)
/n,
org.wildfly.checkstyle:wildfly-checkstyle-config:jar:1.0.4.Final (provided)
/n,

            processDependency( args, results, repositories, depSelector, depManager, depTraverser, verFilter,
                               dependency );
							 
/ als er al is, en hij process deze niet:
/s,
DefaultDependencyCollector.doRecurse(Args, Results, List<RemoteRepository>, DependencySelector, DependencyManager, DependencyTraverser, VersionFilter, Dependency, ArtifactDescriptorResult, DefaultDependencyNode child) line: 511	

        List<DependencyNode> children = args.pool.getChildren( key );
/ key is WH hetzelfde als child, en is een van de dep die we onderzoeken	,
        if ( children == null ) 
/n,
/ hij gaat dus niet deze key = org.jboss.logging:jboss-logging:jar:3.3.0.Final (compile)	, of org.jboss.logging:jboss-logging:jar:3.3.0.Final (compile)	 process,
        {
            args.pool.putChildren( key, child.getChildren() );

            args.nodes.push( child );

            process( args, results, descriptorResult.getDependencies(), childRepos, childSelector, childManager,
                     childTraverser, childFilter );

            args.nodes.pop();
        }
        else
/j,
        {
            child.setChildren( children );
/ TODO
        }

/ geen deps meer, voor org.wildfly.arquillian:wildfly-arquillian-container-managed:jar:2.0.1.Final (compile)	,
/t,
DefaultDependencyCollector.doRecurse(Args, Results, List<RemoteRepository>, DependencySelector, DependencyManager, DependencyTraverser, VersionFilter, Dependency, ArtifactDescriptorResult, DefaultDependencyNode) line: 507	
            process( args, results, descriptorResult.getDependencies(), childRepos, childSelector, childManager,
                     childTraverser, childFilter );
/d,
            args.nodes.pop();
			
args	DefaultDependencyCollector$Args  (id=8772)	
	nodes	NodeStack  (id=8750)	
		nodes	DependencyNode[96]  (id=8752)	
null
org.wildfly.arquillian:wildfly-arquillian-container-managed:jar:2.0.1.Final (compile)
org.wildfly.arquillian:wildfly-arquillian-common:jar:2.0.1.Final (compile)	
org.wildfly.core:wildfly-controller-client:jar:2.0.10.Final (compile)	/ net gedaan,
	size 3

/t,
DefaultDependencyCollector.process(Args, Results, List<Dependency>, List<RemoteRepository>, DependencySelector, DependencyManager, DependencyTraverser, VersionFilter) line: 351	

/ we process org.wildfly.arquillian:wildfly-arquillian-common:jar:2.0.1.Final (compile)

        for ( Dependency dependency : dependencies )
com.google.guava:guava:jar:16.0.1 (provided)
org.jboss.arquillian.testenricher:arquillian-testenricher-cdi:jar:1.1.11.Final (compile)
org.jboss.arquillian.testenricher:arquillian-testenricher-ejb:jar:1.1.11.Final (compile)
org.jboss.arquillian.testenricher:arquillian-testenricher-initialcontext:jar:1.1.11.Final (compile)
org.jboss.arquillian.testenricher:arquillian-testenricher-resource:jar:1.1.11.Final (compile)
org.jboss.arquillian.container:arquillian-container-test-impl-base:jar:1.1.11.Final (compile)
org.jboss.arquillian.protocol:arquillian-protocol-servlet:jar:1.1.11.Final (compile)
org.wildfly.arquillian:wildfly-arquillian-testenricher-msc:jar:2.0.1.Final (compile)
org.wildfly.core:wildfly-controller-client:jar:2.0.10.Final (compile)							/ zonet process,
org.jboss.shrinkwrap.descriptors:shrinkwrap-descriptors-impl-base:jar:2.0.0-alpha-9 (compile)	/n, org.jboss.shrinkwrap.descriptors:*:*:* is een exclusion,
junit:junit:jar:4.12 (test)	/n, test scope,
org.jboss.arquillian.core:arquillian-core-api:jar:1.1.11.Final (compile)	/n, org.jboss.arquillian.core:*:*:* is een exclusion,
        {
            processDependency( args, results, repositories, depSelector, depManager, depTraverser, verFilter,
                               dependency );
        }
		
/ geen deps meer,
/t,
DefaultDependencyCollector.doRecurse(Args, Results, List<RemoteRepository>, DependencySelector, DependencyManager, DependencyTraverser, VersionFilter, Dependency, ArtifactDescriptorResult, DefaultDependencyNode) line: 507
            process( args, results, descriptorResult.getDependencies(), childRepos, childSelector, childManager,
                     childTraverser, childFilter );
/d,
            args.nodes.pop();
			
args	DefaultDependencyCollector$Args  (id=8772)	
	nodes	NodeStack  (id=8750)	
		nodes	DependencyNode[96]  (id=8752)
null
org.wildfly.arquillian:wildfly-arquillian-container-managed:jar:2.0.1.Final (compile)
org.wildfly.arquillian:wildfly-arquillian-common:jar:2.0.1.Final (compile)					/ zonet process,
	size 2
/t,
DefaultDependencyCollector.process(Args, Results, List<Dependency>, List<RemoteRepository>, DependencySelector, DependencyManager, DependencyTraverser, VersionFilter) line: 351	

/ process org.wildfly.arquillian:wildfly-arquillian-container-managed:jar:2.0.1.Final (compile)

        for ( Dependency dependency : dependencies )
org.wildfly.arquillian:wildfly-arquillian-common:jar:2.0.1.Final (compile)			/ zonet processed,
org.wildfly.arquillian:wildfly-arquillian-protocol-jmx:jar:2.0.1.Final (compile)
org.jboss.xnio:xnio-api:jar:3.3.4.Final (compile)
org.jboss.xnio:xnio-nio:jar:3.3.4.Final (compile)
org.jboss.logging:jboss-logging:jar:3.3.0.Final (compile)
org.jboss.marshalling:jboss-marshalling:jar:1.4.10.Final (compile)
org.jboss.marshalling:jboss-marshalling-river:jar:1.4.10.Final (compile)
org.jboss.remoting:jboss-remoting:jar:4.0.18.Final (compile)
org.jboss.remotingjmx:remoting-jmx:jar:2.0.1.Final (compile)
org.jboss.sasl:jboss-sasl:jar:1.0.5.Final (compile)
javax.inject:javax.inject:jar:1 (compile)
org.wildfly.core:wildfly-launcher:jar:2.0.10.Final (compile)
org.jboss.arquillian.junit:arquillian-junit-container:jar:1.1.11.Final (test)
org.jboss.arquillian.protocol:arquillian-protocol-servlet:jar:1.1.11.Final (test)
org.jboss:jboss-ejb-client:jar:2.0.2.Final (test)
org.jboss.spec.javax.ejb:jboss-ejb-api_3.2_spec:jar:1.0.0.Final (test)
org.jboss.spec.javax.servlet:jboss-servlet-api_3.1_spec:jar:1.0.0.Final (test)
org.jboss.arquillian.core:arquillian-core-api:jar:1.1.11.Final (compile)
junit:junit:jar:4.12 (test)
        {
            processDependency( args, results, repositories, depSelector, depManager, depTraverser, verFilter,
                               dependency );
							   
/ Intermezzo

Exclusions:

org.jboss.arquillian.config:*:*:*
org.jboss.arquillian.container:*:*:*
org.jboss.arquillian.core:*:*:*
org.jboss.arquillian.protocol:*:*:*
org.jboss.arquillian.test:*:*:*
org.jboss.arquillian.testenricher:*:*:*   					
org.jboss.shrinkwrap:*:*:*
org.jboss.shrinkwrap.api:*:*:*
org.jboss.shrinkwrap.descriptors:*:*:*
org.jboss.shrinkwrap.resolver:*:*:*
*:wildfly-arquillian-testenricher-msc:*:*

/ Einde Intermezzo

dependency=org.wildfly.arquillian:wildfly-arquillian-protocol-jmx:jar:2.0.1.Final (compile)
/s,
DefaultDependencyCollector.processDependency(Args, Results, List<RemoteRepository>, DependencySelector, DependencyManager, DependencyTraverser, VersionFilter, Dependency, List<Artifact>, boolean) line: 378	
        if ( depSelector != null && !depSelector.selectDependency( dependency ) )
/n,
            ArtifactDescriptorRequest descriptorRequest = createArtifactDescriptorRequest( args, repositories, d );
descriptorRequest	ArtifactDescriptorRequest  (id=12476)	
	artifact	DefaultArtifact  (id=12469)	
org.wildfly.arquillian:wildfly-arquillian-protocol-jmx:jar:2.0.1.Final

            final ArtifactDescriptorResult descriptorResult =
                getArtifactDescriptorResult( args, results, noDescriptor, d, descriptorRequest );
descriptorResult	ArtifactDescriptorResult  (id=12477)	
	artifact	DefaultArtifact  (id=12469)	
org.wildfly.arquillian:wildfly-arquillian-protocol-jmx:jar:2.0.1.Final
	dependencies	ArrayList<E>  (id=12484)	
org.wildfly.security:wildfly-elytron:jar:1.0.2.Final (compile)
org.wildfly.arquillian:wildfly-arquillian-testenricher-msc:jar:2.0.1.Final (compile)
org.jboss.arquillian.core:arquillian-core-spi:jar:1.1.11.Final (compile)
org.jboss.arquillian.protocol:arquillian-protocol-jmx:jar:1.1.11.Final (compile)
org.wildfly.core:wildfly-jmx:jar:2.0.10.Final (compile)
junit:junit:jar:4.12 (provided)
org.jboss.arquillian.core:arquillian-core-api:jar:1.1.11.Final (compile)

                        doRecurse( args, results, repositories, depSelector, depManager, depTraverser, verFilter, d,
                                   descriptorResult, child );
child=org.wildfly.arquillian:wildfly-arquillian-protocol-jmx:jar:2.0.1.Final
/s,
DefaultDependencyCollector.doRecurse(Args, Results, List<RemoteRepository>, DependencySelector, DependencyManager, DependencyTraverser, VersionFilter, Dependency, ArtifactDescriptorResult, DefaultDependencyNode) line: 504	
            process( args, results, descriptorResult.getDependencies(), childRepos, childSelector, childManager,
                     childTraverser, childFilter );
/s,
DefaultDependencyCollector.process(Args, Results, List<Dependency>, List<RemoteRepository>, DependencySelector, DependencyManager, DependencyTraverser, VersionFilter) line: 349	

args	DefaultDependencyCollector$Args  (id=8772)	
	nodes	NodeStack  (id=8750)	
		nodes	DependencyNode[96]  (id=8752)	
null
org.wildfly.arquillian:wildfly-arquillian-container-managed:jar:2.0.1.Final (compile)
org.wildfly.arquillian:wildfly-arquillian-protocol-jmx:jar:2.0.1.Final (compile)
	size 3
	
args	DefaultDependencyCollector$Args  (id=8772)	
	pool	DataPool  (id=8738)	
		artifacts	ObjectPool<T>  (id=8743)	
			objects	WeakHashMap<K,V>  (id=8768)	
org.wildfly.core:wildfly-controller-client:jar:2.0.10.Final=java.lang.ref.WeakReference@30865a90
org.jboss.logging:jboss-logging:jar:3.1.4.GA=java.lang.ref.WeakReference@63034ed1
org.wildfly.arquillian:wildfly-arquillian-container-managed:jar:2.0.1.Final=java.lang.ref.WeakReference@1b70203f
org.jboss.logging:jboss-logging:jar:3.1.1.GA=java.lang.ref.WeakReference@28f8e165
org.wildfly.arquillian:wildfly-arquillian-common:jar:2.0.1.Final=java.lang.ref.WeakReference@51671b08
org.jboss.remoting:jboss-remoting:jar:4.0.18.Final=java.lang.ref.WeakReference@232024b9
org.jboss.xnio:xnio-nio:jar:3.3.4.Final=java.lang.ref.WeakReference@5ab9b447
org.jboss.sasl:jboss-sasl:jar:1.0.5.Final=java.lang.ref.WeakReference@545f80bf
org.wildfly.arquillian:wildfly-arquillian-protocol-jmx:jar:2.0.1.Final=java.lang.ref.WeakReference@6bb7cce7
org.wildfly.core:wildfly-protocol:jar:2.0.10.Final=java.lang.ref.WeakReference@6134ac4a
org.jboss.xnio:xnio-api:jar:3.3.4.Final=java.lang.ref.WeakReference@55a8dc49
org.jboss.threads:jboss-threads:jar:2.2.1.Final=java.lang.ref.WeakReference@4e406694
org.jboss.logging:jboss-logging:jar:3.3.0.Final=java.lang.ref.WeakReference@71b1a49c
org.jboss:jboss-dmr:jar:1.3.0.Final=java.lang.ref.WeakReference@4c7a078

        for ( Dependency dependency : dependencies )
org.wildfly.arquillian:wildfly-arquillian-common:jar:2.0.1.Final (compile)
/n, is er al,
org.wildfly.security:wildfly-elytron:jar:1.0.2.Final (compile)
/j, see beneden	,
org.wildfly.arquillian:wildfly-arquillian-testenricher-msc:jar:2.0.1.Final (compile)
/n, *:wildfly-arquillian-testenricher-msc:*:* is een exclusion,
org.jboss.arquillian.core:arquillian-core-spi:jar:1.1.11.Final (compile)
/n, exclusion,
org.jboss.arquillian.protocol:arquillian-protocol-jmx:jar:1.1.11.Final (compile)
/n exclusion,
org.wildfly.core:wildfly-jmx:jar:2.0.10.Final (compile)
/j, see beneden,
junit:junit:jar:4.12 (provided)
/n, provided scope,
org.jboss.arquillian.core:arquillian-core-api:jar:1.1.11.Final (compile)
/n, exclusion,
        {
            processDependency( args, results, repositories, depSelector, depManager, depTraverser, verFilter,
                               dependency );
/ 1ste,
dependency=org.wildfly.security:wildfly-elytron:jar:1.0.2.Final (compile)

args	DefaultDependencyCollector$Args  (id=8772)	
	nodes	NodeStack  (id=8750)	
		nodes	DependencyNode[96]  (id=8752)	
null
org.wildfly.arquillian:wildfly-arquillian-container-managed:jar:2.0.1.Final (compile)
org.wildfly.arquillian:wildfly-arquillian-protocol-jmx:jar:2.0.1.Final (compile)
org.wildfly.security:wildfly-elytron:jar:1.0.2.Final (compile)	/ used	,
	size 3

args	DefaultDependencyCollector$Args  (id=8772)	
	pool	DataPool  (id=8738)	
		artifacts	ObjectPool<T>  (id=8743)	
			objects	WeakHashMap<K,V>  (id=8768)	
org.wildfly.core:wildfly-controller-client:jar:2.0.10.Final=java.lang.ref.WeakReference@30865a90
org.jboss.logging:jboss-logging:jar:3.1.4.GA=java.lang.ref.WeakReference@63034ed1
org.wildfly.arquillian:wildfly-arquillian-container-managed:jar:2.0.1.Final=java.lang.ref.WeakReference@1b70203f
org.jboss.logging:jboss-logging:jar:3.1.1.GA=java.lang.ref.WeakReference@28f8e165
org.wildfly.security:wildfly-elytron:jar:1.0.2.Final=java.lang.ref.WeakReference@328572f0								<- erbij,
org.wildfly.arquillian:wildfly-arquillian-common:jar:2.0.1.Final=java.lang.ref.WeakReference@51671b08
org.jboss.remoting:jboss-remoting:jar:4.0.18.Final=java.lang.ref.WeakReference@232024b9
org.jboss.xnio:xnio-nio:jar:3.3.4.Final=java.lang.ref.WeakReference@5ab9b447
org.jboss.sasl:jboss-sasl:jar:1.0.5.Final=java.lang.ref.WeakReference@545f80bf
org.wildfly.arquillian:wildfly-arquillian-protocol-jmx:jar:2.0.1.Final=java.lang.ref.WeakReference@6bb7cce7
org.wildfly.core:wildfly-protocol:jar:2.0.10.Final=java.lang.ref.WeakReference@6134ac4a
org.jboss.xnio:xnio-api:jar:3.3.4.Final=java.lang.ref.WeakReference@55a8dc49
org.jboss.threads:jboss-threads:jar:2.2.1.Final=java.lang.ref.WeakReference@4e406694
org.jboss.logging:jboss-logging:jar:3.3.0.Final=java.lang.ref.WeakReference@71b1a49c
org.jboss:jboss-dmr:jar:1.3.0.Final=java.lang.ref.WeakReference@4c7a078

/ 2de, 
dependency=org.wildfly.core:wildfly-jmx:jar:2.0.10.Final (compile)

args	DefaultDependencyCollector$Args  (id=8772)	
	pool	DataPool  (id=8738)	
		artifacts	ObjectPool<T>  (id=8743)	
			objects	WeakHashMap<K,V>  (id=8768)
org.jboss.modules:jboss-modules:jar:1.5.1.Final=java.lang.ref.WeakReference@1929425f
org.wildfly.core:wildfly-server:jar:2.0.10.Final=java.lang.ref.WeakReference@718607eb
org.wildfly.core:wildfly-controller:jar:2.0.10.Final=java.lang.ref.WeakReference@27f3b6d6
org.wildfly.core:wildfly-io:jar:2.0.10.Final=java.lang.ref.WeakReference@757f675c
org.wildfly.core:wildfly-controller-client:jar:2.0.10.Final=java.lang.ref.WeakReference@30865a90
org.jboss.xnio:xnio-api:jar:3.3.0.Final=java.lang.ref.WeakReference@2617f816
org.jboss.logging:jboss-logging:jar:3.1.4.GA=java.lang.ref.WeakReference@63034ed1
org.wildfly.core:wildfly-version:jar:2.0.10.Final=java.lang.ref.WeakReference@676f0a60
org.wildfly.arquillian:wildfly-arquillian-container-managed:jar:2.0.1.Final=java.lang.ref.WeakReference@1b70203f
org.jboss.remotingjmx:remoting-jmx:jar:2.0.1.Final=java.lang.ref.WeakReference@5d10455d
org.jboss.logging:jboss-logging:jar:3.1.1.GA=java.lang.ref.WeakReference@28f8e165
org.jboss.logging:jboss-logging:jar:3.2.1.Final=java.lang.ref.WeakReference@535b8c24
org.wildfly.core:wildfly-domain-http-interface:jar:2.0.10.Final=java.lang.ref.WeakReference@4a951911
org.jboss.invocation:jboss-invocation:jar:1.4.1.Final=java.lang.ref.WeakReference@55b62629
org.wildfly.core:wildfly-process-controller:jar:2.0.10.Final=java.lang.ref.WeakReference@a53bb6f
org.wildfly.core:wildfly-domain-management:jar:2.0.10.Final=java.lang.ref.WeakReference@5e63cad
org.jboss:jboss-vfs:jar:3.2.11.Final=java.lang.ref.WeakReference@6759f091
org.jboss.marshalling:jboss-marshalling-river:jar:1.4.10.Final=java.lang.ref.WeakReference@33a053d
org.wildfly.core:wildfly-core-security:jar:2.0.10.Final=java.lang.ref.WeakReference@14a54ef6
org.wildfly.security:wildfly-elytron:jar:1.0.2.Final=java.lang.ref.WeakReference@328572f0
org.wildfly.arquillian:wildfly-arquillian-common:jar:2.0.1.Final=java.lang.ref.WeakReference@51671b08
org.jboss.marshalling:jboss-marshalling:jar:1.4.10.Final=java.lang.ref.WeakReference@20921b9b
org.jboss:staxmapper:jar:1.2.0.Final=java.lang.ref.WeakReference@867ba60
org.jboss.remoting:jboss-remoting:jar:4.0.18.Final=java.lang.ref.WeakReference@232024b9
org.jboss.xnio:xnio-api:jar:3.2.0.Final=java.lang.ref.WeakReference@5ba745bc
org.jboss.xnio:xnio-nio:jar:3.3.4.Final=java.lang.ref.WeakReference@5ab9b447
org.wildfly.core:wildfly-platform-mbean:jar:2.0.10.Final=java.lang.ref.WeakReference@654b72c0
org.wildfly.core:wildfly-jmx:jar:2.0.10.Final=java.lang.ref.WeakReference@55b5e331
org.jboss.sasl:jboss-sasl:jar:1.0.5.Final=java.lang.ref.WeakReference@545f80bf
org.jboss.remoting:jboss-remoting:jar:4.0.8.Final=java.lang.ref.WeakReference@6034e75d
org.wildfly.core:wildfly-core-security-api:jar:2.0.10.Final=java.lang.ref.WeakReference@15fc442
org.wildfly.arquillian:wildfly-arquillian-protocol-jmx:jar:2.0.1.Final=java.lang.ref.WeakReference@6bb7cce7
org.wildfly.common:wildfly-common:jar:1.1.0.Final=java.lang.ref.WeakReference@3f3c7bdb
org.wildfly.core:wildfly-protocol:jar:2.0.10.Final=java.lang.ref.WeakReference@6134ac4a
org.picketbox:picketbox:jar:4.9.4.Final=java.lang.ref.WeakReference@456abb66
io.undertow:undertow-core:jar:1.3.15.Final=java.lang.ref.WeakReference@2a3a299
org.jboss.logmanager:jboss-logmanager:jar:2.0.3.Final=java.lang.ref.WeakReference@7da10b5b
org.jboss.msc:jboss-msc:jar:1.2.6.Final=java.lang.ref.WeakReference@219f4597
org.jboss.stdio:jboss-stdio:jar:1.0.2.GA=java.lang.ref.WeakReference@31be6b49
org.wildfly.core:wildfly-network:jar:2.0.10.Final=java.lang.ref.WeakReference@2e16b08d
org.wildfly.core:wildfly-deployment-repository:jar:2.0.10.Final=java.lang.ref.WeakReference@5b989dc7
org.jboss:jandex:jar:2.0.1.Final=java.lang.ref.WeakReference@70d8de
org.wildfly.core:wildfly-remoting:jar:2.0.10.Final=java.lang.ref.WeakReference@42561fba
org.jboss.xnio:xnio-api:jar:3.3.4.Final=java.lang.ref.WeakReference@55a8dc49
org.jboss.xnio:xnio-nio:jar:3.3.0.Final=java.lang.ref.WeakReference@595f4da5
org.jboss.threads:jboss-threads:jar:2.2.1.Final=java.lang.ref.WeakReference@4e406694
org.jboss.logging:jboss-logging:jar:3.3.0.Final=java.lang.ref.WeakReference@71b1a49c
org.jboss:jboss-dmr:jar:1.3.0.Final=java.lang.ref.WeakReference@4c7a078
org.wildfly.core:wildfly-self-contained:jar:2.0.10.Final=java.lang.ref.WeakReference@46b695ec

/ geen deps meer voor
org.wildfly.arquillian:wildfly-arquillian-container-managed:jar:2.0.1.Final (compile)
/t,
DefaultDependencyCollector.doRecurse(Args, Results, List<RemoteRepository>, DependencySelector, DependencyManager, DependencyTraverser, VersionFilter, Dependency, ArtifactDescriptorResult, DefaultDependencyNode) line: 507	
           process( args, results, descriptorResult.getDependencies(), childRepos, childSelector, childManager,
                     childTraverser, childFilter );
/d,
            args.nodes.pop();
/t,
DefaultDependencyCollector.process(Args, Results, List<Dependency>, List<RemoteRepository>, DependencySelector, DependencyManager, DependencyTraverser, VersionFilter) line: 351	

/ processing org.wildfly.arquillian:wildfly-arquillian-container-managed:jar:2.0.1.Final (compile)

        for ( Dependency dependency : dependencies )
org.wildfly.arquillian:wildfly-arquillian-common:jar:2.0.1.Final (compile)			<- processed,
org.wildfly.arquillian:wildfly-arquillian-protocol-jmx:jar:2.0.1.Final (compile)	<- processed,
org.jboss.xnio:xnio-api:jar:3.3.4.Final (compile)	/ al,
org.jboss.xnio:xnio-nio:jar:3.3.4.Final (compile)	/ al,
org.jboss.logging:jboss-logging:jar:3.3.0.Final (compile)	/ al,
org.jboss.marshalling:jboss-marshalling:jar:1.4.10.Final (compile)	/ al,
org.jboss.marshalling:jboss-marshalling-river:jar:1.4.10.Final (compile)	/ al,
org.jboss.remoting:jboss-remoting:jar:4.0.18.Final (compile) / al,
org.jboss.remotingjmx:remoting-jmx:jar:2.0.1.Final (compile)	/ al,
org.jboss.sasl:jboss-sasl:jar:1.0.5.Final (compile)	/ al,
javax.inject:javax.inject:jar:1 (compile) /j, 	nieuw	,
org.wildfly.core:wildfly-launcher:jar:2.0.10.Final (compile)	/j, nieuw,
org.jboss.arquillian.junit:arquillian-junit-container:jar:1.1.11.Final (test)	/ n,
org.jboss.arquillian.protocol:arquillian-protocol-servlet:jar:1.1.11.Final (test)	/n,
org.jboss:jboss-ejb-client:jar:2.0.2.Final (test)	/n, 
org.jboss.spec.javax.ejb:jboss-ejb-api_3.2_spec:jar:1.0.0.Final (test)	/n,
org.jboss.spec.javax.servlet:jboss-servlet-api_3.1_spec:jar:1.0.0.Final (test)	/n,
org.jboss.arquillian.core:arquillian-core-api:jar:1.1.11.Final (compile)	/ exclusion,
junit:junit:jar:4.12 (test)	/n, scope,
        {
            processDependency( args, results, repositories, depSelector, depManager, depTraverser, verFilter,
                               dependency );
/ 3de	,						   
dependency=javax.inject:javax.inject:jar:1 (compile)
/ 1 dep erbij,
args	DefaultDependencyCollector$Args  (id=8772)	
	pool	DataPool  (id=8738)	
		artifacts	ObjectPool<T>  (id=8743)	
			objects	WeakHashMap<K,V>  (id=8768)
org.jboss.modules:jboss-modules:jar:1.5.1.Final=java.lang.ref.WeakReference@1929425f
org.wildfly.core:wildfly-server:jar:2.0.10.Final=java.lang.ref.WeakReference@718607eb
org.wildfly.core:wildfly-controller:jar:2.0.10.Final=java.lang.ref.WeakReference@27f3b6d6
org.wildfly.core:wildfly-io:jar:2.0.10.Final=java.lang.ref.WeakReference@757f675c
org.wildfly.core:wildfly-controller-client:jar:2.0.10.Final=java.lang.ref.WeakReference@30865a90
javax.inject:javax.inject:jar:1=java.lang.ref.WeakReference@11ce2e22								<- nieuw	,
org.jboss.xnio:xnio-api:jar:3.3.0.Final=java.lang.ref.WeakReference@2617f816
org.jboss.logging:jboss-logging:jar:3.1.4.GA=java.lang.ref.WeakReference@63034ed1
org.wildfly.core:wildfly-version:jar:2.0.10.Final=java.lang.ref.WeakReference@676f0a60
org.wildfly.arquillian:wildfly-arquillian-container-managed:jar:2.0.1.Final=java.lang.ref.WeakReference@1b70203f
org.jboss.remotingjmx:remoting-jmx:jar:2.0.1.Final=java.lang.ref.WeakReference@5d10455d
org.jboss.logging:jboss-logging:jar:3.1.1.GA=java.lang.ref.WeakReference@28f8e165
org.jboss.logging:jboss-logging:jar:3.2.1.Final=java.lang.ref.WeakReference@535b8c24
org.wildfly.core:wildfly-domain-http-interface:jar:2.0.10.Final=java.lang.ref.WeakReference@4a951911
org.jboss.invocation:jboss-invocation:jar:1.4.1.Final=java.lang.ref.WeakReference@55b62629
org.wildfly.core:wildfly-process-controller:jar:2.0.10.Final=java.lang.ref.WeakReference@a53bb6f
org.wildfly.core:wildfly-domain-management:jar:2.0.10.Final=java.lang.ref.WeakReference@5e63cad
org.jboss:jboss-vfs:jar:3.2.11.Final=java.lang.ref.WeakReference@6759f091
org.jboss.marshalling:jboss-marshalling-river:jar:1.4.10.Final=java.lang.ref.WeakReference@33a053d
org.wildfly.core:wildfly-core-security:jar:2.0.10.Final=java.lang.ref.WeakReference@14a54ef6
org.wildfly.security:wildfly-elytron:jar:1.0.2.Final=java.lang.ref.WeakReference@328572f0
org.wildfly.arquillian:wildfly-arquillian-common:jar:2.0.1.Final=java.lang.ref.WeakReference@51671b08
org.jboss.marshalling:jboss-marshalling:jar:1.4.10.Final=java.lang.ref.WeakReference@20921b9b
org.jboss:staxmapper:jar:1.2.0.Final=java.lang.ref.WeakReference@867ba60
org.jboss.remoting:jboss-remoting:jar:4.0.18.Final=java.lang.ref.WeakReference@232024b9
org.jboss.xnio:xnio-api:jar:3.2.0.Final=java.lang.ref.WeakReference@5ba745bc
org.jboss.xnio:xnio-nio:jar:3.3.4.Final=java.lang.ref.WeakReference@5ab9b447
org.wildfly.core:wildfly-platform-mbean:jar:2.0.10.Final=java.lang.ref.WeakReference@654b72c0
org.wildfly.core:wildfly-jmx:jar:2.0.10.Final=java.lang.ref.WeakReference@55b5e331
org.jboss.sasl:jboss-sasl:jar:1.0.5.Final=java.lang.ref.WeakReference@545f80bf
org.jboss.remoting:jboss-remoting:jar:4.0.8.Final=java.lang.ref.WeakReference@6034e75d
org.wildfly.core:wildfly-core-security-api:jar:2.0.10.Final=java.lang.ref.WeakReference@15fc442
org.wildfly.arquillian:wildfly-arquillian-protocol-jmx:jar:2.0.1.Final=java.lang.ref.WeakReference@6bb7cce7
org.wildfly.common:wildfly-common:jar:1.1.0.Final=java.lang.ref.WeakReference@3f3c7bdb
org.wildfly.core:wildfly-protocol:jar:2.0.10.Final=java.lang.ref.WeakReference@6134ac4a
org.picketbox:picketbox:jar:4.9.4.Final=java.lang.ref.WeakReference@456abb66
io.undertow:undertow-core:jar:1.3.15.Final=java.lang.ref.WeakReference@2a3a299
org.jboss.logmanager:jboss-logmanager:jar:2.0.3.Final=java.lang.ref.WeakReference@7da10b5b
org.jboss.msc:jboss-msc:jar:1.2.6.Final=java.lang.ref.WeakReference@219f4597
org.jboss.stdio:jboss-stdio:jar:1.0.2.GA=java.lang.ref.WeakReference@31be6b49
org.wildfly.core:wildfly-network:jar:2.0.10.Final=java.lang.ref.WeakReference@2e16b08d
org.wildfly.core:wildfly-deployment-repository:jar:2.0.10.Final=java.lang.ref.WeakReference@5b989dc7
org.jboss:jandex:jar:2.0.1.Final=java.lang.ref.WeakReference@70d8de
org.wildfly.core:wildfly-remoting:jar:2.0.10.Final=java.lang.ref.WeakReference@42561fba
org.jboss.xnio:xnio-api:jar:3.3.4.Final=java.lang.ref.WeakReference@55a8dc49
org.jboss.xnio:xnio-nio:jar:3.3.0.Final=java.lang.ref.WeakReference@595f4da5
org.jboss.threads:jboss-threads:jar:2.2.1.Final=java.lang.ref.WeakReference@4e406694
org.jboss.logging:jboss-logging:jar:3.3.0.Final=java.lang.ref.WeakReference@71b1a49c
org.jboss:jboss-dmr:jar:1.3.0.Final=java.lang.ref.WeakReference@4c7a078
org.wildfly.core:wildfly-self-contained:jar:2.0.10.Final=java.lang.ref.WeakReference@46b695ec

/ 4de 	,
dependency=org.wildfly.core:wildfly-launcher:jar:2.0.10.Final (compile)
/ 1 dep erbij,
args	DefaultDependencyCollector$Args  (id=8772)	
	pool	DataPool  (id=8738)	
		artifacts	ObjectPool<T>  (id=8743)	
			objects	WeakHashMap<K,V>  (id=8768)
org.jboss.modules:jboss-modules:jar:1.5.1.Final=java.lang.ref.WeakReference@1929425f
org.wildfly.core:wildfly-server:jar:2.0.10.Final=java.lang.ref.WeakReference@718607eb
org.wildfly.core:wildfly-controller:jar:2.0.10.Final=java.lang.ref.WeakReference@27f3b6d6
org.wildfly.core:wildfly-io:jar:2.0.10.Final=java.lang.ref.WeakReference@757f675c
org.wildfly.core:wildfly-launcher:jar:2.0.10.Final=java.lang.ref.WeakReference@5aa6202e				<- nieuw	,
org.wildfly.core:wildfly-controller-client:jar:2.0.10.Final=java.lang.ref.WeakReference@30865a90
javax.inject:javax.inject:jar:1=java.lang.ref.WeakReference@11ce2e22
org.jboss.xnio:xnio-api:jar:3.3.0.Final=java.lang.ref.WeakReference@2617f816
org.jboss.logging:jboss-logging:jar:3.1.4.GA=java.lang.ref.WeakReference@63034ed1
org.wildfly.core:wildfly-version:jar:2.0.10.Final=java.lang.ref.WeakReference@676f0a60
org.wildfly.arquillian:wildfly-arquillian-container-managed:jar:2.0.1.Final=java.lang.ref.WeakReference@1b70203f
org.jboss.remotingjmx:remoting-jmx:jar:2.0.1.Final=java.lang.ref.WeakReference@5d10455d
org.jboss.logging:jboss-logging:jar:3.1.1.GA=java.lang.ref.WeakReference@28f8e165
org.jboss.logging:jboss-logging:jar:3.2.1.Final=java.lang.ref.WeakReference@535b8c24
org.wildfly.core:wildfly-domain-http-interface:jar:2.0.10.Final=java.lang.ref.WeakReference@4a951911
org.jboss.invocation:jboss-invocation:jar:1.4.1.Final=java.lang.ref.WeakReference@55b62629
org.wildfly.core:wildfly-process-controller:jar:2.0.10.Final=java.lang.ref.WeakReference@a53bb6f
org.wildfly.core:wildfly-domain-management:jar:2.0.10.Final=java.lang.ref.WeakReference@5e63cad
org.jboss:jboss-vfs:jar:3.2.11.Final=java.lang.ref.WeakReference@6759f091
org.jboss.marshalling:jboss-marshalling-river:jar:1.4.10.Final=java.lang.ref.WeakReference@33a053d
org.wildfly.core:wildfly-core-security:jar:2.0.10.Final=java.lang.ref.WeakReference@14a54ef6
org.wildfly.security:wildfly-elytron:jar:1.0.2.Final=java.lang.ref.WeakReference@328572f0
org.wildfly.arquillian:wildfly-arquillian-common:jar:2.0.1.Final=java.lang.ref.WeakReference@51671b08
org.jboss.marshalling:jboss-marshalling:jar:1.4.10.Final=java.lang.ref.WeakReference@20921b9b
org.jboss:staxmapper:jar:1.2.0.Final=java.lang.ref.WeakReference@867ba60
org.jboss.remoting:jboss-remoting:jar:4.0.18.Final=java.lang.ref.WeakReference@232024b9
org.jboss.xnio:xnio-api:jar:3.2.0.Final=java.lang.ref.WeakReference@5ba745bc
org.jboss.xnio:xnio-nio:jar:3.3.4.Final=java.lang.ref.WeakReference@5ab9b447
org.wildfly.core:wildfly-platform-mbean:jar:2.0.10.Final=java.lang.ref.WeakReference@654b72c0
org.wildfly.core:wildfly-jmx:jar:2.0.10.Final=java.lang.ref.WeakReference@55b5e331
org.jboss.sasl:jboss-sasl:jar:1.0.5.Final=java.lang.ref.WeakReference@545f80bf
org.jboss.remoting:jboss-remoting:jar:4.0.8.Final=java.lang.ref.WeakReference@6034e75d
org.wildfly.core:wildfly-core-security-api:jar:2.0.10.Final=java.lang.ref.WeakReference@15fc442
org.wildfly.arquillian:wildfly-arquillian-protocol-jmx:jar:2.0.1.Final=java.lang.ref.WeakReference@6bb7cce7
org.wildfly.common:wildfly-common:jar:1.1.0.Final=java.lang.ref.WeakReference@3f3c7bdb
org.wildfly.core:wildfly-protocol:jar:2.0.10.Final=java.lang.ref.WeakReference@6134ac4a
org.picketbox:picketbox:jar:4.9.4.Final=java.lang.ref.WeakReference@456abb66
io.undertow:undertow-core:jar:1.3.15.Final=java.lang.ref.WeakReference@2a3a299
org.jboss.logmanager:jboss-logmanager:jar:2.0.3.Final=java.lang.ref.WeakReference@7da10b5b
org.jboss.msc:jboss-msc:jar:1.2.6.Final=java.lang.ref.WeakReference@219f4597
org.jboss.stdio:jboss-stdio:jar:1.0.2.GA=java.lang.ref.WeakReference@31be6b49
org.wildfly.core:wildfly-network:jar:2.0.10.Final=java.lang.ref.WeakReference@2e16b08d
org.wildfly.core:wildfly-deployment-repository:jar:2.0.10.Final=java.lang.ref.WeakReference@5b989dc7
org.jboss:jandex:jar:2.0.1.Final=java.lang.ref.WeakReference@70d8de
org.wildfly.core:wildfly-remoting:jar:2.0.10.Final=java.lang.ref.WeakReference@42561fba
org.jboss.xnio:xnio-api:jar:3.3.4.Final=java.lang.ref.WeakReference@55a8dc49
org.jboss.xnio:xnio-nio:jar:3.3.0.Final=java.lang.ref.WeakReference@595f4da5
org.jboss.threads:jboss-threads:jar:2.2.1.Final=java.lang.ref.WeakReference@4e406694
org.jboss.logging:jboss-logging:jar:3.3.0.Final=java.lang.ref.WeakReference@71b1a49c
org.jboss:jboss-dmr:jar:1.3.0.Final=java.lang.ref.WeakReference@4c7a078
org.wildfly.core:wildfly-self-contained:jar:2.0.10.Final=java.lang.ref.WeakReference@46b695ec

/ geen dep meer,
/t,
DefaultDependencyCollector.doRecurse(Args, Results, List<RemoteRepository>, DependencySelector, DependencyManager, DependencyTraverser, VersionFilter, Dependency, ArtifactDescriptorResult, DefaultDependencyNode) line: 507	

/ processing org.wildfly.arquillian:wildfly-arquillian-container-managed:jar:2.0.1.Final (compile)

            process( args, results, descriptorResult.getDependencies(), childRepos, childSelector, childManager,
                     childTraverser, childFilter );
/d,
            args.nodes.pop();

args	DefaultDependencyCollector$Args  (id=8772)	
	nodes	NodeStack  (id=8750)	
		nodes	DependencyNode[96]  (id=8752)
null		
		size	1	
/t,
DefaultDependencyCollector.process(Args, Results, List<Dependency>, List<RemoteRepository>, DependencySelector, DependencyManager, DependencyTraverser, VersionFilter) line: 354

/ process null,

        for ( Dependency dependency : dependencies )
dependencies=
org.wildfly.arquillian:wildfly-arquillian-container-managed:jar:2.0.1.Final (compile)
        {
            processDependency( args, results, repositories, depSelector, depManager, depTraverser, verFilter,
                               dependency );
        }
/ geen dependencies meer,
/t,
DefaultDependencyCollector.collectDependencies(RepositorySystemSession, CollectRequest) line: 260

        DefaultDependencyNode node; / deze is local in deze method,
        if ( traverse && !dependencies.isEmpty() )
        {		
            Args args = new Args( session, trace, pool, nodes, context, versionContext, request ); / local in block,
			...
            process( args, results, dependencies, repositories,
                     depSelector != null ? depSelector.deriveChildSelector( context ) : null,
                     depManager != null ? depManager.deriveChildManager( context ) : null,
                     depTraverser != null ? depTraverser.deriveChildTraverser( context ) : null,
                     verFilter != null ? verFilter.deriveChildFilter( context ) : null ); 	/ laatste arg: child=null,
		}
/d,	

/ args is verdwenen	, maar node is er nog,

node	DefaultDependencyNode  (id=8736)	
	artifact	null	
	children	ArrayList<E>  (id=8998)	
		[0]	DefaultDependencyNode  (id=8996)	
			artifact	DefaultArtifact  (id=8304)	org.wildfly.arquillian:wildfly-arquillian-container-managed:jar:2.0.1.Final
			children	ArrayList<E>  (id=9539)	
				[0]	DefaultDependencyNode  (id=9791)	
				artifact	DefaultArtifact  (id=9600)	org.wildfly.arquillian:wildfly-arquillian-common:jar:2.0.1.Final
					children	ArrayList<E>  (id=9947)	
						[0]	DefaultDependencyNode  (id=10394)	
							artifact	DefaultArtifact  (id=10261)	org.wildfly.core:wildfly-controller-client:jar:2.0.10.Final
							children	ArrayList<E>  (id=10476)	
								[0]	DefaultDependencyNode  (id=10592)
									artifact	DefaultArtifact  (id=10484)	org.wildfly.core:wildfly-protocol:jar:2.0.10.Final
									children	ArrayList<E>  (id=10610)	
										[0]	DefaultDependencyNode  (id=10694)	
											artifact	DefaultArtifact  (id=10615)	org.jboss.logging:jboss-logging:jar:3.3.0.Final
											children	ArrayList<E>  (id=10719)	[]
										[1]	DefaultDependencyNode  (id=10959)
											artifact	DefaultArtifact  (id=10938)	org.jboss.remoting:jboss-remoting:jar:4.0.18.Final
											children	ArrayList<E>  (id=19698)	
												[0]	DefaultDependencyNode  (id=10966)
													artifact	DefaultArtifact  (id=19712)	org.jboss.logging:jboss-logging:jar:3.1.4.GA
													children	ArrayList<E>  (id=19713)	[]
												[1]	DefaultDependencyNode  (id=10972)	
													artifact	DefaultArtifact  (id=19724)	org.jboss.xnio:xnio-api:jar:3.3.4.Final
													children	ArrayList<E>  (id=19725)	[]
										[2]	DefaultDependencyNode  (id=11192)	
											artifact	DefaultArtifact  (id=11184)	org.jboss.sasl:jboss-sasl:jar:1.0.5.Final
											children	ArrayList<E>  (id=19739)	
												[0]	DefaultDependencyNode  (id=11199)	
													artifact	DefaultArtifact  (id=19755)	org.jboss.logging:jboss-logging:jar:3.1.1.GA
													children	ArrayList<E>  (id=19756)	[]
										[3]	DefaultDependencyNode  (id=11357)
											artifact	DefaultArtifact  (id=12238)	org.jboss.threads:jboss-threads:jar:2.2.1.Final
											children	ArrayList<E>  (id=12277)	[]
										[4]	DefaultDependencyNode  (id=11523)
											artifact	DefaultArtifact  (id=19724)	org.jboss.xnio:xnio-api:jar:3.3.4.Final
											children	ArrayList<E>  (id=19725)	[]
										[5]	DefaultDependencyNode  (id=11608)	
											artifact	DefaultArtifact  (id=11601)	org.jboss.xnio:xnio-nio:jar:3.3.4.Final
											children	ArrayList<E>  (id=19797)	
												[0]	DefaultDependencyNode  (id=11615)	
													artifact	DefaultArtifact  (id=19724)	org.jboss.xnio:xnio-api:jar:3.3.4.Final
													children	ArrayList<E>  (id=19725) []	
								[1]	DefaultDependencyNode  (id=11849)
									artifact	DefaultArtifact  (id=11814)	org.jboss:jboss-dmr:jar:1.3.0.Final
									children	ArrayList<E>  (id=19822)	[]
								[2]	DefaultDependencyNode  (id=12102)	
									artifact	DefaultArtifact  (id=11814)	org.jboss.logging:jboss-logging:jar:3.3.0.Final
									children	ArrayList<E>  (id=19822)	[]
								[3]	DefaultDependencyNode  (id=12267)	
									artifact	DefaultArtifact  (id=11814)	org.jboss.threads:jboss-threads:jar:2.2.1.Final
									children	ArrayList<E>  (id=19822)	[]
				[1]	DefaultDependencyNode  (id=12582)	
				[2]	DefaultDependencyNode  (id=15721)	
				[3]	DefaultDependencyNode  (id=15845)	
				[4]	DefaultDependencyNode  (id=15881)	
				[5]	DefaultDependencyNode  (id=15911)	
				[6]	DefaultDependencyNode  (id=15940)	
				[7]	DefaultDependencyNode  (id=15969)	
				[8]	DefaultDependencyNode  (id=16012)	
				[9]	DefaultDependencyNode  (id=16154)	
				[10]	DefaultDependencyNode  (id=16190)	
				[11]	DefaultDependencyNode  (id=17600)	

        DependencyGraphTransformer transformer = session.getDependencyGraphTransformer();
        if ( transformer != null )
        {
            try
            {
                DefaultDependencyGraphTransformationContext context =
                    new DefaultDependencyGraphTransformationContext( session );
                context.put( TransformationContextKeys.STATS, stats );
                result.setRoot( transformer.transformGraph( node, context ) );
/s,
ChainedDependencyGraphTransformer.transformGraph(DependencyNode, DependencyGraphTransformationContext) line: 71	
        for ( DependencyGraphTransformer transformer : transformers )
[org.eclipse.aether.util.graph.transformer.ConflictResolver@5649ec46, org.eclipse.aether.util.graph.transformer.JavaDependencyContextRefiner@78dc4696]
        {
            node = transformer.transformGraph( node, context );
/t,
DefaultDependencyCollector.collectDependencies(RepositorySystemSession, CollectRequest) line: 278	
                result.setRoot( transformer.transformGraph( node, context ) );
/pd,
/d,
result	CollectResult  (id=8670)	
	root	DefaultDependencyNode  (id=8736)	
		artifact	null	
		children	ArrayList<E>  (id=8998)	
			[0]	DefaultDependencyNode  (id=8996)	
				artifact	DefaultArtifact  (id=8304)	org.wildfly.arquillian:wildfly-arquillian-container-managed:jar:2.0.1.Final
				children	ArrayList<E>  (id=9539)	
					[0]	DefaultDependencyNode  (id=9791)	
					[1]	DefaultDependencyNode  (id=12582)	
					[2]	DefaultDependencyNode  (id=15721)	
					[3]	DefaultDependencyNode  (id=15845)	
					[4]	DefaultDependencyNode  (id=15881)	
					[5]	DefaultDependencyNode  (id=15911)	
					[6]	DefaultDependencyNode  (id=15940)	
					[7]	DefaultDependencyNode  (id=15969)	
					[8]	DefaultDependencyNode  (id=16012)	
					[9]	DefaultDependencyNode  (id=16154)	
					[10]	DefaultDependencyNode  (id=16190)	
					[11]	DefaultDependencyNode  (id=17600)	
        return result;
/t,
DefaultRepositorySystem.resolveDependencies(RepositorySystemSession, DependencyRequest) line: 347
        else if ( request.getCollectRequest() != null )
        {
            CollectResult collectResult;
            try
            {
                request.getCollectRequest().setTrace( trace );	
                collectResult = dependencyCollector.collectDependencies( session, request.getCollectRequest() );
/d,
            result.setRoot( collectResult.getRoot() ); / nu staat in result de root null met alle deps hierboven,
            result.setCycles( collectResult.getCycles() );
            result.setCollectExceptions( collectResult.getExceptions() );
		}
/ result is er nog,
        ArtifactRequestBuilder builder = new ArtifactRequestBuilder( trace );
        DependencyFilter filter = request.getFilter();
        DependencyVisitor visitor = ( filter != null ) ? new FilteringDependencyVisitor( builder, filter ) : builder;
        visitor = new TreeDependencyVisitor( visitor );
        result.getRoot().accept( visitor );
        List<ArtifactRequest> requests = builder.getRequests();
org.wildfly.arquillian:wildfly-arquillian-container-managed:jar:2.0.1.Final < [central (http://repo1.maven.org/maven2, default, releases+snapshots)]
org.wildfly.arquillian:wildfly-arquillian-common:jar:2.0.1.Final < [central (http://repo1.maven.org/maven2, default, releases+snapshots), jboss-public-repository (http://repository.jboss.org/nexus/content/groups/public/, default, releases+snapshots)]
org.wildfly.core:wildfly-controller-client:jar:2.0.10.Final < [central (http://repo1.maven.org/maven2, default, releases+snapshots), jboss-public-repository (http://repository.jboss.org/nexus/content/groups/public/, default, releases+snapshots)]
org.wildfly.core:wildfly-protocol:jar:2.0.10.Final < [central (http://repo1.maven.org/maven2, default, releases+snapshots), jboss-public-repository (http://repository.jboss.org/nexus/content/groups/public/, default, releases+snapshots), jboss-public-repository-group (http://repository.jboss.org/nexus/content/groups/public/, default, releases+snapshots)]
org.jboss:jboss-dmr:jar:1.3.0.Final < [central (http://repo1.maven.org/maven2, default, releases+snapshots), jboss-public-repository (http://repository.jboss.org/nexus/content/groups/public/, default, releases+snapshots), jboss-public-repository-group (http://repository.jboss.org/nexus/content/groups/public/, default, releases+snapshots)]
org.jboss.threads:jboss-threads:jar:2.2.1.Final < [central (http://repo1.maven.org/maven2, default, releases+snapshots), jboss-public-repository (http://repository.jboss.org/nexus/content/groups/public/, default, releases+snapshots), jboss-public-repository-group (http://repository.jboss.org/nexus/content/groups/public/, default, releases+snapshots)]
org.wildfly.arquillian:wildfly-arquillian-protocol-jmx:jar:2.0.1.Final < [central (http://repo1.maven.org/maven2, default, releases+snapshots), jboss-public-repository (http://repository.jboss.org/nexus/content/groups/public/, default, releases+snapshots)]
org.wildfly.security:wildfly-elytron:jar:1.0.2.Final < [central (http://repo1.maven.org/maven2, default, releases+snapshots), jboss-public-repository (http://repository.jboss.org/nexus/content/groups/public/, default, releases+snapshots)]
org.wildfly.core:wildfly-jmx:jar:2.0.10.Final < [central (http://repo1.maven.org/maven2, default, releases+snapshots), jboss-public-repository (http://repository.jboss.org/nexus/content/groups/public/, default, releases+snapshots)]
org.jboss.msc:jboss-msc:jar:1.2.6.Final < [central (http://repo1.maven.org/maven2, default, releases+snapshots), jboss-public-repository (http://repository.jboss.org/nexus/content/groups/public/, default, releases+snapshots), jboss-public-repository-group (http://repository.jboss.org/nexus/content/groups/public/, default, releases+snapshots)]
org.wildfly.core:wildfly-server:jar:2.0.10.Final < [central (http://repo1.maven.org/maven2, default, releases+snapshots), jboss-public-repository (http://repository.jboss.org/nexus/content/groups/public/, default, releases+snapshots), jboss-public-repository-group (http://repository.jboss.org/nexus/content/groups/public/, default, releases+snapshots)]
org.wildfly.core:wildfly-controller:jar:2.0.10.Final < [central (http://repo1.maven.org/maven2, default, releases+snapshots), jboss-public-repository (http://repository.jboss.org/nexus/content/groups/public/, default, releases+snapshots), jboss-public-repository-group (http://repository.jboss.org/nexus/content/groups/public/, default, releases+snapshots)]
org.jboss:staxmapper:jar:1.2.0.Final < [central (http://repo1.maven.org/maven2, default, releases+snapshots), jboss-public-repository (http://repository.jboss.org/nexus/content/groups/public/, default, releases+snapshots), jboss-public-repository-group (http://repository.jboss.org/nexus/content/groups/public/, default, releases+snapshots)]
org.wildfly.core:wildfly-domain-http-interface:jar:2.0.10.Final < [central (http://repo1.maven.org/maven2, default, releases+snapshots), jboss-public-repository (http://repository.jboss.org/nexus/content/groups/public/, default, releases+snapshots), jboss-public-repository-group (http://repository.jboss.org/nexus/content/groups/public/, default, releases+snapshots)]
org.wildfly.core:wildfly-deployment-repository:jar:2.0.10.Final < [central (http://repo1.maven.org/maven2, default, releases+snapshots), jboss-public-repository (http://repository.jboss.org/nexus/content/groups/public/, default, releases+snapshots), jboss-public-repository-group (http://repository.jboss.org/nexus/content/groups/public/, default, releases+snapshots)]
org.wildfly.core:wildfly-platform-mbean:jar:2.0.10.Final < [central (http://repo1.maven.org/maven2, default, releases+snapshots), jboss-public-repository (http://repository.jboss.org/nexus/content/groups/public/, default, releases+snapshots), jboss-public-repository-group (http://repository.jboss.org/nexus/content/groups/public/, default, releases+snapshots)]
org.wildfly.core:wildfly-process-controller:jar:2.0.10.Final < [central (http://repo1.maven.org/maven2, default, releases+snapshots), jboss-public-repository (http://repository.jboss.org/nexus/content/groups/public/, default, releases+snapshots), jboss-public-repository-group (http://repository.jboss.org/nexus/content/groups/public/, default, releases+snapshots)]
org.wildfly.core:wildfly-network:jar:2.0.10.Final < [central (http://repo1.maven.org/maven2, default, releases+snapshots), jboss-public-repository (http://repository.jboss.org/nexus/content/groups/public/, default, releases+snapshots), jboss-public-repository-group (http://repository.jboss.org/nexus/content/groups/public/, default, releases+snapshots)]
org.wildfly.core:wildfly-self-contained:jar:2.0.10.Final < [central (http://repo1.maven.org/maven2, default, releases+snapshots), jboss-public-repository (http://repository.jboss.org/nexus/content/groups/public/, default, releases+snapshots), jboss-public-repository-group (http://repository.jboss.org/nexus/content/groups/public/, default, releases+snapshots)]
org.wildfly.core:wildfly-version:jar:2.0.10.Final < [central (http://repo1.maven.org/maven2, default, releases+snapshots), jboss-public-repository (http://repository.jboss.org/nexus/content/groups/public/, default, releases+snapshots), jboss-public-repository-group (http://repository.jboss.org/nexus/content/groups/public/, default, releases+snapshots)]
org.jboss:jandex:jar:2.0.1.Final < [central (http://repo1.maven.org/maven2, default, releases+snapshots), jboss-public-repository (http://repository.jboss.org/nexus/content/groups/public/, default, releases+snapshots), jboss-public-repository-group (http://repository.jboss.org/nexus/content/groups/public/, default, releases+snapshots)]
org.jboss.invocation:jboss-invocation:jar:1.4.1.Final < [central (http://repo1.maven.org/maven2, default, releases+snapshots), jboss-public-repository (http://repository.jboss.org/nexus/content/groups/public/, default, releases+snapshots), jboss-public-repository-group (http://repository.jboss.org/nexus/content/groups/public/, default, releases+snapshots)]
org.jboss.logmanager:jboss-logmanager:jar:2.0.3.Final < [central (http://repo1.maven.org/maven2, default, releases+snapshots), jboss-public-repository (http://repository.jboss.org/nexus/content/groups/public/, default, releases+snapshots), jboss-public-repository-group (http://repository.jboss.org/nexus/content/groups/public/, default, releases+snapshots)]
org.jboss.modules:jboss-modules:jar:1.5.1.Final < [central (http://repo1.maven.org/maven2, default, releases+snapshots), jboss-public-repository (http://repository.jboss.org/nexus/content/groups/public/, default, releases+snapshots), jboss-public-repository-group (http://repository.jboss.org/nexus/content/groups/public/, default, releases+snapshots)]
org.jboss.stdio:jboss-stdio:jar:1.0.2.GA < [central (http://repo1.maven.org/maven2, default, releases+snapshots), jboss-public-repository (http://repository.jboss.org/nexus/content/groups/public/, default, releases+snapshots), jboss-public-repository-group (http://repository.jboss.org/nexus/content/groups/public/, default, releases+snapshots)]
org.jboss:jboss-vfs:jar:3.2.11.Final < [central (http://repo1.maven.org/maven2, default, releases+snapshots), jboss-public-repository (http://repository.jboss.org/nexus/content/groups/public/, default, releases+snapshots), jboss-public-repository-group (http://repository.jboss.org/nexus/content/groups/public/, default, releases+snapshots)]
io.undertow:undertow-core:jar:1.3.15.Final < [central (http://repo1.maven.org/maven2, default, releases+snapshots), jboss-public-repository (http://repository.jboss.org/nexus/content/groups/public/, default, releases+snapshots), jboss-public-repository-group (http://repository.jboss.org/nexus/content/groups/public/, default, releases+snapshots)]
org.wildfly.common:wildfly-common:jar:1.1.0.Final < [central (http://repo1.maven.org/maven2, default, releases+snapshots), jboss-public-repository (http://repository.jboss.org/nexus/content/groups/public/, default, releases+snapshots), jboss-public-repository-group (http://repository.jboss.org/nexus/content/groups/public/, default, releases+snapshots)]
org.wildfly.core:wildfly-remoting:jar:2.0.10.Final < [central (http://repo1.maven.org/maven2, default, releases+snapshots), jboss-public-repository (http://repository.jboss.org/nexus/content/groups/public/, default, releases+snapshots), jboss-public-repository-group (http://repository.jboss.org/nexus/content/groups/public/, default, releases+snapshots)]
org.wildfly.core:wildfly-domain-management:jar:2.0.10.Final < [central (http://repo1.maven.org/maven2, default, releases+snapshots), jboss-public-repository (http://repository.jboss.org/nexus/content/groups/public/, default, releases+snapshots), jboss-public-repository-group (http://repository.jboss.org/nexus/content/groups/public/, default, releases+snapshots)]
org.picketbox:picketbox:jar:4.9.4.Final < [central (http://repo1.maven.org/maven2, default, releases+snapshots), jboss-public-repository (http://repository.jboss.org/nexus/content/groups/public/, default, releases+snapshots), jboss-public-repository-group (http://repository.jboss.org/nexus/content/groups/public/, default, releases+snapshots)]
org.wildfly.core:wildfly-core-security:jar:2.0.10.Final < [central (http://repo1.maven.org/maven2, default, releases+snapshots), jboss-public-repository (http://repository.jboss.org/nexus/content/groups/public/, default, releases+snapshots), jboss-public-repository-group (http://repository.jboss.org/nexus/content/groups/public/, default, releases+snapshots)]
org.wildfly.core:wildfly-core-security-api:jar:2.0.10.Final < [central (http://repo1.maven.org/maven2, default, releases+snapshots), jboss-public-repository (http://repository.jboss.org/nexus/content/groups/public/, default, releases+snapshots), jboss-public-repository-group (http://repository.jboss.org/nexus/content/groups/public/, default, releases+snapshots)]
org.wildfly.core:wildfly-io:jar:2.0.10.Final < [central (http://repo1.maven.org/maven2, default, releases+snapshots), jboss-public-repository (http://repository.jboss.org/nexus/content/groups/public/, default, releases+snapshots), jboss-public-repository-group (http://repository.jboss.org/nexus/content/groups/public/, default, releases+snapshots)]
org.jboss.xnio:xnio-api:jar:3.3.4.Final < [central (http://repo1.maven.org/maven2, default, releases+snapshots), jboss-public-repository (http://repository.jboss.org/nexus/content/groups/public/, default, releases+snapshots)]
org.jboss.xnio:xnio-nio:jar:3.3.4.Final < [central (http://repo1.maven.org/maven2, default, releases+snapshots), jboss-public-repository (http://repository.jboss.org/nexus/content/groups/public/, default, releases+snapshots)]
org.jboss.logging:jboss-logging:jar:3.3.0.Final < [central (http://repo1.maven.org/maven2, default, releases+snapshots), jboss-public-repository (http://repository.jboss.org/nexus/content/groups/public/, default, releases+snapshots)]
org.jboss.marshalling:jboss-marshalling:jar:1.4.10.Final < [central (http://repo1.maven.org/maven2, default, releases+snapshots), jboss-public-repository (http://repository.jboss.org/nexus/content/groups/public/, default, releases+snapshots)]
org.jboss.marshalling:jboss-marshalling-river:jar:1.4.10.Final < [central (http://repo1.maven.org/maven2, default, releases+snapshots), jboss-public-repository (http://repository.jboss.org/nexus/content/groups/public/, default, releases+snapshots)]
org.jboss.remoting:jboss-remoting:jar:4.0.18.Final < [central (http://repo1.maven.org/maven2, default, releases+snapshots), jboss-public-repository (http://repository.jboss.org/nexus/content/groups/public/, default, releases+snapshots)]
org.jboss.remotingjmx:remoting-jmx:jar:2.0.1.Final < [central (http://repo1.maven.org/maven2, default, releases+snapshots), jboss-public-repository (http://repository.jboss.org/nexus/content/groups/public/, default, releases+snapshots)]
org.jboss.sasl:jboss-sasl:jar:1.0.5.Final < [central (http://repo1.maven.org/maven2, default, releases+snapshots), jboss-public-repository (http://repository.jboss.org/nexus/content/groups/public/, default, releases+snapshots)]
javax.inject:javax.inject:jar:1 < [central (http://repo1.maven.org/maven2, default, releases+snapshots), jboss-public-repository (http://repository.jboss.org/nexus/content/groups/public/, default, releases+snapshots)]
org.wildfly.core:wildfly-launcher:jar:2.0.10.Final < [central (http://repo1.maven.org/maven2, default, releases+snapshots), jboss-public-repository (http://repository.jboss.org/nexus/content/groups/public/, default, releases+snapshots)]

/ dit zijn er 43	, we hadden er 48 of 50 	, 
/ TODO

        try
        {
            results = artifactResolver.resolveArtifacts( session, requests );
/s,
DefaultArtifactResolver.resolveArtifacts(RepositorySystemSession, Collection<ArtifactRequest>) line: 246
	
            for ( ArtifactRequest request : requests )
org.wildfly.arquillian:wildfly-arquillian-container-managed:jar:2.0.1.Final < [central (http://repo1.maven.org/maven2, default, releases+snapshots)]

            {
                if ( request.getArtifact().getProperty( ArtifactProperties.LOCAL_PATH, null ) != null )
                {
                    continue;
                }
                artifacts.add( request.getArtifact() );
            }

            syncContext.acquire( artifacts, null );

            return resolve( session, requests );
/s,
DefaultArtifactResolver.resolve(RepositorySystemSession, Collection<ArtifactRequest>) line: 339	
        for ( ArtifactRequest request : requests )
        {
            RequestTrace trace = RequestTrace.newChild( request.getTrace(), request );

            ArtifactResult result = new ArtifactResult( request );
            results.add( result );

            Artifact artifact = request.getArtifact();
            List<RemoteRepository> repos = request.getRepositories();

            artifactResolving( session, trace, artifact );
/s,
DefaultArtifactResolver.artifactResolving(RepositorySystemSession, RequestTrace, Artifact) line: 658	
        RepositoryEvent.Builder event = new RepositoryEvent.Builder( session, EventType.ARTIFACT_RESOLVING );
        event.setTrace( trace );
        event.setArtifact( artifact );

        repositoryEventDispatcher.dispatch( event.build() );
/s,
DefaultRepositoryEventDispatcher.dispatch(RepositoryEvent) line: 89	
        RepositoryListener listener = event.getSession().getRepositoryListener();

        if ( listener != null )
        {
            dispatch( event, listener );
/s,
DefaultRepositoryEventDispatcher.dispatch(RepositoryEvent, RepositoryListener) line: 109	
       try
        {
            switch ( event.getType() )
            {
                case ARTIFACT_RESOLVING:
                    listener.artifactResolving( event );
                    break;
/s,
LogRepositoryListener.artifactResolving(RepositoryEvent) line: 124	
        log.finer("Resolving artifact " + event.getArtifact());	
/ TODO Maak logging in orde,
/t,
DefaultArtifactResolver.resolve(RepositorySystemSession, Collection<ArtifactRequest>) line: 278	
            artifactResolving( session, trace, artifact );
/d,
            String localPath = artifact.getProperty( ArtifactProperties.LOCAL_PATH, null );
            if ( localPath != null )
/n,
            if ( workspace != null )
/j,
org.jboss.shrinkwrap.resolver.impl.maven.aether.ClasspathWorkspaceReader@4fe01805
/ TODO
            LocalArtifactResult local =
                lrm.find( session, new LocalArtifactRequest( artifact, repos, request.getRequestContext() ) );
C:\Users\ervelden\.m2\repository\org\wildfly\arquillian\wildfly-arquillian-container-managed\2.0.1.Final\wildfly-arquillian-container-managed-2.0.1.Final.jar (available)
            if ( isLocallyInstalled( local, versionResult ) )
            {
                if ( local.getRepository() != null )
                {
                    result.setRepository( local.getRepository() );/ central (http://repo1.maven.org/maven2, default, releases+snapshots)
                try
                {
                    artifact = artifact.setFile( getFile( session, artifact, local.getFile() ) );
                    result.setArtifact( artifact );
                    artifactResolved( session, trace, artifact, result.getRepository(), null );
/ weer log	, net als net,

/ volgende,
        for ( ArtifactRequest request : requests )
org.wildfly.arquillian:wildfly-arquillian-common:jar:2.0.1.Final < [central (http://repo1.maven.org/maven2, default, releases+snapshots), jboss-public-repository (http://repository.jboss.org/nexus/content/groups/public/, default, releases+snapshots)]
        {

/ volgende,
        for ( ArtifactRequest request : requests )
org.wildfly.core:wildfly-controller-client:jar:2.0.10.Final < [central (http://repo1.maven.org/maven2, default, releases+snapshots), jboss-public-repository (http://repository.jboss.org/nexus/content/groups/public/, default, releases+snapshots)]        
		{
...
        for ( ResolutionGroup group : groups )
/n,
        {
            performDownloads( session, group );
/n,

        }
        return results;
/t,
DefaultArtifactResolver.resolveArtifacts(RepositorySystemSession, Collection<ArtifactRequest>) line: 246	
            return resolve( session, requests );
/d,
DefaultRepositorySystem.resolveDependencies(RepositorySystemSession, DependencyRequest) line: 373	
            results = artifactResolver.resolveArtifacts( session, requests );
/d,

/ we zien dat de boom structuur met nodes nog steeds bestaat	, en dat de nodes zelf ook in een lange lijst voorkomen, en in de boom	,
results	ArrayList<E>  (id=1594)	
	[0]	ArtifactResult  (id=1659)	
		artifact	DefaultArtifact  (id=1929)	org.wildfly.arquillian:wildfly-arquillian-container-managed:jar:2.0.1.Final
		request	ArtifactRequest  (id=1591)	
			artifact	DefaultArtifact  (id=1592)	org.wildfly.arquillian:wildfly-arquillian-container-managed:jar:2.0.1.Final
			node	DefaultDependencyNode  (id=418)	
				artifact	DefaultArtifact  (id=1929) org.wildfly.arquillian:wildfly-arquillian-container-managed:jar:2.0.1.Final	
				children	ArrayList<E>  (id=2284)	
					[0]	DefaultDependencyNode  (id=427)	
						artifact	DefaultArtifact  (id=1957)	org.wildfly.arquillian:wildfly-arquillian-common:jar:2.0.1.Final
						children	ArrayList<E>  (id=2308)	
							[0]	DefaultDependencyNode  (id=434)	
								artifact	DefaultArtifact  (id=2019)	org.wildfly.core:wildfly-controller-client:jar:2.0.10.Final
					[1]	DefaultDependencyNode  (id=529)	
						artifact	DefaultArtifact  (id=1957) org.wildfly.arquillian:wildfly-arquillian-protocol-jmx:jar:2.0.1.Final
					[2]	DefaultDependencyNode  (id=1414)	
					[3]	DefaultDependencyNode  (id=1420)	
					[4]	DefaultDependencyNode  (id=1433)	
					[5]	DefaultDependencyNode  (id=1439)	
					[6]	DefaultDependencyNode  (id=1445)	
					[7]	DefaultDependencyNode  (id=1451)	
					[8]	DefaultDependencyNode  (id=1470)	
					[9]	DefaultDependencyNode  (id=1546)	
					[10]	DefaultDependencyNode  (id=1559)	
					[11]	DefaultDependencyNode  (id=1565)	
	[1]	ArtifactResult  (id=1965)	
		artifact	DefaultArtifact  (id=2013)	org.wildfly.arquillian:wildfly-arquillian-common:jar:2.0.1.Final
	[2]	ArtifactResult  (id=2022)	
	[3]	ArtifactResult  (id=2087)	
	[4]	ArtifactResult  (id=2088)	
	[5]	ArtifactResult  (id=2089)	
	[6]	ArtifactResult  (id=2090)	
	[7]	ArtifactResult  (id=2091)	
	[8]	ArtifactResult  (id=2092)	
	[9]	ArtifactResult  (id=2093)	
	[10]	ArtifactResult  (id=2094)	
	[11]	ArtifactResult  (id=2095)	
	[12]	ArtifactResult  (id=2096)	
	[13]	ArtifactResult  (id=2097)	
	[14]	ArtifactResult  (id=2098)	
	[15]	ArtifactResult  (id=2099)	
	[16]	ArtifactResult  (id=2100)	
	[17]	ArtifactResult  (id=2108)	
	[18]	ArtifactResult  (id=2109)	
	[19]	ArtifactResult  (id=2110)	
	[20]	ArtifactResult  (id=2111)	
	[21]	ArtifactResult  (id=2112)	
	[22]	ArtifactResult  (id=2113)	
	[23]	ArtifactResult  (id=2114)	
	[24]	ArtifactResult  (id=2115)	
	[25]	ArtifactResult  (id=2116)	
	[26]	ArtifactResult  (id=2117)	
	[27]	ArtifactResult  (id=2118)	
	[28]	ArtifactResult  (id=2119)	
	[29]	ArtifactResult  (id=2120)	
	[30]	ArtifactResult  (id=2121)	
	[31]	ArtifactResult  (id=2122)	
	[32]	ArtifactResult  (id=2123)	
	[33]	ArtifactResult  (id=2124)	
	[34]	ArtifactResult  (id=2125)	
	[35]	ArtifactResult  (id=2126)	
	[36]	ArtifactResult  (id=2127)	
	[37]	ArtifactResult  (id=2129)	
	[38]	ArtifactResult  (id=2130)	
	[39]	ArtifactResult  (id=2131)	
	[40]	ArtifactResult  (id=2132)	
	[41]	ArtifactResult  (id=2133)	
	[42]	ArtifactResult  (id=2134)	
	[43]	ArtifactResult  (id=2135)
/=
org.wildfly.arquillian:wildfly-arquillian-container-managed:jar:2.0.1.Final < central (http://repo1.maven.org/maven2, default, releases+snapshots)
org.wildfly.arquillian:wildfly-arquillian-common:jar:2.0.1.Final < central (http://repo1.maven.org/maven2, default, releases+snapshots)
org.wildfly.core:wildfly-controller-client:jar:2.0.10.Final < central (http://repo1.maven.org/maven2, default, releases+snapshots)
org.wildfly.core:wildfly-protocol:jar:2.0.10.Final < central (http://repo1.maven.org/maven2, default, releases+snapshots)
org.jboss:jboss-dmr:jar:1.3.0.Final < jboss-public-repository-group (http://repository.jboss.org/nexus/content/groups/public/, default, releases+snapshots)
org.jboss.threads:jboss-threads:jar:2.2.1.Final < jboss-public-repository-group (http://repository.jboss.org/nexus/content/groups/public/, default, releases+snapshots)
org.wildfly.arquillian:wildfly-arquillian-protocol-jmx:jar:2.0.1.Final < central (http://repo1.maven.org/maven2, default, releases+snapshots)
org.wildfly.security:wildfly-elytron:jar:1.0.2.Final < central (http://repo1.maven.org/maven2, default, releases+snapshots)
org.wildfly.core:wildfly-jmx:jar:2.0.10.Final < central (http://repo1.maven.org/maven2, default, releases+snapshots)
org.jboss.msc:jboss-msc:jar:1.2.6.Final < jboss-public-repository-group (http://repository.jboss.org/nexus/content/groups/public/, default, releases+snapshots)
org.wildfly.core:wildfly-server:jar:2.0.10.Final < central (http://repo1.maven.org/maven2, default, releases+snapshots)
org.wildfly.core:wildfly-controller:jar:2.0.10.Final < central (http://repo1.maven.org/maven2, default, releases+snapshots)
org.jboss:staxmapper:jar:1.2.0.Final < jboss-public-repository-group (http://repository.jboss.org/nexus/content/groups/public/, default, releases+snapshots)
org.wildfly.core:wildfly-domain-http-interface:jar:2.0.10.Final < central (http://repo1.maven.org/maven2, default, releases+snapshots)
org.wildfly.core:wildfly-deployment-repository:jar:2.0.10.Final < central (http://repo1.maven.org/maven2, default, releases+snapshots)
org.wildfly.core:wildfly-platform-mbean:jar:2.0.10.Final < central (http://repo1.maven.org/maven2, default, releases+snapshots)
org.wildfly.core:wildfly-process-controller:jar:2.0.10.Final < central (http://repo1.maven.org/maven2, default, releases+snapshots)
org.wildfly.core:wildfly-network:jar:2.0.10.Final < central (http://repo1.maven.org/maven2, default, releases+snapshots)
org.wildfly.core:wildfly-self-contained:jar:2.0.10.Final < central (http://repo1.maven.org/maven2, default, releases+snapshots)
org.wildfly.core:wildfly-version:jar:2.0.10.Final < central (http://repo1.maven.org/maven2, default, releases+snapshots)
org.jboss:jandex:jar:2.0.1.Final < central (http://repo1.maven.org/maven2, default, releases+snapshots)
org.jboss.invocation:jboss-invocation:jar:1.4.1.Final < jboss-public-repository-group (http://repository.jboss.org/nexus/content/groups/public/, default, releases+snapshots)
org.jboss.logmanager:jboss-logmanager:jar:2.0.3.Final < central (http://repo1.maven.org/maven2, default, releases+snapshots)
org.jboss.modules:jboss-modules:jar:1.5.1.Final < central (http://repo1.maven.org/maven2, default, releases+snapshots)
org.jboss.stdio:jboss-stdio:jar:1.0.2.GA < jboss-public-repository-group (http://repository.jboss.org/nexus/content/groups/public/, default, releases+snapshots)
org.jboss:jboss-vfs:jar:3.2.11.Final < central (http://repo1.maven.org/maven2, default, releases+snapshots)
io.undertow:undertow-core:jar:1.3.15.Final < central (http://repo1.maven.org/maven2, default, releases+snapshots)
org.wildfly.common:wildfly-common:jar:1.1.0.Final < jboss-public-repository-group (http://repository.jboss.org/nexus/content/groups/public/, default, releases+snapshots)
org.wildfly.core:wildfly-remoting:jar:2.0.10.Final < central (http://repo1.maven.org/maven2, default, releases+snapshots)
org.wildfly.core:wildfly-domain-management:jar:2.0.10.Final < central (http://repo1.maven.org/maven2, default, releases+snapshots)
org.picketbox:picketbox:jar:4.9.4.Final < central (http://repo1.maven.org/maven2, default, releases+snapshots)
org.wildfly.core:wildfly-core-security:jar:2.0.10.Final < central (http://repo1.maven.org/maven2, default, releases+snapshots)
org.wildfly.core:wildfly-core-security-api:jar:2.0.10.Final < central (http://repo1.maven.org/maven2, default, releases+snapshots)
org.wildfly.core:wildfly-io:jar:2.0.10.Final < central (http://repo1.maven.org/maven2, default, releases+snapshots)
org.jboss.xnio:xnio-api:jar:3.3.4.Final < central (http://repo1.maven.org/maven2, default, releases+snapshots)
org.jboss.xnio:xnio-nio:jar:3.3.4.Final < central (http://repo1.maven.org/maven2, default, releases+snapshots)
org.jboss.logging:jboss-logging:jar:3.3.0.Final < central (http://repo1.maven.org/maven2, default, releases+snapshots)
org.jboss.marshalling:jboss-marshalling:jar:1.4.10.Final < central (http://repo1.maven.org/maven2, default, releases+snapshots)
org.jboss.marshalling:jboss-marshalling-river:jar:1.4.10.Final < central (http://repo1.maven.org/maven2, default, releases+snapshots)
org.jboss.remoting:jboss-remoting:jar:4.0.18.Final < central (http://repo1.maven.org/maven2, default, releases+snapshots)
org.jboss.remotingjmx:remoting-jmx:jar:2.0.1.Final < central (http://repo1.maven.org/maven2, default, releases+snapshots)
org.jboss.sasl:jboss-sasl:jar:1.0.5.Final < central (http://repo1.maven.org/maven2, default, releases+snapshots)
javax.inject:javax.inject:jar:1 < (classpath)
org.wildfly.core:wildfly-launcher:jar:2.0.10.Final < central (http://repo1.maven.org/maven2, default, releases+snapshots)	


        result.setArtifactResults( results );
result	DependencyResult  (id=1577)	
	artifactResults	ArrayList<E>  (id=1594) / lijst results hierboven,

        updateNodesWithResolvedArtifacts( results );
/s,
DefaultRepositorySystem.updateNodesWithResolvedArtifacts(List<ArtifactResult>) line: 397	
        for ( ArtifactResult result : results )
        {
            Artifact artifact = result.getArtifact();
            if ( artifact != null )
            {
                result.getRequest().getDependencyNode().setArtifact( artifact ); / TODO was al,
...
/t,
DefaultRepositorySystem.resolveDependencies(RepositorySystemSession, DependencyRequest) line: 387	
        updateNodesWithResolvedArtifacts( results );
/d,
        return result;
/t,
org.jboss.shrinkwrap.resolver.impl.maven.bootstrap.MavenRepositorySystem.resolveDependencies(org.eclipse.aether.RepositorySystemSession, org.jboss.shrinkwrap.resolver.api.maven.MavenWorkingSession, org.eclipse.aether.collection.CollectRequest, org.jboss.shrinkwrap.resolver.api.maven.filter.MavenResolutionFilter[]) line: 122	

        DependencyResult result = system.resolveDependencies(repoSession, depRequest);
/d,
this	MavenRepositorySystem  (id=386)	org.jboss.shrinkwrap.resolver.impl.maven.bootstrap.MavenRepositorySystem@328572f0
	system	DefaultRepositorySystem  (id=385)	org.eclipse.aether.internal.impl.DefaultRepositorySystem@6b530eb9
/ Hier komt aether in shrinkwrap,

        return result.getArtifactResults();
result	DependencyResult  (id=1577)	
	artifactResults	ArrayList<E>  (id=1594)	
		[0]	ArtifactResult  (id=1659)	
		...
/ de lange list hierboven (die ook de nodes bevat)	,
/t,
org.jboss.shrinkwrap.resolver.impl.maven.MavenWorkingSessionImpl.resolveDependencies(org.jboss.shrinkwrap.resolver.api.maven.strategy.MavenResolutionStrategy) line: 243	
        try {
            results = getSystem().resolveDependencies(getSession(), this, request,
                strategy.getResolutionFilters());
/d,
        for (final ArtifactResult result : results) {
            resolvedArtifacts.add(MavenResolvedArtifactImpl.fromArtifactResult(result));
/s,
org.jboss.shrinkwrap.resolver.impl.maven.MavenResolvedArtifactImpl.fromArtifactResult(org.eclipse.aether.resolution.ArtifactResult) line: 92	
        final Artifact artifact = artifactResult.getArtifact(); / org.wildfly.arquillian:wildfly-arquillian-container-managed:jar:2.0.1.Final
        final DependencyNode root = artifactResult.getRequest().getDependencyNode();

        // SHRINKRES-143 lets ignore invalid scope
        ScopeType scopeType = ScopeType.RUNTIME;
        try {
            scopeType = ScopeType.fromScopeType(root.getDependency().getScope()); / compile
			
        final List<DependencyNode> children = root.getChildren();
        final boolean optional = root.getDependency().isOptional(); / false,
        return new MavenResolvedArtifactImpl(artifact, scopeType, children, optional);
/s,
org.jboss.shrinkwrap.resolver.impl.maven.MavenResolvedArtifactImpl.<init>(org.eclipse.aether.artifact.Artifact, org.jboss.shrinkwrap.resolver.api.maven.ScopeType, java.util.List<org.eclipse.aether.graph.DependencyNode>, boolean) line: 68	
        super(artifact, scopeType, children, optional);
        this.file = artifactToFile(artifact);
/t,
org.jboss.shrinkwrap.resolver.impl.maven.MavenWorkingSessionImpl.resolveDependencies(org.jboss.shrinkwrap.resolver.api.maven.strategy.MavenResolutionStrategy) line: 252	
        for (final ArtifactResult result : results) {
            resolvedArtifacts.add(MavenResolvedArtifactImpl.fromArtifactResult(result));
/d,
        // Clear dependencies to be resolved (for the next request); we've already sent this request
        this.getDependenciesForResolution().clear();

this	MavenWorkingSessionImpl  (id=387)	
	dependencies	ArrayList<E>  (id=3967)	WAS
		[0]	MavenDependencyImpl  (id=3970)	
			delegate	MavenCoordinateImpl  (id=3983)	MavenCoordinate [org.wildfly.arquillian:wildfly-arquillian-container-managed:jar:2.0.1.Final

this	MavenWorkingSessionImpl  (id=387)	
	dependencies	ArrayList<E>  (id=3967)	[] NU,

        // apply post filtering
        return PostResolutionFilterApplicator.postFilter(resolvedArtifacts);
/ TODO
/t,
org.jboss.shrinkwrap.resolver.impl.maven.MavenStrategyStageImpl(org.jboss.shrinkwrap.resolver.impl.maven.MavenStrategyStageBaseImpl<STRATEGYSTAGETYPE,FORMATSTAGETYPE>).using(org.jboss.shrinkwrap.resolver.api.maven.strategy.MavenResolutionStrategy) line: 73	

        final Collection<MavenResolvedArtifact> resolvedArtifacts = session.resolveDependencies(strategy);
/d,
        // Proceed to format stage
        return this.createFormatStage(resolvedArtifacts);
/t,
org.jboss.shrinkwrap.resolver.impl.maven.MavenStrategyStageImpl(org.jboss.shrinkwrap.resolver.impl.maven.MavenStrategyStageBaseImpl<STRATEGYSTAGETYPE,FORMATSTAGETYPE>).withTransitivity() line: 52	
        return using(TransitiveStrategy.INSTANCE);
/d,
/t,
org.arquillian.container.chameleon.controller.Resolver.resolve(java.io.File, org.jboss.shrinkwrap.resolver.api.maven.coordinate.MavenDependency[]) line: 46	
            files = Maven.configureResolver()
                    .addDependencies(dependencies)
                    .resolve()
                    .withTransitivity()
/d,
                    .asFile();
/s,
org.jboss.shrinkwrap.resolver.impl.maven.MavenFormatStageImpl.asFile() line: 51	
        return as(File.class);
/s,
org.jboss.shrinkwrap.resolver.impl.maven.MavenFormatStageImpl.as(java.lang.Class<RETURNTYPE>) line: 82	

        final FormatProcessor<? super MavenResolvedArtifact, RETURNTYPE> processor = FormatProcessors.find(
                MavenResolvedArtifact.class, returnTypeClass);

        @SuppressWarnings("unchecked")
        final RETURNTYPE[] array = (RETURNTYPE[]) Array.newInstance(returnTypeClass, artifacts.size());

        int i = 0;
        for (final MavenResolvedArtifact artifact : artifacts) {
            array[i++] = processor.process(artifact, returnTypeClass);
/s,
org.jboss.shrinkwrap.resolver.spi.format.FileFormatProcessor.process(org.jboss.shrinkwrap.resolver.api.ResolvedArtifact, java.lang.Class) line: 39	
/=
    public File process(ResolvedArtifact artifact, Class returnType) throws IllegalArgumentException {
artifact	MavenResolvedArtifactImpl  (id=3856)	
	dependencies	MavenArtifactInfo[12]  (id=4054)	
		[0]	MavenArtifactInfoImpl  (id=4155)	
			dependencies	MavenArtifactInfo[1]  (id=4175)	
			mavenCoordinate	MavenCoordinateImpl  (id=4176)	
			scopeType	ScopeType  (id=3843)	
		[1]	MavenArtifactInfoImpl  (id=4156)	
		[2]	MavenArtifactInfoImpl  (id=4157)	
		[3]	MavenArtifactInfoImpl  (id=4158)	
		[4]	MavenArtifactInfoImpl  (id=4159)	
		[5]	MavenArtifactInfoImpl  (id=4160)	
		[6]	MavenArtifactInfoImpl  (id=4161)	
		[7]	MavenArtifactInfoImpl  (id=4162)	
		[8]	MavenArtifactInfoImpl  (id=4164)	
		[9]	MavenArtifactInfoImpl  (id=4165)	
		[10]	MavenArtifactInfoImpl  (id=4166)	
		[11]	MavenArtifactInfoImpl  (id=4168)	
	file	File  (id=1913)	
	mavenCoordinate	MavenCoordinateImpl  (id=4045)	
	scopeType	ScopeType  (id=3843)	
returnType	Class<T> (java.io.File) (id=1728)	

/ als we artifact print (toString())	,
artifact=MavenResolvedArtifactImpl [mavenCoordinate=MavenCoordinate [org.wildfly.arquillian:wildfly-arquillian-container-managed:jar:2.0.1.Final], resolvedVersion=2.0.1.Final, snapshotVersion=false, extension=jar, dependencies=[MavenArtifactInfoImpl [mavenCoordinate=MavenCoordinate [org.wildfly.arquillian:wildfly-arquillian-common:jar:2.0.1.Final], resolvedVersion=2.0.1.Final, snapshotVersion=false, extension=jar, scope=compile, dependencies=[MavenArtifactInfoImpl [mavenCoordinate=MavenCoordinate [org.wildfly.core:wildfly-controller-client:jar:2.0.10.Final], resolvedVersion=2.0.10.Final, snapshotVersion=false, extension=jar, scope=compile, dependencies=[MavenArtifactInfoImpl [mavenCoordinate=MavenCoordinate [org.wildfly.core:wildfly-protocol:jar:2.0.10.Final], resolvedVersion=2.0.10.Final, snapshotVersion=false, extension=jar, scope=compile, dependencies=[]], MavenArtifactInfoImpl [mavenCoordinate=MavenCoordinate [org.jboss:jboss-dmr:jar:1.3.0.Final], resolvedVersion=1.3.0.Final, snapshotVersion=false, extension=jar, scope=compile, dependencies=[]], MavenArtifactInfoImpl [mavenCoordinate=MavenCoordinate [org.jboss.threads:jboss-threads:jar:2.2.1.Final], resolvedVersion=2.2.1.Final, snapshotVersion=false, extension=jar, scope=compile, dependencies=[]]]]]], MavenArtifactInfoImpl [mavenCoordinate=MavenCoordinate [org.wildfly.arquillian:wildfly-arquillian-protocol-jmx:jar:2.0.1.Final], resolvedVersion=2.0.1.Final, snapshotVersion=false, extension=jar, scope=compile, dependencies=[MavenArtifactInfoImpl [mavenCoordinate=MavenCoordinate [org.wildfly.security:wildfly-elytron:jar:1.0.2.Final], resolvedVersion=1.0.2.Final, snapshotVersion=false, extension=jar, scope=compile, dependencies=[]], MavenArtifactInfoImpl [mavenCoordinate=MavenCoordinate [org.wildfly.core:wildfly-jmx:jar:2.0.10.Final], resolvedVersion=2.0.10.Final, snapshotVersion=false, extension=jar, scope=compile, dependencies=[MavenArtifactInfoImpl [mavenCoordinate=MavenCoordinate [org.jboss.msc:jboss-msc:jar:1.2.6.Final], resolvedVersion=1.2.6.Final, snapshotVersion=false, extension=jar, scope=compile, dependencies=[]], MavenArtifactInfoImpl [mavenCoordinate=MavenCoordinate [org.wildfly.core:wildfly-server:jar:2.0.10.Final], resolvedVersion=2.0.10.Final, snapshotVersion=false, extension=jar, scope=compile, dependencies=[MavenArtifactInfoImpl [mavenCoordinate=MavenCoordinate [org.wildfly.core:wildfly-controller:jar:2.0.10.Final], resolvedVersion=2.0.10.Final, snapshotVersion=false, extension=jar, scope=compile, dependencies=[MavenArtifactInfoImpl [mavenCoordinate=MavenCoordinate [org.jboss:staxmapper:jar:1.2.0.Final], resolvedVersion=1.2.0.Final, snapshotVersion=false, extension=jar, scope=compile, dependencies=[]]]], MavenArtifactInfoImpl [mavenCoordinate=MavenCoordinate [org.wildfly.core:wildfly-domain-http-interface:jar:2.0.10.Final], resolvedVersion=2.0.10.Final, snapshotVersion=false, extension=jar, scope=compile, dependencies=[]], MavenArtifactInfoImpl [mavenCoordinate=MavenCoordinate [org.wildfly.core:wildfly-deployment-repository:jar:2.0.10.Final], resolvedVersion=2.0.10.Final, snapshotVersion=false, extension=jar, scope=compile, dependencies=[]], MavenArtifactInfoImpl [mavenCoordinate=MavenCoordinate [org.wildfly.core:wildfly-platform-mbean:jar:2.0.10.Final], resolvedVersion=2.0.10.Final, snapshotVersion=false, extension=jar, scope=compile, dependencies=[]], MavenArtifactInfoImpl [mavenCoordinate=MavenCoordinate [org.wildfly.core:wildfly-process-controller:jar:2.0.10.Final], resolvedVersion=2.0.10.Final, snapshotVersion=false, extension=jar, scope=compile, dependencies=[]], MavenArtifactInfoImpl [mavenCoordinate=MavenCoordinate [org.wildfly.core:wildfly-network:jar:2.0.10.Final], resolvedVersion=2.0.10.Final, snapshotVersion=false, extension=jar, scope=compile, dependencies=[]], MavenArtifactInfoImpl [mavenCoordinate=MavenCoordinate [org.wildfly.core:wildfly-self-contained:jar:2.0.10.Final], resolvedVersion=2.0.10.Final, snapshotVersion=false, extension=jar, scope=compile, dependencies=[]], MavenArtifactInfoImpl [mavenCoordinate=MavenCoordinate [org.wildfly.core:wildfly-version:jar:2.0.10.Final], resolvedVersion=2.0.10.Final, snapshotVersion=false, extension=jar, scope=compile, dependencies=[]], MavenArtifactInfoImpl [mavenCoordinate=MavenCoordinate [org.jboss:jandex:jar:2.0.1.Final], resolvedVersion=2.0.1.Final, snapshotVersion=false, extension=jar, scope=compile, dependencies=[]], MavenArtifactInfoImpl [mavenCoordinate=MavenCoordinate [org.jboss.invocation:jboss-invocation:jar:1.4.1.Final], resolvedVersion=1.4.1.Final, snapshotVersion=false, extension=jar, scope=compile, dependencies=[]], MavenArtifactInfoImpl [mavenCoordinate=MavenCoordinate [org.jboss.logmanager:jboss-logmanager:jar:2.0.3.Final], resolvedVersion=2.0.3.Final, snapshotVersion=false, extension=jar, scope=compile, dependencies=[]], MavenArtifactInfoImpl [mavenCoordinate=MavenCoordinate [org.jboss.modules:jboss-modules:jar:1.5.1.Final], resolvedVersion=1.5.1.Final, snapshotVersion=false, extension=jar, scope=compile, dependencies=[]], MavenArtifactInfoImpl [mavenCoordinate=MavenCoordinate [org.jboss.stdio:jboss-stdio:jar:1.0.2.GA], resolvedVersion=1.0.2.GA, snapshotVersion=false, extension=jar, scope=compile, dependencies=[]], MavenArtifactInfoImpl [mavenCoordinate=MavenCoordinate [org.jboss:jboss-vfs:jar:3.2.11.Final], resolvedVersion=3.2.11.Final, snapshotVersion=false, extension=jar, scope=compile, dependencies=[]], MavenArtifactInfoImpl [mavenCoordinate=MavenCoordinate [io.undertow:undertow-core:jar:1.3.15.Final], resolvedVersion=1.3.15.Final, snapshotVersion=false, extension=jar, scope=compile, dependencies=[]], MavenArtifactInfoImpl [mavenCoordinate=MavenCoordinate [org.wildfly.common:wildfly-common:jar:1.1.0.Final], resolvedVersion=1.1.0.Final, snapshotVersion=false, extension=jar, scope=compile, dependencies=[]]]], MavenArtifactInfoImpl [mavenCoordinate=MavenCoordinate [org.wildfly.core:wildfly-remoting:jar:2.0.10.Final], resolvedVersion=2.0.10.Final, snapshotVersion=false, extension=jar, scope=compile, dependencies=[MavenArtifactInfoImpl [mavenCoordinate=MavenCoordinate [org.wildfly.core:wildfly-domain-management:jar:2.0.10.Final], resolvedVersion=2.0.10.Final, snapshotVersion=false, extension=jar, scope=compile, dependencies=[MavenArtifactInfoImpl [mavenCoordinate=MavenCoordinate [org.picketbox:picketbox:jar:4.9.4.Final], resolvedVersion=4.9.4.Final, snapshotVersion=false, extension=jar, scope=compile, dependencies=[]]]], MavenArtifactInfoImpl [mavenCoordinate=MavenCoordinate [org.wildfly.core:wildfly-core-security:jar:2.0.10.Final], resolvedVersion=2.0.10.Final, snapshotVersion=false, extension=jar, scope=compile, dependencies=[MavenArtifactInfoImpl [mavenCoordinate=MavenCoordinate [org.wildfly.core:wildfly-core-security-api:jar:2.0.10.Final], resolvedVersion=2.0.10.Final, snapshotVersion=false, extension=jar, scope=compile, dependencies=[]]]], MavenArtifactInfoImpl [mavenCoordinate=MavenCoordinate [org.wildfly.core:wildfly-io:jar:2.0.10.Final], resolvedVersion=2.0.10.Final, snapshotVersion=false, extension=jar, scope=compile, dependencies=[]]]]]]]], MavenArtifactInfoImpl [mavenCoordinate=MavenCoordinate [org.jboss.xnio:xnio-api:jar:3.3.4.Final], resolvedVersion=3.3.4.Final, snapshotVersion=false, extension=jar, scope=compile, dependencies=[]], MavenArtifactInfoImpl [mavenCoordinate=MavenCoordinate [org.jboss.xnio:xnio-nio:jar:3.3.4.Final], resolvedVersion=3.3.4.Final, snapshotVersion=false, extension=jar, scope=compile, dependencies=[]], MavenArtifactInfoImpl [mavenCoordinate=MavenCoordinate [org.jboss.logging:jboss-logging:jar:3.3.0.Final], resolvedVersion=3.3.0.Final, snapshotVersion=false, extension=jar, scope=compile, dependencies=[]], MavenArtifactInfoImpl [mavenCoordinate=MavenCoordinate [org.jboss.marshalling:jboss-marshalling:jar:1.4.10.Final], resolvedVersion=1.4.10.Final, snapshotVersion=false, extension=jar, scope=compile, dependencies=[]], MavenArtifactInfoImpl [mavenCoordinate=MavenCoordinate [org.jboss.marshalling:jboss-marshalling-river:jar:1.4.10.Final], resolvedVersion=1.4.10.Final, snapshotVersion=false, extension=jar, scope=compile, dependencies=[]], MavenArtifactInfoImpl [mavenCoordinate=MavenCoordinate [org.jboss.remoting:jboss-remoting:jar:4.0.18.Final], resolvedVersion=4.0.18.Final, snapshotVersion=false, extension=jar, scope=compile, dependencies=[]], MavenArtifactInfoImpl [mavenCoordinate=MavenCoordinate [org.jboss.remotingjmx:remoting-jmx:jar:2.0.1.Final], resolvedVersion=2.0.1.Final, snapshotVersion=false, extension=jar, scope=compile, dependencies=[]], MavenArtifactInfoImpl [mavenCoordinate=MavenCoordinate [org.jboss.sasl:jboss-sasl:jar:1.0.5.Final], resolvedVersion=1.0.5.Final, snapshotVersion=false, extension=jar, scope=compile, dependencies=[]], MavenArtifactInfoImpl [mavenCoordinate=MavenCoordinate [javax.inject:javax.inject:jar:1], resolvedVersion=1, snapshotVersion=false, extension=jar, scope=compile, dependencies=[]], MavenArtifactInfoImpl [mavenCoordinate=MavenCoordinate [org.wildfly.core:wildfly-launcher:jar:2.0.10.Final], resolvedVersion=2.0.10.Final, snapshotVersion=false, extension=jar, scope=compile, dependencies=[]]]]

        File file = artifact.asFile();
C:\Users\ervelden\.m2\repository\org\wildfly\arquillian\wildfly-arquillian-container-managed\2.0.1.Final\wildfly-arquillian-container-managed-2.0.1.Final.jar
        return file;
/t,
org.jboss.shrinkwrap.resolver.impl.maven.MavenFormatStageImpl.as(java.lang.Class<RETURNTYPE>) line: 91	
        for (final MavenResolvedArtifact artifact : artifacts) {
            array[i++] = processor.process(artifact, returnTypeClass);
/d, 
/ volgende,
...
        return array;
array	File[44]  (id=4132)	
	[0]	File  (id=1913)	C:\Users\ervelden\.m2\repository\org\wildfly\arquillian\wildfly-arquillian-container-managed\2.0.1.Final\wildfly-arquillian-container-managed-2.0.1.Final.jar
	[1]	File  (id=2006)	C:\Users\ervelden\.m2\repository\org\wildfly\arquillian\wildfly-arquillian-common\2.0.1.Final\wildfly-arquillian-common-2.0.1.Final.jar
	[2]	File  (id=2062)	
	[3]	File  (id=4602)	
	[4]	File  (id=4603)	
	[5]	File  (id=4604)	
	[6]	File  (id=4605)	
	[7]	File  (id=4606)	
	[8]	File  (id=4607)	
	[9]	File  (id=4610)	
	[10]	File  (id=4611)	
	[11]	File  (id=4612)	
	[12]	File  (id=4615)	
	[13]	File  (id=4616)	
	[14]	File  (id=4617)	
	[15]	File  (id=4620)	
	[16]	File  (id=4621)	
	[17]	File  (id=4622)	
	[18]	File  (id=4625)	
	[19]	File  (id=4626)	
	[20]	File  (id=4627)	
	[21]	File  (id=4630)	
	[22]	File  (id=4631)	
	[23]	File  (id=4632)	
	[24]	File  (id=4635)	
	[25]	File  (id=4636)	
	[26]	File  (id=4637)	
	[27]	File  (id=4640)	
	[28]	File  (id=4641)	
	[29]	File  (id=4642)	
	[30]	File  (id=4645)	
	[31]	File  (id=4646)	
	[32]	File  (id=4647)	
	[33]	File  (id=4650)	
	[34]	File  (id=4651)	
	[35]	File  (id=4652)	
	[36]	File  (id=4655)	
	[37]	File  (id=4656)	
	[38]	File  (id=4657)	
	[39]	File  (id=4660)	
	[40]	File  (id=4661)	
	[41]	File  (id=4662)	
	[42]	File  (id=4665)	
	[43]	File  (id=4666)	

        return array;
/t,
org.jboss.shrinkwrap.resolver.impl.maven.MavenFormatStageImpl.asFile() line: 51	
        return as(File.class);
/d,
/t,
org.arquillian.container.chameleon.controller.Resolver.resolve(java.io.File, org.jboss.shrinkwrap.resolver.api.maven.coordinate.MavenDependency[]) line: 49	
            files = Maven.configureResolver()
                    .addDependencies(dependencies)
                    .resolve()
                    .withTransitivity()
                    .asFile();
/d,
            writeCache(getCacheFile(cacheFolder, hash), files);
/s,
org.arquillian.container.chameleon.controller.Resolver.writeCache(java.io.File, java.io.File[]) line: 55	
cacheFile	File  (id=4727)	target\server\cache\02ab9c7835daac7b404a80beba35ee3089ad69a3b36d3fa0ada01eddf03f617d.cache
files	File[44]  (id=4132)	
	[0]	File  (id=1913)	C:\Users\ervelden\.m2\repository\org\wildfly\arquillian\wildfly-arquillian-container-managed\2.0.1.Final\wildfly-arquillian-container-managed-2.0.1.Final.jar
	[1]	File  (id=2006)	C:\Users\ervelden\.m2\repository\org\wildfly\arquillian\wildfly-arquillian-common\2.0.1.Final\wildfly-arquillian-common-2.0.1.Final.jar
	...
        try {
            bw = new BufferedWriter(new FileWriter(cacheFile));
            for (File file : files) {
                bw.write(file.getAbsolutePath());
                bw.newLine();
       } finally {
            if (bw != null) {
                try {
                    bw.close(); /WH flush,
					
/we kunnen deze file open met notepad:
$ notepad target\server\cache\02ab9c7835daac7b404a80beba35ee3089ad69a3b36d3fa0ada01eddf03f617d.cache
C:\Users\ervelden\.m2\repository\org\wildfly\arquillian\wildfly-arquillian-container-managed\2.0.1.Final\wildfly-arquillian-container-managed-2.0.1.Final.jar
C:\Users\ervelden\.m2\repository\org\wildfly\arquillian\wildfly-arquillian-common\2.0.1.Final\wildfly-arquillian-common-2.0.1.Final.jar
C:\Users\ervelden\.m2\repository\org\wildfly\core\wildfly-controller-client\2.0.10.Final\wildfly-controller-client-2.0.10.Final.jar
C:\Users\ervelden\.m2\repository\org\wildfly\core\wildfly-protocol\2.0.10.Final\wildfly-protocol-2.0.10.Final.jar
C:\Users\ervelden\.m2\repository\org\jboss\jboss-dmr\1.3.0.Final\jboss-dmr-1.3.0.Final.jar
C:\Users\ervelden\.m2\repository\org\jboss\threads\jboss-threads\2.2.1.Final\jboss-threads-2.2.1.Final.jar
C:\Users\ervelden\.m2\repository\org\wildfly\arquillian\wildfly-arquillian-protocol-jmx\2.0.1.Final\wildfly-arquillian-protocol-jmx-2.0.1.Final.jar
C:\Users\ervelden\.m2\repository\org\wildfly\security\wildfly-elytron\1.0.2.Final\wildfly-elytron-1.0.2.Final.jar
C:\Users\ervelden\.m2\repository\org\wildfly\core\wildfly-jmx\2.0.10.Final\wildfly-jmx-2.0.10.Final.jar
C:\Users\ervelden\.m2\repository\org\jboss\msc\jboss-msc\1.2.6.Final\jboss-msc-1.2.6.Final.jar
C:\Users\ervelden\.m2\repository\org\wildfly\core\wildfly-server\2.0.10.Final\wildfly-server-2.0.10.Final.jar
C:\Users\ervelden\.m2\repository\org\wildfly\core\wildfly-controller\2.0.10.Final\wildfly-controller-2.0.10.Final.jar
C:\Users\ervelden\.m2\repository\org\jboss\staxmapper\1.2.0.Final\staxmapper-1.2.0.Final.jar
C:\Users\ervelden\.m2\repository\org\wildfly\core\wildfly-domain-http-interface\2.0.10.Final\wildfly-domain-http-interface-2.0.10.Final.jar
C:\Users\ervelden\.m2\repository\org\wildfly\core\wildfly-deployment-repository\2.0.10.Final\wildfly-deployment-repository-2.0.10.Final.jar
C:\Users\ervelden\.m2\repository\org\wildfly\core\wildfly-platform-mbean\2.0.10.Final\wildfly-platform-mbean-2.0.10.Final.jar
C:\Users\ervelden\.m2\repository\org\wildfly\core\wildfly-process-controller\2.0.10.Final\wildfly-process-controller-2.0.10.Final.jar
C:\Users\ervelden\.m2\repository\org\wildfly\core\wildfly-network\2.0.10.Final\wildfly-network-2.0.10.Final.jar
C:\Users\ervelden\.m2\repository\org\wildfly\core\wildfly-self-contained\2.0.10.Final\wildfly-self-contained-2.0.10.Final.jar
C:\Users\ervelden\.m2\repository\org\wildfly\core\wildfly-version\2.0.10.Final\wildfly-version-2.0.10.Final.jar
C:\Users\ervelden\.m2\repository\org\jboss\jandex\2.0.1.Final\jandex-2.0.1.Final.jar
C:\Users\ervelden\.m2\repository\org\jboss\invocation\jboss-invocation\1.4.1.Final\jboss-invocation-1.4.1.Final.jar
C:\Users\ervelden\.m2\repository\org\jboss\logmanager\jboss-logmanager\2.0.3.Final\jboss-logmanager-2.0.3.Final.jar
C:\Users\ervelden\.m2\repository\org\jboss\modules\jboss-modules\1.5.1.Final\jboss-modules-1.5.1.Final.jar
C:\Users\ervelden\.m2\repository\org\jboss\stdio\jboss-stdio\1.0.2.GA\jboss-stdio-1.0.2.GA.jar
C:\Users\ervelden\.m2\repository\org\jboss\jboss-vfs\3.2.11.Final\jboss-vfs-3.2.11.Final.jar
C:\Users\ervelden\.m2\repository\io\undertow\undertow-core\1.3.15.Final\undertow-core-1.3.15.Final.jar
C:\Users\ervelden\.m2\repository\org\wildfly\common\wildfly-common\1.1.0.Final\wildfly-common-1.1.0.Final.jar
C:\Users\ervelden\.m2\repository\org\wildfly\core\wildfly-remoting\2.0.10.Final\wildfly-remoting-2.0.10.Final.jar
C:\Users\ervelden\.m2\repository\org\wildfly\core\wildfly-domain-management\2.0.10.Final\wildfly-domain-management-2.0.10.Final.jar
C:\Users\ervelden\.m2\repository\org\picketbox\picketbox\4.9.4.Final\picketbox-4.9.4.Final.jar
C:\Users\ervelden\.m2\repository\org\wildfly\core\wildfly-core-security\2.0.10.Final\wildfly-core-security-2.0.10.Final.jar
C:\Users\ervelden\.m2\repository\org\wildfly\core\wildfly-core-security-api\2.0.10.Final\wildfly-core-security-api-2.0.10.Final.jar
C:\Users\ervelden\.m2\repository\org\wildfly\core\wildfly-io\2.0.10.Final\wildfly-io-2.0.10.Final.jar
C:\Users\ervelden\.m2\repository\org\jboss\xnio\xnio-api\3.3.4.Final\xnio-api-3.3.4.Final.jar
C:\Users\ervelden\.m2\repository\org\jboss\xnio\xnio-nio\3.3.4.Final\xnio-nio-3.3.4.Final.jar
C:\Users\ervelden\.m2\repository\org\jboss\logging\jboss-logging\3.3.0.Final\jboss-logging-3.3.0.Final.jar
C:\Users\ervelden\.m2\repository\org\jboss\marshalling\jboss-marshalling\1.4.10.Final\jboss-marshalling-1.4.10.Final.jar
C:\Users\ervelden\.m2\repository\org\jboss\marshalling\jboss-marshalling-river\1.4.10.Final\jboss-marshalling-river-1.4.10.Final.jar
C:\Users\ervelden\.m2\repository\org\jboss\remoting\jboss-remoting\4.0.18.Final\jboss-remoting-4.0.18.Final.jar
C:\Users\ervelden\.m2\repository\org\jboss\remotingjmx\remoting-jmx\2.0.1.Final\remoting-jmx-2.0.1.Final.jar
C:\Users\ervelden\.m2\repository\org\jboss\sasl\jboss-sasl\1.0.5.Final\jboss-sasl-1.0.5.Final.jar
C:\Users\ervelden\.m2\repository\javax\inject\javax.inject\1\javax.inject-1.jar
C:\Users\ervelden\.m2\repository\org\wildfly\core\wildfly-launcher\2.0.10.Final\wildfly-launcher-2.0.10.Final.jar

/t,
org.arquillian.container.chameleon.controller.Resolver.resolve(java.io.File, org.jboss.shrinkwrap.resolver.api.maven.coordinate.MavenDependency[]) line: 51	
            writeCache(getCacheFile(cacheFolder, hash), files);
/d,
        }
        return files;
/t,
org.arquillian.container.chameleon.controller.TargetController.resolveClasspathDependencies(org.arquillian.container.chameleon.spi.model.ContainerAdapter, java.io.File) line: 180	
            File[] archives = Resolver.resolve(resolverCacheFolder, mavenDependencies);
/d,
            return new URLClassLoader(toURLs(archives), ChameleonContainer.class.getClassLoader());
/s,
org.arquillian.container.chameleon.Utils.toURLs(java.io.File[]) line: 36	
        URL[] urls = new URL[archives.length];
        for (int i = 0; i < archives.length; i++) {
            urls[i] = archives[i].toURL();
        }
        return urls;
/ na 1 for loop:
urls	URL[44]  (id=4790)	
	[0]	URL  (id=4786)	file:/C:/Users/ervelden/.m2/repository/org/wildfly/arquillian/wildfly-arquillian-container-managed/2.0.1.Final/wildfly-arquillian-container-managed-2.0.1.Final.jar
	[1] URL (id=4802) file:/C:/Users/ervelden/.m2/repository/org/wildfly/arquillian/wildfly-arquillian-common/2.0.1.Final/wildfly-arquillian-common-2.0.1.Final.jar
	...
/t,
org.arquillian.container.chameleon.controller.TargetController.<init>(org.arquillian.container.chameleon.spi.model.ContainerAdapter, org.jboss.arquillian.core.api.Injector, java.io.File) line: 53	
        // init
        this.classloader = resolveClasspathDependencies(adapter, resolverCacheFolder);
/d,
adapter	ContainerAdapter  (id=3780)	
	adapter	Adapter  (id=3783)	
		adapterClass	"org.jboss.as.arquillian.container.managed.ManagedDeployableContainer" (id=3796)	
		configuration	LinkedHashMap<K,V>  (id=3797)	
		coordinates	"org.wildfly.arquillian:wildfly-arquillian-container-managed:2.0.1.Final" (id=3799)	
		dependencies	null	
		requireDist	true	
		type	"managed" (id=3800)	

this	TargetController  (id=383)	
	classloader	URLClassLoader  (id=4810)	
		ucp	URLClassPath  (id=4856)	
			loaders	ArrayList<E>  (id=4906)	
				[0]	URLClassPath$JarLoader  (id=4914)	
					base	URL  (id=4922)	jar:file:/C:/Users/ervelden/.m2/repository/org/wildfly/arquillian/wildfly-arquillian-container-managed/2.0.1.Final/wildfly-arquillian-container-managed-2.0.1.Final.jar!/
				[1]	URLClassPath$JarLoader  (id=4915)	
					base	URL  (id=4934) 	jar:file:/C:/Users/ervelden/.m2/repository/org/wildfly/arquillian/wildfly-arquillian-common/2.0.1.Final/wildfly-arquillian-common-2.0.1.Final.jar!/
			path	ArrayList<E>  (id=4908)	
				[0]	URL  (id=4786)	
				[1]	URL  (id=4802)	
				...
				[43]	URL  (id=4987)	
			urls	Stack<E>  (id=4909)	
				[0]	URL  (id=4987)	
				[1]	URL  (id=4986)	
				...
				[41]	URL  (id=4943)	

        final Class<?> delegateClass = classloader.loadClass(adapter.adapterClass());
class org.jboss.as.arquillian.container.managed.ManagedDeployableContainer
/ TODO Afmaken

/ 7	. 

/ ARQUILLIAN CHAMELEON REMOTE SAMENVATTING

/ We gaan remote,

/ jbosstools-jee-oxygen eclipse,
/ workspace-jbosstools-jee-oxygen,
/ proj arquillian-forge3

$ vi pom.xml

    <profile>
      <id>arquillian-wildfly-remote</id>
      <activation>
        <activeByDefault>true</activeByDefault>
      </activation>
      <build>
        <plugins>
          <plugin>
            <artifactId>maven-surefire-plugin</artifactId>
            <version>2.14.1</version>
            <configuration>
              <systemPropertyVariables>
                <arquillian.launch>arquillian-wildfly-remote</arquillian.launch>
                <chameleon.target>wildfly:10.1.0.Final:REMOTE</chameleon.target>
              </systemPropertyVariables>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>
 
$ vi src\main\resources\arquillian.xml

  <container default="true" qualifier="arquillian-wildfly-remote">
    <configuration>
      <property name="chameleonTarget">${chameleon.target}</property>
    </configuration>
  </container>
  
/ run config arquillian-forge3-clean-test
Main
Goals: clean test

/ run config arquillian-forge3-clean-test-debug
Main
Goals: -Dmaven.surefire.debug clean test
/ debug config arquillian-forge3-remote
host: localhost
port: 5005

/ start wildfly,
/ run config arquillian-forge3-clean-test
/ we zien in wildfly,

14:22:49,121 INFO  [org.jboss.as.repository] (management-handler-thread - 1) WFLYDR0001: Content added at location C:\Users\erve
lden\bin\wildfly-10.1.0.Final\standalone\data\content\8e\2cc2bceaf37a3437ea62b989493f742b863e3f\content
14:22:49,126 INFO  [org.jboss.as.server.deployment] (MSC service thread 1-2) WFLYSRV0027: Starting deployment of "test.war" (run
time-name: "test.war")
14:22:49,293 INFO  [org.jboss.weld.deployer] (MSC service thread 1-4) WFLYWELD0003: Processing weld deployment test.war
14:22:49,526 INFO  [org.wildfly.extension.undertow] (ServerService Thread Pool -- 74) WFLYUT0021: Registered web context: /test
14:22:49,591 INFO  [org.jboss.as.server] (management-handler-thread - 1) WFLYSRV0010: Deployed "test.war" (runtime-name : "test.
war")
14:22:49,950 INFO  [org.wildfly.extension.undertow] (ServerService Thread Pool -- 74) WFLYUT0022: Unregistered web context: /tes
t
14:22:50,000 INFO  [org.jboss.as.server.deployment] (MSC service thread 1-3) WFLYSRV0028: Stopped deployment test.war (runtime-n
ame: test.war) in 57ms
14:22:50,026 WARN  [org.jboss.as.controller] (management-handler-thread - 2) WFLYCTL0357: Notification of type deployment-undepl
oyed is not described for the resource at the address []
14:22:50,031 INFO  [org.jboss.as.repository] (management-handler-thread - 2) WFLYDR0002: Content removed from location C:\Users\
ervelden\bin\wildfly-10.1.0.Final\standalone\data\content\8e\2cc2bceaf37a3437ea62b989493f742b863e3f\content
14:22:50,031 INFO  [org.jboss.as.server] (management-handler-thread - 2) WFLYSRV0009: Undeployed "test.war" (runtime-name: "test
.war")


/ 7	. 

/ Eerst was overwrite door een Wicket file: C:\Users\ervelden\.m2\repository\org\wildfly\arquillian\wildfly-arquillian-container-remote\2.0.1.Final\wildfly-arquillian-container-remote-2.0.1.Final.pom: / 

/ We zagen op line 179 van TargetController.resolveClasspathDependencies (zie hieronder bovenaan in stack trace)	,

mrt 06, 2018 1:08:51 PM org.jboss.shrinkwrap.resolver.impl.maven.logging.LogRepositoryListener artifactDescriptorInvalid
WARNING: Invalid artifact descriptor for org.wildfly.arquillian:wildfly-arquillian-container-remote:jar:2.0.1.Final: 1 problem was encountered while building the effective model
[FATAL] Non-parseable POM C:\Users\ervelden\.m2\repository\org\wildfly\arquillian\wildfly-arquillian-container-remote\2.0.1.Final\wildfly-arquillian-container-remote-2.0.1.Final.pom: entity reference name can not contain character =' (position: TEXT seen ...ablePage=:org.apache.wicket.markup.html.pages.BrowserInfoPage&cto=... @5:128)  @ line 5, column 128

/ stack trace:

org.arquillian.container.chameleon.controller.TargetController.resolveClasspathDependencies(org.arquillian.container.chameleon.spi.model.ContainerAdapter, java.io.File) line: 179	
	            File[] archives = Resolver.resolve(resolverCacheFolder, mavenDependencies);
/cb,
	org.arquillian.container.chameleon.controller.TargetController.<init>(org.arquillian.container.chameleon.spi.model.ContainerAdapter, org.jboss.arquillian.core.api.Injector, java.io.File) line: 53	
	org.arquillian.container.chameleon.ChameleonContainer.init(org.arquillian.container.chameleon.ChameleonConfiguration, org.jboss.arquillian.config.descriptor.api.ContainerDef) line: 85	
	org.arquillian.container.chameleon.InitiateContainer.initiateChameleon(org.jboss.arquillian.container.spi.event.SetupContainer) line: 70	
	org.arquillian.container.chameleon.InitiateContainer.setup(org.jboss.arquillian.core.spi.EventContext<org.jboss.arquillian.container.spi.event.SetupContainer>) line: 39	
	sun.reflect.NativeMethodAccessorImpl.invoke0(java.lang.reflect.Method, java.lang.Object, java.lang.Object[]) line: not available [native method]	
	sun.reflect.NativeMethodAccessorImpl.invoke(java.lang.Object, java.lang.Object[]) line: 62	
	sun.reflect.DelegatingMethodAccessorImpl.invoke(java.lang.Object, java.lang.Object[]) line: 43	
	java.lang.reflect.Method.invoke(java.lang.Object, java.lang.Object...) line: 498	
	org.jboss.arquillian.core.impl.ObserverImpl.invoke(org.jboss.arquillian.core.spi.Manager, java.lang.Object) line: 96	
	org.jboss.arquillian.core.impl.EventContextImpl<T>.proceed() line: 92	
	org.jboss.arquillian.core.impl.ManagerImpl.fire(T, org.jboss.arquillian.core.spi.NonManagedObserver<T>) line: 143	
	org.jboss.arquillian.core.impl.ManagerImpl.fire(java.lang.Object) line: 114	
	org.jboss.arquillian.core.impl.EventImpl<T>.fire(T) line: 67	
	org.jboss.arquillian.container.impl.client.container.ContainerLifecycleController$1.perform(org.jboss.arquillian.container.spi.Container) line: 62	
	org.jboss.arquillian.container.impl.client.container.ContainerLifecycleController$1.perform(java.lang.Object) line: 55	
	org.jboss.arquillian.container.impl.client.container.ContainerLifecycleController.forEachContainer(org.jboss.arquillian.container.impl.client.container.ContainerLifecycleController.Operation<org.jboss.arquillian.container.spi.Container>) line: 209	
	org.jboss.arquillian.container.impl.client.container.ContainerLifecycleController.setupContainers(org.jboss.arquillian.container.spi.event.SetupContainers) line: 54	
	sun.reflect.NativeMethodAccessorImpl.invoke0(java.lang.reflect.Method, java.lang.Object, java.lang.Object[]) line: not available [native method]	
	sun.reflect.NativeMethodAccessorImpl.invoke(java.lang.Object, java.lang.Object[]) line: 62	
	sun.reflect.DelegatingMethodAccessorImpl.invoke(java.lang.Object, java.lang.Object[]) line: 43	
	java.lang.reflect.Method.invoke(java.lang.Object, java.lang.Object...) line: 498	
	org.jboss.arquillian.core.impl.ObserverImpl.invoke(org.jboss.arquillian.core.spi.Manager, java.lang.Object) line: 96	
	org.jboss.arquillian.core.impl.EventContextImpl<T>.invokeObservers() line: 103	
	org.jboss.arquillian.core.impl.EventContextImpl<T>.proceed() line: 85	
	org.jboss.arquillian.core.impl.ManagerImpl.fire(T, org.jboss.arquillian.core.spi.NonManagedObserver<T>) line: 143	
	org.jboss.arquillian.core.impl.ManagerImpl.fire(java.lang.Object) line: 114	
	org.jboss.arquillian.core.impl.EventImpl<T>.fire(T) line: 67	
	org.jboss.arquillian.container.test.impl.client.ContainerEventController.execute(org.jboss.arquillian.test.spi.event.suite.BeforeSuite) line: 85	
	sun.reflect.NativeMethodAccessorImpl.invoke0(java.lang.reflect.Method, java.lang.Object, java.lang.Object[]) line: not available [native method]	
	sun.reflect.NativeMethodAccessorImpl.invoke(java.lang.Object, java.lang.Object[]) line: 62	
	sun.reflect.DelegatingMethodAccessorImpl.invoke(java.lang.Object, java.lang.Object[]) line: 43	
	java.lang.reflect.Method.invoke(java.lang.Object, java.lang.Object...) line: 498	
	org.jboss.arquillian.core.impl.ObserverImpl.invoke(org.jboss.arquillian.core.spi.Manager, java.lang.Object) line: 96	
	org.jboss.arquillian.core.impl.EventContextImpl<T>.invokeObservers() line: 103	
	org.jboss.arquillian.core.impl.EventContextImpl<T>.proceed() line: 85	
	org.jboss.arquillian.test.impl.TestContextHandler.createSuiteContext(org.jboss.arquillian.core.spi.EventContext<org.jboss.arquillian.test.spi.event.suite.SuiteEvent>) line: 73	
	sun.reflect.NativeMethodAccessorImpl.invoke0(java.lang.reflect.Method, java.lang.Object, java.lang.Object[]) line: not available [native method]	
	sun.reflect.NativeMethodAccessorImpl.invoke(java.lang.Object, java.lang.Object[]) line: 62	
	sun.reflect.DelegatingMethodAccessorImpl.invoke(java.lang.Object, java.lang.Object[]) line: 43	
	java.lang.reflect.Method.invoke(java.lang.Object, java.lang.Object...) line: 498	
	org.jboss.arquillian.core.impl.ObserverImpl.invoke(org.jboss.arquillian.core.spi.Manager, java.lang.Object) line: 96	
	org.jboss.arquillian.core.impl.EventContextImpl<T>.proceed() line: 92	
	org.jboss.arquillian.core.impl.ManagerImpl.fire(T, org.jboss.arquillian.core.spi.NonManagedObserver<T>) line: 143	
	org.jboss.arquillian.core.impl.ManagerImpl.fire(java.lang.Object) line: 114	
	org.jboss.arquillian.test.impl.EventTestRunnerAdaptor.beforeSuite() line: 75	
	org.jboss.arquillian.junit.Arquillian.run(org.junit.runner.notification.RunNotifier) line: 116	
	org.apache.maven.surefire.junit4.JUnit4Provider.execute(java.lang.Class<?>, org.junit.runner.notification.RunNotifier, java.lang.String[]) line: 264	
	org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(java.lang.Class<?>, org.apache.maven.surefire.report.RunListener, org.junit.runner.notification.RunNotifier) line: 153	
	org.apache.maven.surefire.junit4.JUnit4Provider.invoke(java.lang.Object) line: 124	
	sun.reflect.NativeMethodAccessorImpl.invoke0(java.lang.reflect.Method, java.lang.Object, java.lang.Object[]) line: not available [native method]	
	sun.reflect.NativeMethodAccessorImpl.invoke(java.lang.Object, java.lang.Object[]) line: 62	
	sun.reflect.DelegatingMethodAccessorImpl.invoke(java.lang.Object, java.lang.Object[]) line: 43	
	java.lang.reflect.Method.invoke(java.lang.Object, java.lang.Object...) line: 498	
	org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray2(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]) line: 208	
	org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(java.lang.Object) line: 159	
	org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(java.lang.Object, java.lang.ClassLoader, java.lang.ClassLoader, java.lang.Object, org.apache.maven.surefire.booter.ProviderConfiguration, boolean, org.apache.maven.surefire.booter.StartupConfiguration, boolean) line: 87	
	org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(java.lang.Object, java.lang.ClassLoader, org.apache.maven.surefire.booter.StartupConfiguration, org.apache.maven.surefire.booter.ProviderConfiguration, java.io.PrintStream) line: 153	
	org.apache.maven.surefire.booter.ForkedBooter.main(java.lang.String[]) line: 95	
	
/ 7	. 

/ kijk nog eens naar,
C:\Users\ervelden\java\arquillian-container-chameleon>type C:\Users\ervelden\java\arquillian-container-chameleon\arquillian-chameleon-container-model\src\main\resources\chameleon\default\containers.yaml

/ 7	. 

C:\Users\ervelden\.m2\repository\org\wildfly\arquillian\wildfly-arquillian-container-remote>dir
 Volume in drive C is System
 Volume Serial Number is 90D0-8A5A

 Directory of C:\Users\ervelden\.m2\repository\org\wildfly\arquillian\wildfly-arquillian-container-remote

06-03-2018  14:22    <DIR>          .
06-03-2018  14:22    <DIR>          ..
06-03-2018  14:22    <DIR>          2.0.1.Final
24-02-2018  15:50    <DIR>          2.1.0.Final
               0 File(s)              0 bytes
               4 Dir(s)  24.061.448.192 bytes free
			   
/ In container.yaml wordt voor managed 2.1.0.Final genomen, en bij remote 2.0.1.Final
/ TODO


/ Einde ARQUILLIAN CHAMELEON REMOTE SAMENVATTING


/ 7	. 

[arquillian-forge3]$ arquillian-container-configuration --container arquillian-wildfly-remote --container-option managementPort --container-value 9990
[arquillian-forge3]$ build test --profile arquillian-wildfly-managed
[arquillian-forge3]$ arquillian-container-setup --container-adapter  wildfly-remote --container-adapter-version 10.1.0.Final
[arquillian-forge3]$ jpa-setup --jpa-provider Hibernate --data-source-name java:jboss/datasources/PostgreSQLDS
[arquillian-forge3]$ jpa-setup --jpa-provider Hibernate --data-source-name java:jboss/datasources/RemoteExampleDS --persistence-unit-name arquillian-forge3-persistence-unit-3 --overwrite-persistence-unit
[arquillian-forge3]$ jpa-generate-daos-from-entities --targets domain.Language --persistence-unit arquillian-forge3-persistence-unit --package-name repository --generator JPA_ENTITY
[arquillian-forge3]$ jpa-new-field --named name
[arquillian-forge3]$ jpa-new-entity --named Language --target-package domain
[arquillian-forge3]$ jpa-setup --jpa-provider Java\ EE



		
/ Einde ARQUILLIAN CHAMELEON DEBUG



/ 7	. 

Nexus Hotspot wachtwoord: f8703ffaa761
Samsung Hotspot wachtwoord: lfns7585
/ lees,
https://androidworld.nl/forum/samsung-galaxy-s7-edge/67995-hotspot-ingesteld-en-krijg-geen-verbinding-met-internet.html
instellingen, verbindingen, mobiele netwerken, namen toegangspunten, Vodafone NL, 
type toegangspunt: default, supl, mms, xcap
